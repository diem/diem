// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package types;

import "transaction_info.proto";

message AccumulatorProof {
  // The siblings. The ones near the leaf are at the beginning of the list. The
  // placeholder nodes are represented by empty byte arrays, other nodes should
  // be exactly 32-bytes long.
  repeated bytes siblings = 1;
}

message SparseMerkleProof {
  // This proof can be used to authenticate whether a given leaf exists in the
  // tree or not. In Rust:
  //   - If this is `Some(HashValue, HashValue)`
  //     - If the first `HashValue` equals requested key, this is an inclusion
  //       proof and the second `HashValue` equals the hash of the
  //       corresponding account blob.
  //     - Otherwise this is a non-inclusion proof. The first `HashValue` is
  //       the only key that exists in the subtree and the second `HashValue`
  //       equals the hash of the corresponding account blob.
  //   - If this is `None`, this is also a non-inclusion proof which indicates
  //     the subtree is empty.
  //
  // In protobuf, this leaf field should either be
  //   - empty, which corresponds to None in the Rust structure.
  //   - exactly 64 bytes, which corresponds to Some<(HashValue, HashValue)>
  //     in the Rust structure.
  bytes leaf = 1;

  // The siblings. The ones near the leaf are at the beginning of the list. The
  // placeholder nodes are represented by empty byte arrays, other nodes should
  // be exactly 32-bytes long.
  repeated bytes siblings = 2;
}

message AccumulatorConsistencyProof {
  // The root hashes of the subtrees that represent new leaves. Note that none
  // of these hashes should be default hash.
  repeated bytes subtrees = 1;
}

message AccumulatorRangeProof {
  // The siblings on the left of the path from root to the first leaf. The ones
  // near the leaf are at the beginning of the list. The placeholder nodes are
  // represented by empty byte arrays, other nodes should be exactly 32-bytes
  // long.
  repeated bytes left_siblings = 1;

  // The siblings on the right of the path from root to the last leaf. The ones
  // near the leaf are at the beginning of the list. The placeholder nodes are
  // represented by empty byte arrays, other nodes should be exactly 32-bytes
  // long.
  repeated bytes right_siblings = 2;
}

message SparseMerkleRangeProof {
  // The siblings on the right of the path from root to the last leaf. The ones
  // near the leaf are at the beginning of the list. The placeholder nodes are
  // represented by empty byte arrays, other nodes should be exactly 32-bytes
  // long.
  repeated bytes right_siblings = 1;
}

// The complete proof used to authenticate a transaction.
message TransactionProof {
  AccumulatorProof ledger_info_to_transaction_info_proof = 1;
  TransactionInfo transaction_info = 2;
}

// The complete proof used to authenticate an account state.
message AccountStateProof {
  AccumulatorProof ledger_info_to_transaction_info_proof = 1;
  TransactionInfo transaction_info = 2;
  SparseMerkleProof transaction_info_to_account_proof = 3;
}

// The complete proof used to authenticate an event.
message EventProof {
  AccumulatorProof ledger_info_to_transaction_info_proof = 1;
  TransactionInfo transaction_info = 2;
  AccumulatorProof transaction_info_to_event_proof = 3;
}

// The complete proof used to authenticate a list of transactions.
message TransactionListProof {
  AccumulatorRangeProof ledger_info_to_transaction_infos_proof = 1;
  repeated TransactionInfo transaction_infos = 2;
}
