// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package mempool;

import "transaction.proto";
import "mempool_status.proto";

// -----------------------------------------------------------------------------
// ---------------- Mempool Service Definition
// -----------------------------------------------------------------------------
service Mempool {
  // Fetch ordered block of transactions
  rpc GetBlock(GetBlockRequest) returns (GetBlockResponse) {}

  // Remove committed transactions from Mempool
  rpc CommitTransactions(CommitTransactionsRequest)
      returns (CommitTransactionsResponse) {}
}

// -----------------------------------------------------------------------------
// ---------------- GetBlock
// -----------------------------------------------------------------------------
message GetBlockRequest {
  uint64 max_block_size = 1;
  repeated TransactionExclusion transactions = 2;
}

message GetBlockResponse { types.SignedTransactionsBlock block = 1; }

message TransactionExclusion {
  bytes sender = 1;
  uint64 sequence_number = 2;
}

// -----------------------------------------------------------------------------
// ---------------- CommitTransactions
// -----------------------------------------------------------------------------
message CommitTransactionsRequest {
  repeated CommittedTransaction transactions = 1;
  // agreed monotonic timestamp microseconds since the epoch for a committed
  // block used by Mempool to GC expired transactions
  uint64 block_timestamp_usecs = 2;
}

message CommitTransactionsResponse {}

message CommittedTransaction {
  bytes sender = 1;
  uint64 sequence_number = 2;
  bool is_rejected = 3;
}
