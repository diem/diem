#!/bin/bash
# Copyright (c) The Diem Core Contributors
# SPDX-License-Identifier: Apache-2.0
set -e
set -o pipefail
TAG=""
CLUSTER_TEST_TAG=""
VALIDATOR_TAG=""
PR=""
WORKSPACE=""
ENV=""
REPORT=""
LOCAL_BUILD=""
EXIT_CODE=0
# Default timeout is 45 mins
TIMEOUT_SECS=2700

K8S_CONTEXT_PATTERN='arn:aws:eks:us-west-2:853397791086:cluster/libra-rustietest'
WORKSPACE='libra-rustietest'

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

source "${DIR}/ct.vars"
# Colorize Output
RESTORE=$(echo -en '\001\033[0m\002')
BLUE=$(echo -en '\001\033[01;34m\002')

join_args() {
  retval_join_args=""
  for var in "$@"
  do
    retval_join_args="${retval_join_args}, \"${var}\""
  done
}

join_env_vars() {
  retval_join_env_vars=""
  for var in $*
  do
    IFS='=' read -ra env_var <<< "$var"
    retval_join_env_vars="{\"name\":\"${env_var[0]}\", \"value\":\"${env_var[1]}\"}, ${retval_join_env_vars}"
  done
}

kube_init_context () {
  aws eks --region us-west-2 describe-cluster --name libra-rustietest &>/dev/null || (echo "Failed to access EKS, try awsmfa?"; exit 1)
  local context=${K8S_CONTEXT_PATTERN}
  if kubectl config get-contexts ${context} &> /dev/null; then
    return
  fi
}

kube_wait_pod () {
  local pod_name="${1}"
  local context="${2}"
  for i in {1..360} ; do
    local phase=$(kubectl --context="${context}" get pod "${pod_name}" -o jsonpath="{.status.phase}" || echo -n "kubectlfailed")
    if [[ "${phase}" == "kubectlfailed" ]]; then
        echo "kubectl get pod ${pod_name} failed. Retrying."
        sleep 10
        continue
    fi
    if [[ $phase != "Pending" &&  $phase != "Unknown" ]]; then
      echo "${pod_name} reached phase : ${phase}"
      return
    fi
    if kubectl --context="${context}" get pod "${pod_name}" | grep -i -e ImagePullBackOff -e InvalidImageName -e ErrImagePull &>/dev/null; then
      image_name=$(kubectl --context="${context}" get pod "${pod_name}" -o jsonpath="{.spec.containers[0].image}")
      echo "${pod_name} name failed to be scheduled because there was an error pulling the image : ${image_name}"
      # Delete the pod so that it doesn't block other pods from being scheduled on this
      kubectl  --context="${context}" delete pod "${pod_name}"
      exit 1
    fi
    echo "Waiting for ${pod_name} to be scheduled. Current phase : ${phase}"
    sleep 10
  done
  echo "Pod ${pod_name} failed to be scheduled"
  exit 1
}

while (( "$#" )); do
  case "$1" in
    --perf-run)
      echo "--perf-run is deprecated. Use --suite perf instead"
      exit 1
      ;;
    -R|--report)
      REPORT=$2
      shift 2
      ;;
    -p|--pr)
      PR=$2
      shift 2
      ;;
    -L|--local-build)
      LOCAL_BUILD="yes"
      shift 1
      ;;
    --timeout-secs)
      TIMEOUT_SECS=$2
      shift 2
      ;;
    -M|--master)
      TAG=master
      shift 1
      ;;
    -T|--tag)
      TAG=$2
      shift 2
      ;;
    --cluster-test-tag)
      CLUSTER_TEST_TAG=$2
      shift 2
      ;;
    --validator-tag)
      VALIDATOR_TAG=$2
      shift 2
      ;;
    -W|--workspace)
      WORKSPACE=$2
      shift 2
      ;;
    -E|--env)
      ENV="$ENV $2"
      shift 2
      ;;
    -c|--container|-i|--image|--deploy)
      echo "$1 command is not allowed in cti"
      exit 1
      ;;
    *) # end argument parsing
      break
      ;;
  esac
done

if [ -z "$PR" ] && [ -z "$TAG" ] && [ -z "$LOCAL_BUILD" ]
then
      echo "No PR or tag or --local-build specified"
      echo "Usage:"
      echo "cti [--pr <PR>|--master|--tag <TAG>|--local-build] [--workspace <WORKSPACE>] [-E <env>] [--timeout-secs <timeout_in_seconds>] <cluster test arguments>"
      echo
      echo "--local-build - Build image locally"
      echo "--pr <PR>: Build image from pull request #<PR>"
      echo "-M|--master: Use latest image available in CI"
      echo "-T|--tag <TAG>: Use image with tag TAG"
      echo "--timeout-secs: Timeout in seconds"
      echo "--cluster-test-tag <TAG>: Use this tag for cluster test"
      echo "-W|--workspace <WORKSPACE>: Use custom workplace <WORKSPACE>"
      echo "-E|--env <ENV>: Set environment variable, ex. -E RUST_LOG=debug. Can be repeated, e.g. -E A=B -E C=D"
      echo "-R|--report file.json: Generate json report into file.json"
      echo
      echo "To see cluster test runner arguments run cti --master"
      echo
      echo "Examples:"
      echo "cti --pr <PR> --run bench # Run benchmark"
      echo "cti --master --emit-tx # Submit transactions until Ctrl+C pressed"
      exit 1
fi

if [ -z "$TAG" ]; then
  if [ -z "$LOCAL_BUILD" ]; then
    aws codebuild list-projects >/dev/null || (echo "Failed to access codebuild, try awsmfa?"; exit 1)
    ./docker/build-aws.sh --build-forge --version pull/$PR
    TAG=dev_${USER}_pull_${PR}
    echo "**TIP Use cti -T $TAG <...> to restart this run with same tag without rebuilding it"
  else
    TAG="dev_$(whoami)_$(git rev-parse --short HEAD)"
    TAG=$TAG ./docker/build-push-local.sh
  fi
fi

FORGE_TAG=${FORGE_TAG:-${TAG}}
VALIDATOR_TAG=${VALIDATOR_TAG:-${TAG}}
OUTPUT_TEE=${CTI_OUTPUT_LOG:-$(mktemp)}

if ! which kubectl &>/dev/null; then
  echo "kubectl is not installed. Please install kubectl. On mac, you can use : brew install kubectl"
  exit 1
fi
echo "Running forge on Kubernetes"
kube_init_context
pod_name="forge-$(whoami)-$(date +%s)"
pod_name=${pod_name/_/-} #underscore not allowed in pod name
specfile=$(mktemp)
echo "Pod Spec : ${specfile}"
echo "hhhhh tag : ${FORGE_TAG}"
join_args "$@"
RUN_ID="${WORKSPACE}-${pod_name}"
ENV="$ENV AWS_ROLE_SESSION_NAME=AWS_ROLE_SESSION_NAME RUN_ID=$RUN_ID"
join_env_vars $ENV
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
sed -e "s/{pod_name}/${pod_name}/g" \
    -e "s/{timeout_secs}/${TIMEOUT_SECS}/g" \
    -e "s/{forge_image_tag}/${FORGE_TAG}/g" \
    -e "s^{env_variables}^${retval_join_env_vars}^g" \
    -e "s+{extra_args}+${retval_join_args}+g" \
    ${DIR}/forge_pod_template.yaml > ${specfile}

echo "Using cluster : ${WORKSPACE}"
context=${K8S_CONTEXT_PATTERN}
echo "contect: ${context}"
kubectl --context=${context} apply -f ${specfile} || (echo "Failed to create forge pod"; exit 1)
kube_wait_pod ${pod_name} ${context}
echo "**********"
echo "${BLUE}Auto refresh Dashboard:${RESTORE} http://grafana.${WORKSPACE}-k8s-testnet.aws.hlw3truzy4ls.com/d/performance/performance?from=${START_TS_MS}&to=now&refresh=5s"
echo "${BLUE}Tail logs:${RESTORE} http://kibana.${WORKSPACE}-k8s-testnet.aws.hlw3truzy4ls.com/app/kibana#/discover?_g=(refreshInterval:(pause:!f,value:10000),time:(from:'$START_UTC',to:now))"
echo "**********"
kubectl --context=${context} logs -f "${pod_name}" | tee $OUTPUT_TEE
pod_status=$(kubectl --context=${context} get pods "${pod_name}" -o jsonpath="{.status.phase}")
if [[ "${pod_status}" != "Succeeded" ]]; then
  echo "${pod_name} status: ${pod_status}"
  EXIT_CODE=1
fi
exit ${EXIT_CODE}