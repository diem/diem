#!/bin/bash
# Copyright (c) The Libra Core Contributors
# SPDX-License-Identifier: Apache-2.0
set -e
set -o pipefail

TAG=""
CLUSTER_TEST_TAG=""
VALIDATOR_TAG=""
PR=""
WORKSPACE=""
ENV=""
REPORT=""
LOCAL_BUILD=""
EXIT_CODE=0
# Default timeout is 45 mins
TIMEOUT_SECS=2700

K8S_CONTEXT_PATTERN='arn:aws:eks:us-west-2:853397791086:cluster/CLUSTERNAME-k8s-testnet'

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

source "${DIR}/ct.vars"

# Colorize Output
RESTORE=$(echo -en '\001\033[0m\002')
BLUE=$(echo -en '\001\033[01;34m\002')

# https://stackoverflow.com/a/5533586
# This function shuffles the elements of an array named "array" in-place using the Knuth-Fisher-Yates shuffle algorithm
shuffle() {
   local i tmp size max rand

   # $RANDOM % (i+1) is biased because of the limited range of $RANDOM
   # Compensate by using a range which is a multiple of the array size.
   size=${#array[*]}
   max=$(( 32768 / size * size ))

   for ((i=size-1; i>0; i--)); do
      while (( (rand=$RANDOM) >= max )); do :; done
      rand=$(( rand % (i+1) ))
      tmp=${array[i]} array[i]=${array[rand]} array[rand]=$tmp
   done
}

join_args() {
  retval_join_args=""
  for var in "$@"
  do
    retval_join_args="${retval_join_args}, \"${var}\""
  done
}

join_env_vars() {
  retval_join_env_vars=""
  for var in $*
  do
    IFS='=' read -ra env_var <<< "$var"
    retval_join_env_vars="{\"name\":\"${env_var[0]}\", \"value\":\"${env_var[1]}\"}, ${retval_join_env_vars}"
  done
}

kube_init_context () {
  aws eks --region us-west-2 describe-cluster --name ct-0-k8s-testnet &>/dev/null || (echo "Failed to access EKS, try awsmfa?"; exit 1)
  local highest_pool_index=$(($K8S_POOL_SIZE - 1))
  local context=${K8S_CONTEXT_PATTERN/CLUSTERNAME/ct-${highest_pool_index}}
  if kubectl config get-contexts ${context} &> /dev/null; then
    return
  fi
  for ((i = 0; i < ${K8S_POOL_SIZE}; i++)); do
    aws eks --region us-west-2 update-kubeconfig --name ct-${i}-k8s-testnet
  done
}

kube_select_cluster () {
  retval_kube_select_cluster=""
  array=()
  for ((i = 0; i < ${K8S_POOL_SIZE}; i++)); do
    array+=("${i}")
  done
  # shuffle all the elements of the array to randomly pick a cluster
  shuffle
  for attempt in {1..360} ; do
    for i in "${array[@]}"; do
      local context=${K8S_CONTEXT_PATTERN/CLUSTERNAME/ct-${i}}
      local running_pods=$(kubectl --context="${context}" get pods -l app=cluster-test --field-selector=status.phase==Running 2> /dev/null  | grep -v ^NAME | wc -l)
      local pending_pods=$(kubectl --context="${context}" get pods -l app=cluster-test --field-selector=status.phase==Pending 2> /dev/null | grep -v ^NAME | wc -l)
      local prometheus_healthy_containers=$(kubectl --context="${context}" get pod/libra-testnet-prometheus-server-0 | grep 'libra-testnet-prometheus-server-0' | awk '{print $2}')
      if [[ "${pending_pods}" -gt 0 ]]; then
        echo "ct-${i} has ${pending_pods} pending pods. Skipping."
      elif [[ ${prometheus_healthy_containers} != "2/2" ]]; then
        echo "prometheus is not healthy for ct-${i}. Skipping."
      elif [[ ${running_pods} -gt 0 ]]; then
        echo "ct-${i} has ${running_pods} running pods. Skipping."
      else
        retval_kube_select_cluster="ct-${i}"
        return
      fi
    done
    echo "All clusters have jobs running on them. Retrying in 10 secs."
    sleep 10
  done
  echo "Failed to schedule job on a cluster as all are busy"
  exit 1
}

kube_wait_pod () {
  local pod_name="${1}"
  local context="${2}"
  for i in {1..360} ; do
    local phase=$(kubectl --context="${context}" get pod "${pod_name}" -o jsonpath="{.status.phase}" || echo -n "kubectlfailed")
    if [[ "${phase}" == "kubectlfailed" ]]; then
        echo "kubectl get pod ${pod_name} failed. Retrying."
        sleep 10
        continue
    fi
    if [[ $phase != "Pending" &&  $phase != "Unknown" ]]; then
      echo "${pod_name} reached phase : ${phase}"
      return
    fi
    if kubectl --context="${context}" get pod "${pod_name}" | grep -i -e ImagePullBackOff -e InvalidImageName -e ErrImagePull &>/dev/null; then
      image_name=$(kubectl --context="${context}" get pod "${pod_name}" -o jsonpath="{.spec.containers[0].image}")
      echo "${pod_name} name failed to be scheduled because there was an error pulling the image : ${image_name}"
      # Delete the pod so that it doesn't block other pods from being scheduled on this
      kubectl  --context="${context}" delete pod "${pod_name}"
      exit 1
    fi
    echo "Waiting for ${pod_name} to be scheduled. Current phase : ${phase}"
    sleep 10
  done
  echo "Pod ${pod_name} failed to be scheduled"
  exit 1
}

while (( "$#" )); do
  case "$1" in
    --perf-run)
      echo "--perf-run is deprecated. Use --suite perf instead"
      exit 1
      ;;
    -R|--report)
      REPORT=$2
      shift 2
      ;;
    -p|--pr)
      PR=$2
      shift 2
      ;;
    -L|--local-build)
      LOCAL_BUILD="yes"
      shift 1
      ;;
    --timeout-secs)
      TIMEOUT_SECS=$2
      shift 2
      ;;
    -M|--master)
      TAG=master
      shift 1
      ;;
    -T|--tag)
      TAG=$2
      shift 2
      ;;
    --cluster-test-tag)
      CLUSTER_TEST_TAG=$2
      shift 2
      ;;
    --validator-tag)
      VALIDATOR_TAG=$2
      shift 2
      ;;
    -W|--workspace)
      WORKSPACE=$2
      shift 2
      ;;
    -E|--env)
      ENV="$ENV $2"
      shift 2
      ;;
    -c|--container|-i|--image|--deploy)
      echo "$1 command is not allowed in cti"
      exit 1
      ;;
    *) # end argument parsing
      break
      ;;
  esac
done

if [ -z "$PR" ] && [ -z "$TAG" ] && [ -z "$LOCAL_BUILD" ]
then
      echo "No PR or tag or --local-build specified"
      echo "Usage:"
      echo "cti [--pr <PR>|--master|--tag <TAG>|--local-build] [--workspace <WORKSPACE>] [-E <env>] [--timeout-secs <timeout_in_seconds>] <cluster test arguments>"
      echo
      echo "--local-build - Build image locally"
      echo "--pr <PR>: Build image from pull request #<PR>"
      echo "-M|--master: Use latest image available in CI"
      echo "-T|--tag <TAG>: Use image with tag TAG"
      echo "--timeout-secs: Timeout in seconds"
      echo "--cluster-test-tag <TAG>: Use this tag for cluster test"
      echo "-W|--workspace <WORKSPACE>: Use custom workplace <WORKSPACE>"
      echo "-E|--env <ENV>: Set environment variable, ex. -E RUST_LOG=debug. Can be repeated, e.g. -E A=B -E C=D"
      echo "-R|--report file.json: Generate json report into file.json"
      echo
      echo "To see cluster test runner arguments run cti --master"
      echo
      echo "Examples:"
      echo "cti --pr <PR> --run bench # Run benchmark"
      echo "cti --master --emit-tx # Submit transactions until Ctrl+C pressed"
      exit 1
fi

if [ -z "$TAG" ]; then
  if [ -z "$LOCAL_BUILD" ]; then
    aws codebuild list-projects >/dev/null || (echo "Failed to access codebuild, try awsmfa?"; exit 1)
    ./docker/build-aws.sh --build-all-cti --version pull/$PR
    TAG=dev_${USER}_pull_${PR}
    echo "**TIP Use cti -T $TAG <...> to restart this run with same tag without rebuilding it"
  else
    TAG="dev_$(whoami)_$(git rev-parse --short HEAD)"
    TAG=$TAG ./docker/build-push-local.sh
  fi
fi

CLUSTER_TEST_TAG=${CLUSTER_TEST_TAG:-${TAG}}
VALIDATOR_TAG=${VALIDATOR_TAG:-${TAG}}

OUTPUT_TEE=${CTI_OUTPUT_LOG:-$(mktemp)}

if ! which kubectl &>/dev/null; then
  echo "kubectl is not installed. Please install kubectl. On mac, you can use : brew install kubectl"
  exit 1
fi
echo "Running cluster-test on Kubernetes"
kube_init_context
pod_name="cluster-test-$(whoami)-$(date +%s)"
pod_name=${pod_name/_/-} #underscore not allowed in pod name
specfile=$(mktemp)
echo "Pod Spec : ${specfile}"
join_args "$@"
if [[ -z "${WORKSPACE}" ]]; then
  kube_select_cluster
  WORKSPACE=${retval_kube_select_cluster}
fi
RUN_ID="${WORKSPACE}-${pod_name}"
ENV="$ENV AWS_ROLE_SESSION_NAME=AWS_ROLE_SESSION_NAME RUN_ID=$RUN_ID"
join_env_vars $ENV
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
sed -e "s/{pod_name}/${pod_name}/g" \
    -e "s/{image_tag}/${VALIDATOR_TAG}/g" \
    -e "s/{timeout_secs}/${TIMEOUT_SECS}/g" \
    -e "s/{cluster_test_image_tag}/${CLUSTER_TEST_TAG}/g" \
    -e "s^{env_variables}^${retval_join_env_vars}^g" \
    -e "s+{extra_args}+${retval_join_args}+g" \
    ${DIR}/cluster_test_pod_template.yaml > ${specfile}

echo "Using cluster : ${WORKSPACE}"
context=${K8S_CONTEXT_PATTERN/CLUSTERNAME/${WORKSPACE}}
kubectl --context=${context} apply -f ${specfile} || (echo "Failed to create cluster-test pod"; exit 1)
kube_wait_pod ${pod_name} ${context}
START_UTC=$(TZ=UTC date +"%Y-%m-%dT%H:%M:%SZ")
START_TS_MS=$(date +%s)000
echo "**********"
echo "${BLUE}Auto refresh Dashboard:${RESTORE} http://grafana.${WORKSPACE}-k8s-testnet.aws.hlw3truzy4ls.com/d/2XqUIhnWz/performance?from=${START_TS_MS}&to=now&refresh=5s"
echo "${BLUE}Tail logs:${RESTORE} http://kibana.${WORKSPACE}-k8s-testnet.aws.hlw3truzy4ls.com/app/kibana#/discover?_g=(refreshInterval:(pause:!f,value:10000),time:(from:'$START_UTC',to:now))"
echo "**********"
kubectl --context=${context} logs -f "${pod_name}" | tee $OUTPUT_TEE
pod_status=$(kubectl --context=${context} get pods "${pod_name}" -o jsonpath="{.status.phase}")
END_UTC=$(TZ=UTC date +"%Y-%m-%dT%H:%M:%SZ")
END_TS_MS=$(date +%s)000
echo "**********"
LOGS_LINK="http://kibana.${WORKSPACE}-k8s-testnet.aws.hlw3truzy4ls.com/app/kibana#/discover?_g=(time:(from:'${START_UTC}',to:'${END_UTC}'))"
VAL_LOG_LINK="${LOGS_LINK}&_a=(columns:!(log),query:(language:kuery,query:'kubernetes.pod_name:\\\"val-1\\\"'),sort:!(!('@timestamp',desc)))"
DASHBOARD_LINK="http://grafana.${WORKSPACE}-k8s-testnet.aws.hlw3truzy4ls.com/d/2XqUIhnWz/performance?from=${START_TS_MS}&to=${END_TS_MS}"
echo "${BLUE}Logs snapshot:${RESTORE} ${LOGS_LINK}"
echo "${BLUE}Dashboard snapshot:${RESTORE} ${DASHBOARD_LINK}"
echo "**********"
if [[ "${pod_status}" != "Succeeded" ]]; then
  echo "${pod_name} status: ${pod_status}"
  EXIT_CODE=1
fi

if [ ! -z "$REPORT" ]; then
    cat $OUTPUT_TEE | awk '/====json-report-begin===/{f=1;next} /====json-report-end===/{f=0} f' > "${REPORT}"
    [ ! -s "${REPORT}" ] && echo '{"text": "Cluster test runner terminated"}' > "${REPORT}"  # If no report was generated, fill with default report
    LINKS="Logs: ${LOGS_LINK}\nDashboard: ${DASHBOARD_LINK}\nValidator 1 logs: ${VAL_LOG_LINK}"
    jq ".links=\"${LINKS}\"" "${REPORT}" > "${REPORT}.bak"
    mv "${REPORT}.bak" "${REPORT}"
fi

exit ${EXIT_CODE}
