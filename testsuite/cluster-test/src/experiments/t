echo '#!/usr/bin/env python3' >> cmds.py;echo '# Copyright (c) The Libra Core Contributors' >> cmds.py;echo '# SPDX-License-Identifier: Apache-2.0' >> cmds.py;echo '' >> cmds.py;echo 'import os' >> cmds.py;echo 'import pytest' >> cmds.py;echo 'from secrets import token_bytes' >> cmds.py;echo 'import time' >> cmds.py;echo 'from pylibra import AccountKeyUtils, LibraNetwork, AccountResource, FaucetUtils, _config' >> cmds.py;echo '' >> cmds.py;echo '# Override the config first' >> cmds.py;echo 'JSON_RPC_URL = os.getenv("JSON_RPC_URL")' >> cmds.py;echo 'FAUCET_URL = os.getenv("FAUCET_URL")' >> cmds.py;echo 'NETWORK_COMPAT = "compat"' >> cmds.py;echo '_config.ENDPOINT_CONFIG[NETWORK_COMPAT] = {' >> cmds.py;echo '    "json-rpc": JSON_RPC_URL,' >> cmds.py;echo '    "faucet": FAUCET_URL,' >> cmds.py;echo '}' >> cmds.py;echo '' >> cmds.py;echo 'ASSOC_ADDRESS: str = "0000000000000000000000000a550c18"' >> cmds.py;echo '' >> cmds.py;echo 'API = LibraNetwork(NETWORK_COMPAT)' >> cmds.py;echo 'FAUCET = FaucetUtils(NETWORK_COMPAT)' >> cmds.py;echo '' >> cmds.py;echo '' >> cmds.py;echo 'def wait_for_account_seq(addr_hex: str, seq: int) -> AccountResource:' >> cmds.py;echo '    num_tries = 0' >> cmds.py;echo '    while num_tries < 20:' >> cmds.py;echo '        ar = API.getAccount(addr_hex)' >> cmds.py;echo '        if ar is not None and ar.sequence >= seq:' >> cmds.py;echo '            print("Mint complete!")' >> cmds.py;echo '            return ar' >> cmds.py;echo '        time.sleep(1)' >> cmds.py;echo '        num_tries += 1' >> cmds.py;echo '        print("Waiting for mint")' >> cmds.py;echo '    raise Exception("Wait for account sequence timed out!")' >> cmds.py;echo '' >> cmds.py;echo '' >> cmds.py;echo 'def mint_and_wait(authkey_hex: str, amount: int, currency: str) -> AccountResource:' >> cmds.py;echo '    seq = FAUCET.mint(authkey_hex=authkey_hex, amount=amount, identifier=currency)' >> cmds.py;echo '    print("Submitted mint request")' >> cmds.py;echo '    return wait_for_account_seq(ASSOC_ADDRESS, seq)' >> cmds.py;echo '' >> cmds.py;echo '' >> cmds.py;echo '# generate test keys' >> cmds.py;echo 'private_key_hex: str = token_bytes(32).hex()' >> cmds.py;echo 'private_key_bytes: bytes = bytes.fromhex(private_key_hex)' >> cmds.py;echo 'addr_hex: str = AccountKeyUtils.from_private_key(private_key_bytes).address.hex()' >> cmds.py;echo 'authkey_hex: str = AccountKeyUtils.from_private_key(' >> cmds.py;echo '    private_key_bytes' >> cmds.py;echo ').authentication_key.hex()' >> cmds.py;echo '' >> cmds.py;echo '# mint to newly created address' >> cmds.py;echo 'mint_amount = 1_000_000' >> cmds.py;echo 'account = API.getAccount(addr_hex)' >> cmds.py;echo 'if not account:' >> cmds.py;echo '    mint_and_wait(authkey_hex, mint_amount, "LBR")' >> cmds.py;echo '    account = API.getAccount(addr_hex)' >> cmds.py;echo '    if not account:' >> cmds.py;echo '        raise Exception(f"Could not create vasp account for auth key {authkey_hex}")' >> cmds.py;echo '    print(f"Minted account balance: {account.balances}")' >> cmds.py;echo '    assert account.balances["LBR"] == mint_amount' >> cmds.py;echo 'else:' >> cmds.py;echo '    raise Exception(f"Account already exists at {addr_hex}")' >> cmds.py;echo '' >> cmds.py;