initSidebarItems({"mod":[["iterator","This module implements `JellyfishMerkleIterator`. Initialized with a version and a key, the iterator generates all the key-value pairs in this version of the tree, starting from the smallest key that is greater or equal to the given key, by performing a depth first traversal on the tree."],["metrics",""],["node_type","Node types of `JellyfishMerkleTree`"],["restore","This module implements the functionality to restore a `JellyfishMerkleTree` from small chunks of accounts."],["test_helper",""]],"struct":[["JellyfishMerkleTree","The Jellyfish Merkle tree data structure. See [`crate`] for description."],["MissingRootError",""],["NodeStats",""],["StaleNodeIndex","Indicates a node becomes stale since `stale_since_version`."],["TreeUpdateBatch","This is a wrapper of `NodeBatch`, `StaleNodeIndexBatch` and some stats of nodes that represents the incremental updates of a tree and pruning indices after applying a write set, which is a vector of `hashed_account_address` and `new_value` pairs."]],"trait":[["TestValue","`TestValue` defines the types of data that can be stored in a Jellyfish Merkle tree and used in tests."],["TreeReader","`TreeReader` defines the interface between `JellyfishMerkleTree` and underlying storage holding nodes."],["TreeWriter",""],["Value","`Value` defines the types of data that can be stored in a Jellyfish Merkle tree."]],"type":[["NodeBatch","Node batch that will be written into db atomically with other batches."],["StaleNodeIndexBatch","`StaleNodeIndex` batch that will be written into db atomically with other batches."]]});