// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

use protoc_grpcio::CompileResult;
use std::path::Path;

/// This crate provides a library for generating a Client trait for GRPC clients
/// generated by grpc-rs (protoc-grpcio)
///
/// This crate compliments the functionality provided by `protoc-grpcio` by defining a Trait for
/// the GRPC client service that can be used instead of the client directly for polymorphism and
/// testing.
///
///
/// ## Usage Example
///
/// To generate client trait as part of `build.rs` script, add:
///
/// ```ignore,no_run
/// grpcio_client::client_stub_gen(
///         &["calculator.proto"],               /* service files to generate traits for */
///         &["src/proto", "../deps/src/proto"], /* proto paths & includes */
///         "src/proto",                         /* target dir */
///     );
/// ```
///
/// This will create the file `calculator_client.rs` under `src/proto` folder.
///
/// The generated file will include 2 structures:
/// ```rust
/// // assuming the service name is `Calculator`
/// pub trait CalculatorClientTrait {
///     // methods
/// }
/// ```
/// and
///
/// ```rust
/// # struct CalculatorClient;
/// # pub trait CalculatorClientTrait {
/// #    // methods
/// # }
///
/// impl CalculatorClientTrait for CalculatorClient {
///     // method impl -- calling method from client
/// }
/// ```
mod codegen;
mod util;

/// Generate client trait for the GRPC Client
/// * `from` - the files with the services to generate client traits for
/// * `includes` - a vector of the parent folder of the files from `from` and all their includes.
/// * `to` - a path to a folder to store the generated files.
///
/// Generates client trait for the GRPC service defined in the first argument.
/// `from` argument includes
///
/// ## Example use:
///   client_stub_gen(&[Path::new("src/proto/myservice.proto")], vec![], "src/proto");
pub fn client_stub_gen<P: AsRef<Path>>(
    from: &[&Path],
    includes: &[&str],
    to: P,
) -> CompileResult<()> {
    let path_strings = from
        .iter()
        .map(|x| x.to_str().unwrap())
        .collect::<Vec<&str>>();
        
    let file_strings = from
        .iter()
        .map(|x| x.file_name().expect("unable to get filename").to_str().unwrap())
        .collect::<Vec<&str>>();

    let descriptor_set = util::protoc_descriptor_set(&path_strings, includes)?;
    util::write_out_generated_files(codegen::gen(descriptor_set.get_file(), &file_strings), &to)
        .expect("failed to write generated grpc definitions");

    Ok(())
}
