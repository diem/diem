version: 2.1

executors:
  build-executor:
    docker:
      - image: circleci/rust:buster
    resource_class: 2xlarge
  test-executor:
    docker:
      - image: circleci/rust:buster
    resource_class: xlarge
  audit-executor:
    docker:
      - image: circleci/rust:buster
    resource_class: xlarge
  terraform-executor:
    docker:
      - image: hashicorp/terraform
    resource_class: small

commands:
  rust_setup:
    description: Set rustc version
    steps:
      - run:
          name: Set rustc version
          command: |
            rustup default stable
            rustup update stable
  print_versions:
    description: Version Info
    steps:
      - run:
          name: Version Info
          command: rustc --version; cargo --version; rustup --version
  env_setup:
    description: Environment Setup
    steps:
      - run:
          name: Setup Env
          command: |
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NAME=myapp' >> $BASH_ENV
            echo 'export LIBRA_DUMP_LOGS=1' >> $BASH_ENV
            echo 'export CARGO_INCREMENTAL=0' >> $BASH_ENV
            echo 'export CI_TIMEOUT="timeout 40m"' >> $BASH_ENV
  install_deps:
    steps:
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y cmake curl clang llvm
            rustup component add clippy rustfmt
  install_code_coverage_deps:
    steps:
      - run:
          name: Install grcov and lcov
          command: |
            sudo apt-get update
            sudo apt-get install lcov
            cargo install --force grcov
  install_docker_linter:
    steps:
      - run:
          name: install dockerfile linter (hadolint)
          command: |
             export HADOLINT=${HOME}/hadolint
             export HADOLINT_VER=v1.17.4
             curl -sL -o ${HADOLINT} "https://github.com/hadolint/hadolint/releases/download/${HADOLINT_VER}/hadolint-$(uname -s)-$(uname -m)" && chmod 700 ${HADOLINT}
  install_rust_nightly_toolchain:
    steps:
      - run:
          name: Install nightly toolchain for features not in beta/stable
          command: rustup install nightly
  find_dockerfile_changes:
    steps:
      - run:
          name: Get the list of updated docker files
          command: |
            echo 'export CHANGED_DOCKER_FILES=$(
              for commit in $(git rev-list origin/master..HEAD) ; do
                git diff-tree --no-commit-id --name-only -r "$commit" -- "*Dockerfile";
              done
            )' >> $BASH_ENV
  save_cargo_package_cache:
    description: Save cargo package cache for subsequent jobs
    steps:
      - save_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}
          # paths are relative to /home/circleci/project/
          paths:
            - ../../../usr/local/cargo/git
            - ../../../usr/local/cargo/registry
            - ../../../usr/local/cargo/.package-cache
  restore_cargo_package_cache:
    description: Restore Cargo package cache from prev job
    steps:
      - restore_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}
      - run:
          name: Check cargo package cache
          command: |
            ls -all /usr/local/cargo
            du -ssh /usr/local/cargo
  build_setup:
    steps:
      - checkout
      - rust_setup
      - print_versions
      - env_setup
      - install_deps
  build_teardown:
    steps:
      - run:
          name: Check for changed and untracked files
          command: ./scripts/changed-files.sh

jobs:
  prefetch-crates:
    executor: test-executor
    description: Prefetch cargo crates for subsequent jobs.
    steps:
      - build_setup
      - run:
          name: Git Hooks and Checks
          command: ./scripts/git-checks.sh
      - restore_cargo_package_cache
      - run:
          name: Fetch workspace dependencies over network
          command: cargo fetch
      - save_cargo_package_cache
  lint:
    executor: test-executor
    description: Run Rust linting tools.
    steps:
      - build_setup
      - run:
          name: Git Hooks and Checks
          command: ./scripts/git-checks.sh
      - restore_cargo_package_cache
      - run:
          name: cargo lint
          command: cargo x lint
      - run:
          name: cargo clippy
          command: cargo xclippy --workspace --all-targets
      - run:
          name: cargo fmt
          command: cargo xfmt --check
      - run:
          name: cargo guppy
          command: |
            cargo install cargo-guppy \
              --git http://github.com/calibra/cargo-guppy \
              --rev 8b2bc45c0cd6323a7a2b8170ddad6d2a5b79047b
            [[ -z $(cargo guppy dups --target x86_64-unknown-linux-gnu \
              --kind directthirdparty) ]]
  build-dev:
    executor: build-executor
    description: Development Build
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          command: RUST_BACKTRACE=1 cargo build -j 16
      - run:
          command: RUST_BACKTRACE=1 cargo build -j 16 -p libra-swarm
      - run:
          command: RUST_BACKTRACE=1 cargo build -j 16 -p cluster-test
      - run:
          command: RUST_BACKTRACE=1 cargo build -j 16 -p libra-fuzzer
      - run:
          command: RUST_BACKTRACE=1 cargo build -j 16 -p language_benchmarks
      - run:
          command: RUST_BACKTRACE=1 cargo build -j 16 -p test-generation
      - build_teardown
  build-release:
    executor: build-executor
    description: Release Build
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Build release
          command: RUST_BACKTRACE=1 cargo build -j 16 --release
      - build_teardown
  build-e2e-test:
    executor: build-executor
    description: Generate a list of E2E test targets to be distributed.
    steps:
      - build_setup
      - attach_workspace:
          at: /home/circleci/project
      - restore_cargo_package_cache
      - run:
          name: Find all e2e tests
          command: |
            cargo x test --package testsuite -- --list | grep "::" | \
              sed 's/: .*$//' > e2e_tests
            cat e2e_tests
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - e2e_tests
            - target/debug/deps/libratest*
  run-e2e-test:
    executor: build-executor
    parallelism: 8
    description: Run E2E tests in parallel. Each container runs a subset of
      test targets.
    steps:
      - build_setup
      - restore_cargo_package_cache
      - attach_workspace:
          at: /home/circleci/project
      - run:
          name: Determine test targets for this container.
          # NOTE Currently the tests are distributed by name order. Once test
          # metadata is enabled, the tests can be distributed by run time to
          # speed up this job.
          command: |
            ls -all target/debug/*
            echo -e "Found $(wc -l e2e_tests) tests."
            cat e2e_tests | circleci tests split > /tmp/tests_to_run
            echo -e "This runner will run these tests\n$(cat /tmp/tests_to_run)"
      - run:
          name: Run E2E tests
          command: |
            set -x
            libratest=$(find target/debug/deps/ -name "libratest*" -executable)
            for target in $(cat /tmp/tests_to_run) ; do
              if [ ! -z "$libratest" ]; then
                RUST_BACKTRACE=1 $CI_TIMEOUT $libratest $target \
                  --test-threads 1 --exact --nocapture
              else
                RUST_BACKTRACE=1 $CI_TIMEOUT cargo x test $target \
                  --package testsuite -- --test-threads 1 --exact --nocapture
              fi
            done
  run-unit-test:
    executor: build-executor
    description: Run all unit tests, excluding E2E and flaky tests that are
      explicitly ignored.
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Run all unit tests
          command: |
            RUST_BACKTRACE=1 $CI_TIMEOUT cargo x test --unit
  run-crypto-unit-test:
    executor: test-executor
    description: Run crypto unit tests
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Run crypto unit tests
          command: |
            cd crypto/crypto && \
            RUST_BACKTRACE=1 cargo test \
              --features='std fiat_u64_backend fuzzing' \
              --no-default-features
  run-flaky-unit-test:
    executor: test-executor
    description: Run a list of known flaky tests.
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Run flaky tests
          command: |
            RUST_BACKTRACE=1 $CI_TIMEOUT \
            ./scripts/run_quarantined.sh -c <your package here> -r 3 -f
  validate-cluster-test-dockerfile:
    description: Validate that committed docker files for cluster test are up to date
    executor: build-executor
    steps:
      - build_setup
      - run:
          # generate dockerfile; diff config to existing one
          name: Validate cluster-test dockerfiles
          command: ./docker/cluster-test/generate.sh
      - build_teardown
  audit:
    executor: audit-executor
    steps:
      - build_setup
      - run:
          name: Install Cargo Audit
          command: |
            cargo install --force cargo-audit
      - run:
          # NOTE ignored advisory rules
          # RUSTSEC-2018-0015 - term
          # RUSTSEC-2019-0031 - spin
          name: Audit crates
          command: |
            cargo audit --deny-warnings \
              --ignore RUSTSEC-2018-0015 \
              --ignore RUSTSEC-2019-0031
      - build_teardown
  code-coverage:
    description: Run code coverage
    executor: build-executor
    steps:
      - build_setup
      - install_code_coverage_deps
      - install_rust_nightly_toolchain
      - run:
          name: Setup code coverage output
          command: echo "export CODECOV_OUTPUT=codecov" >> $BASH_ENV
      - run:
          name: Run code coverage
          command: ./scripts/coverage_report.sh . $CODECOV_OUTPUT --batch
      - run:
          name: Upload result to codecov.io
          command: bash <(curl -s https://codecov.io/bash) -f $CODECOV_OUTPUT/lcov.info;
  terraform:
    executor: terraform-executor
    steps:
      - checkout
      - run:
          name: Terraform init
          command: terraform init
          working_directory: terraform/
      - run:
          name: Terraform validate
          command: terraform validate
          working_directory: terraform/
  build-docker:
    machine:
      image: ubuntu-1604:201903-01
    resource_class: large
    steps:
      - checkout
      - run:
          name: Check if the docker build job should run
          command: .circleci/should_build_docker.sh
      - install_docker_linter
      - find_dockerfile_changes
      - run:
          name: Lint DockerFile changes
          command: |
            export HADOLINT=${HOME}/hadolint
            ${HADOLINT} -c .lintrules/hadolint.yaml $CHANGED_DOCKER_FILES || true
      - run:
          name: Build each of the updated docker files
          command: |
            # Use the dockerfile own build.sh script if it has one.
            for docker_file in $CHANGED_DOCKER_FILES; do
              echo "Checking $docker_file"
              build_script=$(dirname $docker_file)/build.sh
              if [ -f "$build_script" ]; then
                $build_script
              elif [ -f "$docker_file" ]; then
                file_no_ext=$(basename $docker_file)
                module=${file_no_ext%.Dockerfile}
                docker build -f $docker_file --tag commit_verify_${CIRCLE_BUILD_NUM}_$module .
              else
                echo "$docker_file is renamed or removed in pull request."
              fi
            done

workflows:
  commit-workflow:
    jobs:
      - build-docker
      - validate-cluster-test-dockerfile
      - terraform
      - prefetch-crates
      - lint:
          requires:
            - prefetch-crates
      - build-dev:
          requires:
            - prefetch-crates
      - build-release:
          requires:
            - prefetch-crates
      - build-e2e-test:
          requires:
            - prefetch-crates
      - run-e2e-test:
          requires:
            - build-e2e-test
      - run-unit-test:
          requires:
            - prefetch-crates
      - run-crypto-unit-test:
          requires:
            - prefetch-crates
      #- run-flaky-unit-test:
      #    requires:
      #      - prefetch-crates

  scheduled-workflow:
    triggers:
      - schedule:
          cron: "14 14 * * *"
          filters:
            branches:
              only: master
    jobs:
      - audit
      - code-coverage
