version: 2.1

executors:
  build-executor:
    docker:
      - image: circleci/rust:stretch
    resource_class: 2xlarge
  audit-executor:
    docker:
      - image: circleci/rust:stretch
    resource_class: xlarge
  terraform-executor:
    docker:
      - image: hashicorp/terraform
    resource_class: small

commands:
  rust_setup:
    description: Set rustc version
    steps:
      - run:
          name: Set rustc version
          command: |
            rustup toolchain install beta-2019-10-03
            rustup override set beta-2019-10-03
  print_versions:
    description: Version Info
    steps:
      - run:
          name: Version Info
          command: rustc --version; cargo --version; rustup --version
  env_setup:
    description: Environment Setup
    steps:
      - run:
          name: Setup Env
          command: |
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NAME=myapp' >> $BASH_ENV
            echo 'export LIBRA_DUMP_LOGS=1' >> $BASH_ENV
            echo 'export CARGO_INCREMENTAL=0' >> $BASH_ENV
  install_deps:
    steps:
      - run:
          name: Install Dependencies
          command: |
            sudo sh -c 'echo "deb http://deb.debian.org/debian stretch-backports main" > /etc/apt/sources.list.d/backports.list'
            sudo apt-get update
            sudo apt-get install -y protobuf-compiler/stretch-backports cmake curl
            sudo apt-get clean
            sudo rm -r /var/lib/apt/lists/*
            rustup component add clippy rustfmt
  build_setup:
    steps:
      - checkout
      - rust_setup
      - print_versions
      - env_setup
      - install_deps
  build_teardown:
    steps:
      - run:
          name: Check for changed and untracked files
          command: ./scripts/changed-files.sh

jobs:
  build:
    executor: build-executor
    parallelism: 4
    steps:
      - build_setup
      - run:
          name: Git Hooks and Checks
          command: ./scripts/git-checks.sh
      - run:
          name: Linting
          command: |
            [[ $CIRCLE_NODE_INDEX =~ [123] ]] || cargo x lint
            [[ $CIRCLE_NODE_INDEX =~ [123] ]] || cargo xclippy --workspace --all-targets
            [[ $CIRCLE_NODE_INDEX =~ [123] ]] || cargo fmt -- --check
      - run:
          name: Build Release
          command: |
            [[ $CIRCLE_NODE_INDEX =~ [023] ]] || RUST_BACKTRACE=1 cargo build -j 16 --release
      - run:
          name: Build Dev
          command: |
            [[ $CIRCLE_NODE_INDEX =~ [012] ]] || RUST_BACKTRACE=1 cargo build -j 16
            [[ $CIRCLE_NODE_INDEX =~ [012] ]] || RUST_BACKTRACE=1 cargo build -j 16 -p benchmark
            [[ $CIRCLE_NODE_INDEX =~ [012] ]] || RUST_BACKTRACE=1 cargo build -j 16 -p libra-swarm
            [[ $CIRCLE_NODE_INDEX =~ [012] ]] || RUST_BACKTRACE=1 cargo build -j 16 -p cluster-test
            [[ $CIRCLE_NODE_INDEX =~ [012] ]] || RUST_BACKTRACE=1 cargo build -j 16 -p libra-fuzzer
            [[ $CIRCLE_NODE_INDEX =~ [012] ]] || RUST_BACKTRACE=1 cargo build -j 16 -p language_benchmarks
            [[ $CIRCLE_NODE_INDEX =~ [012] ]] || RUST_BACKTRACE=1 cargo build -j 16 -p bytecode-to-boogie
            [[ $CIRCLE_NODE_INDEX =~ [012] ]] || RUST_BACKTRACE=1 cargo build -j 16 -p cost-synthesis
            [[ $CIRCLE_NODE_INDEX =~ [012] ]] || RUST_BACKTRACE=1 cargo build -j 16 -p test-generation
      - run:
          name: Run All Unit Tests
          command: |
            [[ $CIRCLE_NODE_INDEX =~ [013] ]] || RUST_BACKTRACE=1 cargo x test --unit
      - run:
          name: Run Cryptography Unit Tests with the formally verified backend
          command: |
            [[ $CIRCLE_NODE_INDEX =~ [013] ]] || ( RUST_BACKTRACE=1 cd crypto/crypto && cargo test --features='std fiat_u64_backend fuzzing' --no-default-features )
      - run:
          name: Run All End to End Tests
          command: |
            [[ $CIRCLE_NODE_INDEX =~ [012] ]] || RUST_BACKTRACE=1 cargo x test --package testsuite -- --test-threads 1
      - build_teardown
  validate-config:
    description: Validate that committed docker configs are up to date
    executor: build-executor
    steps:
      - build_setup
      - run:
          # generate config; diff config to existing one
          name: Validate Validator-Sets Configs
          command: ./scripts/circle_validate_configs.sh
      - build_teardown
  audit:
    executor: audit-executor
    steps:
      - build_setup
      - run:
          name: Cargo Audit
          command: |
            cargo install --force cargo-audit
            cargo audit
      - build_teardown
  terraform:
    executor: terraform-executor
    steps:
      - checkout
      - run:
          name: Terraform init
          command: terraform init
          working_directory: terraform/
      - run:
          name: Terraform validate
          command: terraform validate
          working_directory: terraform/

workflows:
  commit-workflow:
    jobs:
      - build
      - validate-config
      - terraform

  scheduled-workflow:
    triggers:
      - schedule:
          cron: "14 14 * * *"
          filters:
            branches:
              only: master
    jobs:
      - audit
