// Number of validators doesn't evenly divide the transaction fees collected

//! account: vivian, 1000000, 0, validator
//! account: valentina, 1000000, 0, validator
//! sender: vivian

import 0x0.LibraSystem;
import 0x0.LibraAccount;
import 0x0.LibraCoin;
import 0x0.Vector;

main() {
  let lib_coin: LibraCoin.T;
  let number_of_validators: u64;
  let index: u64;
  let addr: address;
  let balances: Vector.T<u64>;
  let old_balance: u64;
  let new_balance: u64;

  index = 0;
  balances = Vector.empty<u64>();

  number_of_validators = LibraSystem.validator_set_size();
  // Withdraw now so that the new account balance for {{vivian}}'s account is recorded in the
  // balances vector. Withdraw a number that does not evenly divide the number of validators, this
  // also means that we need more than 1 validator in the validator set.
  assert(copy(number_of_validators) > 1, 0);
  lib_coin = LibraAccount.withdraw_from_sender(copy(number_of_validators) * 10 + 1);

  // Make the distribution check agnostic to the starting balances of the validators
  while (copy(index) < copy(number_of_validators)) {
      addr = LibraSystem.get_ith_validator_address(copy(index));
      index = move(index) + 1;
      Vector.push_back<u64>(
          &mut balances,
          LibraAccount.balance(move(addr))
      );
  }

  index = 0;

  LibraAccount.deposit({{fees}} , move(lib_coin));
  LibraSystem.block_prologue(1, h"aa", h"bb", {{vivian}});

  while (copy(index) < copy(number_of_validators)) {
     addr = LibraSystem.get_ith_validator_address(copy(index));
     new_balance = LibraAccount.balance(move(addr));
     old_balance = Vector.get<u64>(&balances, copy(index));
     index = move(index) + 1;
     assert(move(new_balance) == (move(old_balance) + 10), 1);
  }

  // The remainder in 0xFEE's balance must be less than the number of validators.
  assert(LibraAccount.balance({{fees}}) < move(number_of_validators), 2);
  // And in this particular case, must be exactly equal to 1.
  assert(LibraAccount.balance({{fees}}) == 1, 3);

  return;
}
