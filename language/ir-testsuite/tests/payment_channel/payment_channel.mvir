module PaymentChannel {
    import 0x1.Signature;
    import 0x1.LBR;
    import 0x1.LCS;
    import 0x1.Libra;
    import 0x1.LibraAccount;
    import 0x1.Signer;
    import 0x1.Vector;

    // This is the PaymentChannel resource
    // It keeps track of the balances for funder and counterparty
    //
    resource T {
        funder_capacity: Libra.Libra<LBR.LBR>,
        counterparty_capacity: Libra.Libra<LBR.LBR>,
        seq_id: u64,
        funder_pk: vector<u8>,
        counterparty_pk: vector<u8>,
        funder_addr: address,
    }

    counterparty_balance(this: &Self.T): u64 {
        let counterparty_balance: u64;
        let counterparty_capacity_ref: &Libra.Libra<LBR.LBR>;
        counterparty_capacity_ref = &move(this).counterparty_capacity;
        counterparty_balance = Libra.value<LBR.LBR>(move(counterparty_capacity_ref));
        return move(counterparty_balance);
    }

    funder_balance(this: &Self.T): u64 {
        let funder_balance: u64;
        let funder_capacity_ref: &Libra.Libra<LBR.LBR>;
        funder_capacity_ref = &move(this).funder_capacity;
        funder_balance = Libra.value<LBR.LBR>(move(funder_capacity_ref));
        return move(funder_balance);
    }

    seq_id(this: &Self.T): u64 {
        let seq_id: u64;
        seq_id = *&move(this).seq_id;
        return move(seq_id);
    }

    funder_pk(this: &Self.T): vector<u8> {
        let funder_pk: vector<u8>;
        funder_pk = *&move(this).funder_pk;
        return move(funder_pk);
    }

    counterparty_pk(this: &Self.T): vector<u8> {
        let counterparty_pk: vector<u8>;
        counterparty_pk = *&move(this).counterparty_pk;
        return move(counterparty_pk);
    }

    funder_addr(this: &Self.T): address {
        let funder: address;
        funder = *&move(this).funder_addr;
        return move(funder);
    }

    public new_payment_channel(account: &signer, funding: Libra.Libra<LBR.LBR>, funder_pk: vector<u8>, counterparty_pk: vector<u8>): Self.T {
	let sender: address;
        let counterparty_capacity: Libra.Libra<LBR.LBR>;
	sender = Signer.address_of(move(account));
        counterparty_capacity = Libra.zero<LBR.LBR>();

        return T{
            funder_capacity: move(funding),
            counterparty_capacity: move(counterparty_capacity),
            seq_id: 0,
            funder_pk: move(funder_pk),
            counterparty_pk: move(counterparty_pk),
	    funder_addr: move(sender),
        };
    }

   ver(this: &Self.T, amt_to_transfer: u64, new_seq_id: u64, public_key: vector<u8>, signature: vector<u8>): bool {
        let seq_id: u64;
        let ver: bool;
        let message: vector<u8>;
	    let amt_to_transfer_bytes: vector<u8>;
	    let new_seq_id_bytes: vector<u8>;

        seq_id = Self.seq_id(move(this));

        if (copy(seq_id) >= copy(new_seq_id)) {
            return false;
	}

        amt_to_transfer_bytes = LCS.to_bytes<u64>(&amt_to_transfer);
        new_seq_id_bytes = LCS.to_bytes<u64>(&new_seq_id);

        message = move(amt_to_transfer_bytes);
        Vector.append<u8>(&mut message, move(new_seq_id_bytes));
        ver = Signature.ed25519_verify(move(signature), move(public_key), move(message));
        return move(ver);
    }

    public update(this: &mut Self.T, amt_to_transfer: u64, new_seq_id: u64, funder_signature: vector<u8>, counterparty_signature: vector<u8>) {
        let ver_funder: bool;
        let ver_counterparty: bool;
        let ref: &Self.T;
        let transfer_amt: Libra.Libra<LBR.LBR>;
        let funder_pk: vector<u8>;
        let counterparty_pk: vector<u8>;

        ref = freeze(copy(this));

        funder_pk = Self.funder_pk(copy(ref));
        counterparty_pk = Self.counterparty_pk(copy(ref));

        ver_funder = Self.ver(copy(ref), copy(amt_to_transfer), copy(new_seq_id), move(funder_pk), move(funder_signature));
        ver_counterparty = Self.ver(move(ref), copy(amt_to_transfer), copy(new_seq_id), move(counterparty_pk), move(counterparty_signature));

        assert(move(ver_funder) == true, 42);
        assert(move(ver_counterparty) == true, 42);

        transfer_amt = Libra.withdraw<LBR.LBR>(&mut copy(this).funder_capacity, copy(amt_to_transfer));
        Libra.deposit<LBR.LBR>(&mut copy(this).counterparty_capacity, move(transfer_amt));

        *(&mut move(this).seq_id) = move(new_seq_id);

        return;
    }

    public close(counterparty: &signer, account: &signer, this: &mut Self.T, amt_to_transfer: u64, new_seq_id: u64, funder_signature: vector<u8>, counterparty_signature: vector<u8>) {
        let funder_addr: address;
        let counterparty_addr: address;

        let funder_capacity_ref: &mut Libra.Libra<LBR.LBR>;
        let counterparty_capacity_ref: &mut Libra.Libra<LBR.LBR>;

        let funder_balance: u64;
        let counterparty_balance: u64;

        let funder_to_withdraw: Libra.Libra<LBR.LBR>;
        let counterparty_to_withdraw: Libra.Libra<LBR.LBR>;

        let ref: &Self.T;

        Self.update(copy(this), move(amt_to_transfer), move(new_seq_id), move(funder_signature), move(counterparty_signature));

        ref = freeze(copy(this));

        counterparty_addr = Signer.address_of(move(counterparty));
        counterparty_balance = Self.counterparty_balance(move(ref));

        counterparty_capacity_ref = &mut copy(this).counterparty_capacity;
        counterparty_to_withdraw = Libra.withdraw<LBR.LBR>(move(counterparty_capacity_ref), move(counterparty_balance));
        LibraAccount.deposit<LBR.LBR>(copy(account), move(counterparty_addr), move(counterparty_to_withdraw));

        ref = freeze(copy(this));

        funder_addr = Self.funder_addr(copy(ref));
        funder_balance = Self.counterparty_balance(move(ref));

        funder_capacity_ref = &mut move(this).funder_capacity;
        funder_to_withdraw = Libra.withdraw<LBR.LBR>(move(funder_capacity_ref), move(funder_balance));
        LibraAccount.deposit<LBR.LBR>(copy(account), move(funder_addr), move(funder_to_withdraw));

        return;
    }
}

//! new-transaction
import {{default}}.PaymentChannel;

main() {
    return;
}
