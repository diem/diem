module PaymentChannel {
    import 0x0.Signature;
    import 0x0.LBR;
    import 0x0.LCS;
    import 0x0.Libra;
    import 0x0.LibraAccount;
    import 0x0.Hash;
    import 0x0.Vector;

    // This is the PaymentChannel resource.
    // It keeps track of the balances for funder and counterparty,
    // as well as the public keys used for the 2-of-2 multi-sig.
    // Note that the funder address needs to be locked-in at the
    // resource-level because when the counterparty closes the channel,
    // the funder_capacity has to be paid back to the funder.
    // Note further that the funder_addr is known on-chain as the funder
    // instantiated the payment channel resource.
    resource T {
        funder_capacity: Libra.T<LBR.T>,
        counterparty_capacity: Libra.T<LBR.T>,
        seq_id: u64,
        funder_pk: vector<u8>,
        counterparty_pk: vector<u8>,
        funder_addr: address,
    }

    // Getter for the balance of the counterparty_capacity resource value
    counterparty_balance(this: &Self.T): u64 {
        let counterparty_balance: u64;
        let counterparty_capacity_ref: &Libra.T<LBR.T>;
        counterparty_capacity_ref = &move(this).counterparty_capacity;
        counterparty_balance = Libra.value<LBR.T>(move(counterparty_capacity_ref));
        return move(counterparty_balance);
    }

    // Getter for the balance of the funder_capacity resource value
    funder_balance(this: &Self.T): u64 {
        let funder_balance: u64;
        let funder_capacity_ref: &Libra.T<LBR.T>;
        funder_capacity_ref = &move(this).funder_capacity;
        funder_balance = Libra.value<LBR.T>(move(funder_capacity_ref));
        return move(funder_balance);
    }

    // Getter for the sequence id of the on-chain state of the payment channel
    seq_id(this: &Self.T): u64 {
        let seq_id: u64;
        seq_id = *&move(this).seq_id;
        return move(seq_id);
    }

    // Getter for the public key of the funder
    funder_pk(this: &Self.T): vector<u8> {
        let funder_pk: vector<u8>;
        funder_pk = *&move(this).funder_pk;
        return move(funder_pk);
    }

    // Getter for the public key of the counterparty
    counterparty_pk(this: &Self.T): vector<u8> {
        let counterparty_pk: vector<u8>;
        counterparty_pk = *&move(this).counterparty_pk;
        return move(counterparty_pk);
    }

    // Getter for the address of the funder
    // Note that this construction does not require to lock-in the counterparty address
    funder_addr(this: &Self.T): address {
        let funder: address;
        funder = *&move(this).funder_addr;
        return move(funder);
    }

    // Constructor for the new payment channel
    // Due to the lack of a time API in the Move VM, this payment channel is forced to be
    // uni-directional. Therefore, only the funder is funding the channel.
    public new_payment_channel(funding: Libra.T<LBR.T>, funder_pk: vector<u8>, counterparty_pk: vector<u8>): Self.T {
	let sender: address;
        let counterparty_capacity: Libra.T<LBR.T>;
	sender = get_txn_sender();
        counterparty_capacity = Libra.zero<LBR.T>();

        return T{
            funder_capacity: move(funding),
            counterparty_capacity: move(counterparty_capacity),
            seq_id: 0,
            funder_pk: move(funder_pk),
            counterparty_pk: move(counterparty_pk),
	    funder_addr: move(sender),
        };
    }

   // Private verify function that verifies the signature on a particular message
   //
   // The message is constructed as follows
   //
   // message = [ amt_to_transfer || new_seq_id || Hash(preimage) || commit_address ]
   //
   // EXAMPLE
   //
   // The inclusion of Hash(preimage) ensures that multi-hop payments are possible, i.e.
   //                              Alice -> Bob -> Charlie
   // If Alice wants to pay Charlie, she needs to send an update transaction to Bob and
   // there needs to be some assurance that Bob can only claim this update if and only if
   // he forwards the same amount to Charlie via an update on the Bob -> Charlie channel.
   // Therefore, Charlie generates some <preimage> and hashes it to arrive at Hash(<preimage>).
   // Alice then gives Bob a signature on [ Alice_Bob_update_amt || Alice_Bob_seq_id+1 || Hash(<preimage>) || bob_s_address ]
   // Bob now gives Charlie a signature on [ Bob_Charlie_update_amt || Bob_Charlie_seq_id+1 || Hash(<preimage>) || charlie_s_address ]
   // When Charlie closes his channel, he has to reveal <preimage>, which allows Bob to close his channel with Alice.
   // NOTE: There is an additional need to force that Charlie has to close his channel before Bob closes his, therefore it is important
   //       that the signed messages also include an expiration time and that Charlie's expiration is less than Bob's.
   //       Since we do not have a concept of time yet, I simply left this out.
   //
   // OVERVIEW
   //
   // The verify function performs the following checks
   //       A. Verifies that the new_seq_id > Self.seq_id
   //       B. Constructs the message by hashing the preimage
   //
   // NOTE:
   //       The message commits to both the counterparty address and the hash of the preimage
   //       but the counterparty address can change on every off-chain update.
   //       In general, the counterparty would always use the same commit_address,
   //       but in general needn't do so.
   ver(this: &Self.T, amt_to_transfer: u64, new_seq_id: u64, public_key: vector<u8>, signature: vector<u8>, commit_address: address, preimage: vector<u8>): bool {
        let seq_id: u64;
        let ver: bool;
        let message: vector<u8>;
	    let amt_to_transfer_bytes: vector<u8>;
        let commit_to_bytes: vector<u8>;
	    let new_seq_id_bytes: vector<u8>;
        let hash: vector<u8>;

        seq_id = Self.seq_id(move(this));

        if (copy(seq_id) >= copy(new_seq_id)) {
            return false;
	}

        amt_to_transfer_bytes = LCS.to_bytes<u64>(&amt_to_transfer);
        new_seq_id_bytes = LCS.to_bytes<u64>(&new_seq_id);
        commit_to_bytes = LCS.to_bytes<address>(&commit_address);

        hash = Hash.sha3_256(move(preimage));

        message = move(amt_to_transfer_bytes);
        Vector.append<u8>(&mut message, move(new_seq_id_bytes));
        Vector.append<u8>(&mut message, move(hash));
        Vector.append<u8>(&mut message, move(commit_to_bytes));
        ver = Signature.ed25519_verify(move(signature), move(public_key), move(message));
        return move(ver);
    }

    // Public on-chain update function that allows to update the internal state of the payment channel.
    // This function is called by the `close` method before withdrawing the funds in order to update the
    // on-chain state of the contract before moving the Libra resources to their respective parties.
    public update(this: &mut Self.T, amt_to_transfer: u64, new_seq_id: u64, funder_signature: vector<u8>, counterparty_signature: vector<u8>, preimage: vector<u8>) {
        let sender: address;
        let ver_funder: bool;
        let ver_counterparty: bool;
        let ref: &Self.T;
        let transfer_amt: Libra.T<LBR.T>;
        let funder_pk: vector<u8>;
        let counterparty_pk: vector<u8>;

        ref = freeze(copy(this));
        sender = get_txn_sender();

        funder_pk = Self.funder_pk(copy(ref));
        counterparty_pk = Self.counterparty_pk(copy(ref));

        ver_funder = Self.ver(copy(ref), copy(amt_to_transfer), copy(new_seq_id), move(funder_pk), move(funder_signature), copy(sender), copy(preimage));
        ver_counterparty = Self.ver(move(ref), copy(amt_to_transfer), copy(new_seq_id), move(counterparty_pk), move(counterparty_signature), copy(sender), move(preimage));

        assert(move(ver_funder) == true, 42);
        assert(move(ver_counterparty) == true, 42);

        transfer_amt = Libra.withdraw<LBR.T>(&mut copy(this).funder_capacity, copy(amt_to_transfer));
        Libra.deposit<LBR.T>(&mut copy(this).counterparty_capacity, move(transfer_amt));

        *(&mut move(this).seq_id) = move(new_seq_id);

        return;
    }

    // Public method for closing the channel. Invokes the update method and then pays out the Libra to each party
    public close(this: &mut Self.T, amt_to_transfer: u64, new_seq_id: u64, funder_signature: vector<u8>, counterparty_signature: vector<u8>, preimage: vector<u8>) {
        let funder_addr: address;
        let counterparty_addr: address;

        let funder_capacity_ref: &mut Libra.T<LBR.T>;
        let counterparty_capacity_ref: &mut Libra.T<LBR.T>;

        let funder_balance: u64;
        let counterparty_balance: u64;

        let funder_to_withdraw: Libra.T<LBR.T>;
        let counterparty_to_withdraw: Libra.T<LBR.T>;

        let ref: &Self.T;

        Self.update(copy(this), move(amt_to_transfer), move(new_seq_id), move(funder_signature), move(counterparty_signature), move(preimage));

        ref = freeze(copy(this));

        counterparty_addr = get_txn_sender();
        counterparty_balance = Self.counterparty_balance(move(ref));

        counterparty_capacity_ref = &mut copy(this).counterparty_capacity;
        counterparty_to_withdraw = Libra.withdraw<LBR.T>(move(counterparty_capacity_ref), move(counterparty_balance));
        LibraAccount.deposit<LBR.T>(move(counterparty_addr), move(counterparty_to_withdraw));

        ref = freeze(copy(this));

        funder_addr = Self.funder_addr(copy(ref));
        funder_balance = Self.counterparty_balance(move(ref));

        funder_capacity_ref = &mut move(this).funder_capacity;
        funder_to_withdraw = Libra.withdraw<LBR.T>(move(funder_capacity_ref), move(funder_balance));
        LibraAccount.deposit<LBR.T>(move(funder_addr), move(funder_to_withdraw));

        return;
    }
}

//! new-transaction
import {{default}}.PaymentChannel;

main() {
    return;
}
