//! account: alice
//! account: bob
//! account: carl

// Just a dummy module with a test resource
module M {
    resource T { b: bool }

    public create(): Self.T {
        return T { b: true };
    }

    public publish(account: &signer, t: Self.T) {
        move_to<T>(move(account),  move(t));
        return;
    }
}

//! new-transaction
//! sender: alice
import {{default}}.M;
import 0x1.Offer;
import 0x1.Signer;

// Alice creates an offer for Bob that contains an M.T resource
main(account: &signer) {
    let sender: address;
    sender = Signer.address_of(copy(account));
    Offer.create<M.T>(
        move(account),
        M.create(),
        {{bob}}
    );

    assert(Offer.exists_at<M.T>(copy(sender)), 77);
    assert(Offer.address_of<M.T>(copy(sender)) == {{bob}} , 78);
    return;
}

//! new-transaction
//! sender: carl
import {{default}}.M;
import 0x1.Offer;

// Carl should *not* be able to claim Alice's offer for Bob
main(account: &signer) {
    M.publish(copy(account), Offer.redeem<M.T>(copy(account), {{alice}}));

    return;
}

// check: "Keep(ABORTED { code: 7,"

//! new-transaction
//! sender: bob
import {{default}}.M;
import 0x1.Offer;

// Bob should be able to claim Alice's offer for him
main(account: &signer) {
    let redeemed: M.T;
    // claimed successfully
    redeemed = Offer.redeem<M.T>(copy(account), {{alice}});

    // offer should not longer exist
    assert(!Offer.exists_at<M.T>({{alice}}), 79);

    // create a new offer for Carl
    Offer.create<M.T>(move(account), move(redeemed), {{carl}});
    return;
}

//! new-transaction
//! sender: bob
import {{default}}.M;
import 0x1.Offer;

// Bob should be able to reclaim his own offer for Carl
main(account: &signer) {
    M.publish(copy(account), Offer.redeem<M.T>(copy(account), {{bob}}));
    return;
}
