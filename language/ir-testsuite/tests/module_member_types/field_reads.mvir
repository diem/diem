module VTest {
    struct T{fint: u64, fv: bool}

    public new(x: u64, y: bool): Self.T {
        return T{fint: move(x), fv: move(y)};
    }

    public t1(this: &Self.T): u64 {
        let x: &u64;
        x = &copy(this).fint;
        _ = move(this);
        return *move(x);
    }

    public t2(this: &Self.T): u64 {
        let x: &u64;
        x = &copy(this).fint;
        _ = move(this);
        return *move(x);
    }

    public t3(this: &Self.T): bool {
        let x: &bool;
        x = &copy(this).fv;
        _ = move(this);
        return *move(x);
    }
}

//! new-transaction

module RTest {
    resource T{fint: u64, fv: bool}

    public new(x: u64, y: bool): Self.T {
        return T{fint: move(x), fv: move(y)};
    }

    public t1(this: &Self.T): u64 {
        let x: &u64;
        x = &copy(this).fint;
        _ = move(this);
        return *move(x);
    }

    public t2(this: &Self.T): u64 {
        let x: &u64;
        x = &copy(this).fint;
        _ = move(this);
        return *move(x);
    }

    public t3(this: &Self.T): bool {
        let x: &bool;
        x = &copy(this).fv;
        _ = move(this);
        return *move(x);
    }

    public destroy_t(t: Self.T) {
        let fint: u64;
        let fv: bool;
        T{ fint, fv } = move(t);
        return;
    }
}

//! new-transaction

import {{default}}.RTest;
import {{default}}.VTest;

main() {
    let vt: VTest.T;
    let vref: &VTest.T;
    let rt: RTest.T;
    let rref: &RTest.T;
    let r1: u64;
    let r2: u64;
    let r3: u64;
    let r4: u64;
    let r5: bool;
    let r6: bool;

    vt = VTest.new(0, false);
    vref = &vt;
    rt = RTest.new(0, false);
    rref = &rt;

    r1 = VTest.t1(copy(vref));
    r2 = RTest.t1(copy(rref));

    r3 = VTest.t2(copy(vref));
    r4 = RTest.t2(copy(rref));

    r5 = VTest.t3(move(vref));
    r6 = RTest.t3(move(rref));

    RTest.destroy_t(move(rt));

    return;
}
