module M {
    import 0x1.Signer;

    resource R1 { f: bool }
    resource R2<T> { f: T }

    public store(sender: &signer, f: bool) {
        move_to<R1>(copy(sender), R1 { f: move(f) });
        return;
    }

    public store_gen<T>(sender: &signer, t: T) {
        move_to<R2<T>>(copy(sender), R2<T> { f: move(t) });
        return;
    }

    public read(s: &signer): bool acquires R1 {
        return *&(borrow_global<R1>(Signer.address_of(move(s)))).f;
    }

    public read_gen<T: copyable>(s: &signer): T acquires R2 {
        return *&(borrow_global<R2<T>>(Signer.address_of(move(s)))).f;
    }
}

//! new-transaction
import {{default}}.M;
main(sender: &signer) {
    M.store(copy(sender), false);
    assert((M.read(copy(sender)) == false), 42);

    M.store_gen<bool>(copy(sender), true);
    assert((M.read_gen<bool>(copy(sender)) == true), 42);

    M.store_gen<u64>(copy(sender), 112);
    assert((M.read_gen<u64>(copy(sender)) == 112), 42);

    return;
}

//! account: alice, 90000
//! new-transaction
//! sender: alice
import {{default}}.M;
main(sender: &signer) {
    M.store(copy(sender), false);
    M.store_gen<bool>(copy(sender), true);
    M.store_gen<u64>(copy(sender), 112);
    return;
}

//! new-transaction
//! sender: alice
import {{default}}.M;
main(sender: &signer) {
    assert((M.read(copy(sender)) == false), 42);
    assert((M.read_gen<bool>(copy(sender)) == true), 42);
    assert((M.read_gen<u64>(copy(sender)) == 112), 42);
    return;
}
