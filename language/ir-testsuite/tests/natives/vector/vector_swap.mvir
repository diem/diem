import 0x1.Vector;

main() {
  let vec: vector<u64>;
  vec = Vector.empty<u64>();

  // non-empty case
  Vector.push_back<u64>(&mut vec, 0);
  Vector.push_back<u64>(&mut vec, 1);
  Vector.push_back<u64>(&mut vec, 2);
  Vector.push_back<u64>(&mut vec, 3);

  Vector.swap<u64>(&mut vec, 0, 3);
  Vector.swap<u64>(&mut vec, 1, 2);
  assert(*Vector.borrow<u64>(&vec, 0) == 3, 1);
  assert(*Vector.borrow<u64>(&vec, 1) == 2, 2);
  assert(*Vector.borrow<u64>(&vec, 2) == 1, 3);
  assert(*Vector.borrow<u64>(&vec, 3) == 0, 4);

  // Swapping with the same index is identity
  Vector.swap<u64>(&mut vec, 1, 1);
  assert(*Vector.borrow<u64>(&vec, 0) == 3, 1);
  assert(*Vector.borrow<u64>(&vec, 1) == 2, 2);
  assert(*Vector.borrow<u64>(&vec, 2) == 1, 3);
  assert(*Vector.borrow<u64>(&vec, 3) == 0, 4);

  return;
}
