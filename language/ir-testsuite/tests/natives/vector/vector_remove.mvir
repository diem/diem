import 0x1.Vector;

main() {
  let vec: vector<u64>;
  let zero: u64;
  let one: u64;
  let two: u64;
  let three: u64;

  zero = 0;
  one = 1;
  two = 2;
  three = 3;

  vec = Vector.empty<u64>();

  // test on vector of size 1
  Vector.push_back<u64>(&mut vec, copy(zero));
  assert(Vector.remove<u64>(&mut vec, 0) == 0, 70);
  assert(Vector.length<u64>(&vec) == 0, 71);

  // test normal case
  Vector.push_back<u64>(&mut vec, copy(zero));
  Vector.push_back<u64>(&mut vec, copy(one));
  Vector.push_back<u64>(&mut vec, copy(two));
  Vector.push_back<u64>(&mut vec, copy(three));
  assert(Vector.remove<u64>(&mut vec, 1) == 1, 72);
  assert(Vector.length<u64>(&vec) == 3, 73);
  assert(*Vector.borrow<u64>(&vec, 0) == 0, 74);
  assert(*Vector.borrow<u64>(&vec, 1) == 2, 75);
  assert(*Vector.borrow<u64>(&vec, 2) == 3, 76);

  // test remove last element case
  assert(Vector.remove<u64>(&mut vec, 2) == 3, 77);
  assert(Vector.length<u64>(&vec) == 2, 73);
  assert(*Vector.borrow<u64>(&vec, 0) == 0, 74);
  assert(*Vector.borrow<u64>(&vec, 1) == 2, 75);

  return;
}

// check: "Keep(EXECUTED)"

//! new-transaction
import 0x1.Vector;
// remove on empty vector should fail
main() {
  let vec: vector<u64>;

  vec = Vector.empty<u64>();
  _  = Vector.remove<u64>(&mut vec, 0);

  return;
}

// check: "Keep(ABORTED { code: 0,"

//! new-transaction
import 0x1.Vector;
// remove on out-of-bounds index should fail
main() {
  let vec: vector<u64>;

  vec = Vector.empty<u64>();
  Vector.push_back<u64>(&mut vec, 0);
  _ = Vector.remove<u64>(&mut vec, 1);

  return;
}

// check: "Keep(ABORTED { code: 0,"
