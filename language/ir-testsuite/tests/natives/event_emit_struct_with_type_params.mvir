module M {
    import 0x1.Event;

    struct MyEvent<T1, T2> { b: bool }

    public emit_event<T1: copyable, T2: copyable>(account: &signer) {
        let handle: Event.EventHandle<Self.MyEvent<T2, T1>>;
        handle = Event.new_event_handle<Self.MyEvent<T2, T1>>(move(account));
        Event.emit_event<Self.MyEvent<T2, T1>>(&mut handle, MyEvent<T2, T1>{ b: true });
        Event.destroy_handle<Self.MyEvent<T2, T1>>(move(handle));
        return;
    }
}


//! new-transaction
import {{default}}.M;

main(account: &signer) {
    M.emit_event<bool, u64>(move(account));
    return;
}

// check: ContractEvent
// check: M
// check: MyEvent
// check: U64
// check: Bool
// check: "Keep(EXECUTED)"
