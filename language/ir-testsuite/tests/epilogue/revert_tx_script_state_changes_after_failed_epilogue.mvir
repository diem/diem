//! account: alice, 0
//! account: bob, 0
//! account: carol, 0

//! new-transaction
//! sender: blessed
import 0x1.LBR;
import 0x1.LibraAccount;
import 0x1.Libra;
main(blessed: &signer) {
    LibraAccount.deposit<LBR.LBR>(copy(blessed), {{alice}}, LBR.mint(copy(blessed), 1000000));
    LibraAccount.deposit<LBR.LBR>(copy(blessed), {{bob}}, LBR.mint(move(blessed), 1000000));
    return;
}


// Transfer all of the Alice's funds to Carol. this script will execute successfully, but
// the epilogue will fail because Alice spent her gas deposit. The VM should revert the state
// changes and re-execute the epilogue. Alice will still be charged for the gas she used.

//! new-transaction
//! sender: alice
//! gas-price: 1
//! args: 1000000
import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Vector;

main(account: &signer, amount: u64) {
    let with_cap: LibraAccount.WithdrawCapability;
    with_cap = LibraAccount.extract_withdraw_capability(copy(account));
    LibraAccount.pay_from<LBR.LBR>(&with_cap, {{carol}}, move(amount));
    LibraAccount.restore_withdraw_capability(move(with_cap));
    return;
}

// check: ABORTED
// check: 6


// Bob sends the same transaction script, with the amount set to 1000 instead of his full balance.
// This transaction should go through and bob will pay for the gas he used.

//! new-transaction
//! sender: bob
//! gas-price: 1
//! args: 1000
import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Vector;

main(account: &signer, amount: u64) {
    let with_cap: LibraAccount.WithdrawCapability;
    with_cap = LibraAccount.extract_withdraw_capability(copy(account));
    LibraAccount.pay_from<LBR.LBR>(&with_cap, {{carol}}, move(amount));
    LibraAccount.restore_withdraw_capability(move(with_cap));
    return;
}

// check: EXECUTED


// Check that the following invariants holds:
// 1) Carol's balance has went up by 1000, receiving funds from Bob but not Alice.
// 2) Alice's balance is exactly 1000 greater than Bob's, indicating they consumed the same amount of gas.

//! new-transaction
import 0x1.LibraAccount;
import 0x1.LBR;

main() {
    assert(LibraAccount.balance<LBR.LBR>({{carol}}) == 1000, 42);
    assert(LibraAccount.balance<LBR.LBR>({{alice}}) == LibraAccount.balance<LBR.LBR>({{bob}}) + 1000, 43)
    return;
}

// check: EXECUTED
