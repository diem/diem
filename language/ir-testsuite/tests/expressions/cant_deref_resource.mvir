module Token {
    resource T {v: u64}

    public new(v: u64): Self.T {
        return T{v: move(v)};
    }

    public value(this: &Self.T): u64 {
        let vref: &u64;
        let res: u64;
        vref = &move(this).v;
        res = *move(vref);
        return move(res);
    }

    public exists(addr: address): bool {
        let yes: bool;
        yes = exists<T>(move(addr));
        return move(yes);
    }

    public publish(t: Self.T) {
        move_to_sender<T>(move(t));
        return;
    }

    public test() acquires T {
        let addr: address;
        let t: Self.T;
        let tref: &mut Self.T;
        let y: Self.T;

        addr = get_txn_sender();
        t = Self.new(0);
        Self.publish(move(t));
        tref = borrow_global_mut<T>(move(addr));
        y = *move(tref);
        return;
    }
}
// check: READREF_RESOURCE_ERROR
