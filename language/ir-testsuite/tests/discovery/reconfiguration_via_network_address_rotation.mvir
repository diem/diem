//! account: alice
//! account: vivian, 1000000, 0, validator
//! account: viola, 1000000, 0, validator

//! new-transaction
//! sender: alice
import 0x0.ValidatorConfig;
// register Alice as a validator candidate
main() {
    let config: ValidatorConfig.Config;

    ValidatorConfig.register_candidate_validator(h"10", h"20", h"30", h"40", h"50", h"60");
    return;
}
// check: events: []
// check: EXECUTED

//! new-transaction
//! sender: alice
import 0x0.LibraSystem;
import 0x0.ValidatorConfig;
// rotate alice's network address
main() {
    ValidatorConfig.rotate_validator_network_address(h"40");
    return;
}
// check: events: []
// check: EXECUTED

// Run the block prologue. No reconfiguration should be triggered, since alice is
// not a validator
//! block-prologue
//! proposer: vivian
//! block-time: 1000000

// check: events: []
// check: EXECUTED

//! new-transaction
//! sender: vivian
import 0x0.LibraSystem;
// rotate vivian's network address
main() {
    let info: LibraSystem.DiscoveryInfo;
    LibraSystem.rotate_validator_network_address(h"40");
    // check that the discovery set contains Vivian new address with reconfiguration
    info = LibraSystem.get_ith_discovery_info(1);
    assert(*LibraSystem.get_validator_network_address(&info) == h"40", 98);
    return;
}
// not: ValidatorSetChangeEvent
// check: DiscoverySetChangeEvent
// check: EXECUTED

//! block-prologue
//! proposer: vivian
//! block-time: 2000000

//! new-transaction
//! sender: vivian
import 0x0.LibraSystem;
import 0x0.ValidatorConfig;
main() {
    let info: LibraSystem.DiscoveryInfo;
    // check that the discovery set contains Vivian's new address after reconfiguration
    info = LibraSystem.get_ith_discovery_info(1);
    assert(*LibraSystem.get_validator_network_address(&info) == h"40", 99);
    return;
}
// check: events: []
// check: EXECUTED

//! new-transaction
//! sender: vivian
import 0x0.LibraSystem;
// rotate vivian's network address to the same value
main() {
    LibraSystem.rotate_validator_network_address(h"40");
    return;
}
// check: events: []
// check: EXECUTED

// No reconfiguration should be triggered, since the current and previous values
// are equal
//! block-prologue
//! proposer: vivian
//! block-time: 3000000

//! new-transaction
//! sender: viola
import 0x0.LibraSystem;
// rotate viola's network address to a new value
main() {
    LibraSystem.rotate_validator_network_address(h"80");
    return;
}
// not: ValidatorSetChangeEvent
// check: DiscoverySetChangeEvent
// check: EXECUTED

//! new-transaction
//! sender: vivian
import 0x0.LibraSystem;
// rotate vivian's network address to a new value
main() {
    LibraSystem.rotate_validator_network_address(h"90");
    return;
}
// not: ValidatorSetChangeEvent
// check: DiscoverySetChangeEvent
// check: EXECUTED

//! block-prologue
//! proposer: vivian
//! block-time: 4000000

//! new-transaction
//! sender: vivian
import 0x0.LibraSystem;
import 0x0.ValidatorConfig;
// check that both vivian and viola's network address updates are reflected in
// the new discovery set
main() {
    let info: LibraSystem.DiscoveryInfo;

    // check that the discovery set contains Viola's new address
    info = LibraSystem.get_ith_discovery_info(0);
    assert(*LibraSystem.get_discovery_address(&info) == {{viola}}, 14);
    assert(*LibraSystem.get_validator_network_address(&info) == h"80", 15);

    // check that the discovery set contains Vivian's new address
    info = LibraSystem.get_ith_discovery_info(1);
    assert(*LibraSystem.get_discovery_address(&info) == {{vivian}}, 16);
    assert(*LibraSystem.get_validator_network_address(&info) == h"90", 17);

    return;
}
// check: events: []
// check: EXECUTED
