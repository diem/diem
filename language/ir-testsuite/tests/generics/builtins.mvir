module M {
    import 0x1.Signer;

    resource Foo<T> { x: T }

    foo(account: &signer) acquires Foo {
        let sender: address;
        let x: &mut Self.Foo<u64>;
        let y: Self.Foo<u64>;

        sender = Signer.address_of(copy(account));
        x = borrow_global_mut<Foo<u64>>(copy(sender));
        _ = move(x);

        _ = exists<Foo<u64>>(copy(sender));

        y = move_from<Foo<u64>>(copy(sender));
        move_to<Foo<u64>>(copy(account), move(y));
        return;
    }

    foo2<T>(account: &signer) acquires Foo {
        let sender: address;
        let x: &mut Self.Foo<T>;
        let y: Self.Foo<T>;

        sender = Signer.address_of(copy(account));
        x = borrow_global_mut<Foo<T>>(copy(sender));
        _ = move(x);

        _ = exists<Foo<T>>(copy(sender));

        y = move_from<Foo<T>>(copy(sender));
        move_to<Foo<T>>(copy(account), move(y));
        return;
    }


    foo3<T>(account: &signer) acquires Foo {
        let sender: address;
        let x: &mut Self.Foo<Self.Foo<T>>;
        let y: Self.Foo<Self.Foo<T>>;

        sender = Signer.address_of(copy(account));
        x = borrow_global_mut<Foo<Self.Foo<T>>>(copy(sender));
        _ = move(x);

        _ = exists<Foo<Self.Foo<T>>>(copy(sender));

        y = move_from<Foo<Self.Foo<T>>>(copy(sender));
        move_to<Foo<Self.Foo<T>>>(copy(account), move(y));
        return;
    }

}
