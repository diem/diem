module Tester {
    import 0x1.Signer;

    resource Data { v1: u64, v2: u64 }
    resource Box { f: u64 }

    // the resource is here to just give a feeling why the computation might not be reorderable
    bump_and_pick(account: &signer, b1: &mut Self.Box, b2: &mut Self.Box): &u64 acquires Data {
        let sender: address;
        let data: &mut Self.Data;

        sender = Signer.address_of(move(account));
        data = borrow_global_mut<Data>(move(sender));
        *&mut copy(b1).f = *&copy(data).v1;
        *&mut copy(b2).f = *&move(data).v2;
        if (*&copy(b1).f >= *&copy(b2).f) {
            _ = move(b2);
            return &move(b1).f;
        } else {
            _ = move(b1);
            return &move(b2).f;
        }
    }

    larger_field(account: &signer, drop: address, result: &mut u64) acquires Box, Data {
        let b1: Self.Box;
        let b2: Self.Box;
        let returned_ref: &u64;
        let dump: u64;

        b1 = move_from<Box>(Signer.address_of(copy(account)));
        b2 = move_from<Box>(move(drop));

        assert(*&(&b1).f == 0, 42);
        assert(*&(&b2).f == 0, 42);

        returned_ref = Self.bump_and_pick(copy(account), &mut b1, &mut b2);

        // imagine some more interesting check than these asserts
        assert(*&(&b1).f != 0, 42);
        assert(*&(&b2).f != 0, 42);
        assert(
            // (*copy(returned_ref) == *&(&b1).f) ^ (*copy(returned_ref) == *&(&b2).f),
            (*copy(returned_ref) == *&(&b1).f) != (*copy(returned_ref) == *&(&b2).f),
            42
        );

        *move(result) = *move(returned_ref);
        move_to<Box>(copy(account), move(b1));
        Box { dump } = move(b2);

        return;
    }
}
