module A {
    resource T{v: u64}
    resource U{v: u64}

    public A0() acquires T {
        let sender: address;
        let t_ref: &mut Self.T;
        sender = get_txn_sender();
        t_ref = borrow_global_mut<T>(copy(sender));
        _ = move(t_ref);
        t_ref = borrow_global_mut<T>(copy(sender));
        _ = move(t_ref);
        return;
    }

    public A1() acquires T, U {
        let sender: address;
        let t_ref: &mut Self.T;
        let u_ref: &mut Self.U;
        sender = get_txn_sender();
        t_ref = borrow_global_mut<T>(copy(sender));
        u_ref = borrow_global_mut<U>(copy(sender));
        _ = move(t_ref);
        _ = move(u_ref);
        return;
    }

    public A2(b: bool) acquires T {
        let sender: address;
        let t_ref: &mut Self.T;
        sender = get_txn_sender();
        if (move(b)) {
            t_ref = borrow_global_mut<T>(copy(sender));
        } else {
            t_ref = borrow_global_mut<T>(copy(sender));
        }
        _ = move(t_ref);
        return;
    }

    public A3(b: bool) acquires T {
        let sender: address;
        let t_ref: &mut Self.T;
        sender = get_txn_sender();
        if (move(b)) {
            t_ref = borrow_global_mut<T>(copy(sender));
            _ = move(t_ref);
        }
        return;
    }

    public A4(b: bool) acquires T {
        let sender: address;
        let x: Self.T;
        let y: &mut Self.T;
        sender = get_txn_sender();
        x = move_from<T>(copy(sender));
        y = borrow_global_mut<T>(move(sender));
        _ = move(y);
        move_to_sender<T>(move(x));
        return;
    }

    public A5() acquires T {
        let t_ref: &Self.T;
        t_ref = borrow_global<T>(get_txn_sender());
        return;
    }
}
