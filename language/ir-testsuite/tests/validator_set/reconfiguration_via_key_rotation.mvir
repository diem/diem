//! account: alice
//! account: vivian, 1000000, 0, validator
//! account: viola, 1000000, 0, validator

//! new-transaction
//! sender: alice
import 0x0.ValidatorConfig;

// register Alice as a validator candidate
main() {
    let config: ValidatorConfig.Config;

    ValidatorConfig.register_candidate_validator(h"10", h"20", h"30", h"40", h"50", h"60");
    return;
}

// check: EXECUTED

//! new-transaction
//! sender: alice
import 0x0.LibraSystem;
import 0x0.ValidatorConfig;

// rotate alice's pubkey
main() {
    ValidatorConfig.rotate_consensus_pubkey(h"40");
    return;
}

// check: events: []
// check: EXECUTED

// Run the block prologue. No reconfiguration should be triggered,
// since alice is not a validator
//! block-prologue
//! proposer: vivian
//! block-time: 2

// not: NewEpochEvent
// not: DiscoverySetChangeEvent
// check: EXECUTED

//! new-transaction
//! sender: vivian
import 0x0.LibraSystem;
import 0x0.ValidatorConfig;

// rotate vivian's pubkey and then run the block prologue. Now, reconfiguration should be triggered.
main() {
    let info: LibraSystem.ValidatorInfo;

    LibraSystem.rotate_consensus_pubkey(h"40");
    // check that the validator set contains Vivian's new key after reconfiguration
    info = LibraSystem.get_ith_validator_info(1);
    assert(*LibraSystem.get_consensus_pubkey(&info) == h"40", 98);
    return;
}

// check: NewEpochEvent
// not: DiscoverySetChangeEvent
// check: EXECUTED

//! new-transaction
//! sender: vivian
import 0x0.LibraSystem;
// rotate vivian's pubkey to the same value and run the block prologue. No reconfiguration should be
// triggered. the not "NewEpochEvent" check part tests this because reconfiguration always emits a
// NewEpoch event.
main() {
    LibraSystem.rotate_consensus_pubkey(h"40");

    return;
}

// not: NewEpochEvent
// not: DiscoverySetChangeEvent
// check: EXECUTED

//! block-prologue
//! proposer: vivian
//! block-time: 3

//! new-transaction
//! sender: viola
import 0x0.LibraSystem;
// rotate viola's consensus pubkey to a new value
main() {
    LibraSystem.rotate_consensus_pubkey(h"80");

    return;
}

// check: NewEpochEvent
// not: DiscoverySetChangeEvent
// check: EXECUTED

//! block-prologue
//! proposer: vivian
//! block-time: 4

//! new-transaction
//! sender: vivian
import 0x0.LibraSystem;
// rotate vivian's consensus pubkey to a new value
main() {
    LibraSystem.rotate_consensus_pubkey(h"90");

    return;
}

// check: NewEpochEvent
// not: DiscoverySetChangeEvent
// check: EXECUTED

//! new-transaction
//! sender: vivian
import 0x0.LibraSystem;
import 0x0.ValidatorConfig;
// trigger a reconfiguration and check that both vivian and viola's key updates are reflected in
// the set
main() {
    let info: LibraSystem.ValidatorInfo;

    // check that the validator set contains Viola's new key
    info = LibraSystem.get_ith_validator_info(0);
    assert(*LibraSystem.get_validator_address(&info) == {{viola}}, 14);
    assert(*LibraSystem.get_consensus_pubkey(&info) == h"80", 15);
    // check that the validator set contains Vivian's new key
    info = LibraSystem.get_ith_validator_info(1);
    assert(*LibraSystem.get_validator_address(&info) == {{vivian}}, 16);
    assert(*LibraSystem.get_consensus_pubkey(&info) == h"90", 17);
    return;
}
// check: EXECUTED
