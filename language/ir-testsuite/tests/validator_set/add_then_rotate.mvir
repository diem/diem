// Check that rotating keys between addition and reconfiguration works

//! account: alice
//! account: vivian, 1000000, 0, validator

//! sender: alice
// register Alice as a validator candidate
import 0x0.ValidatorConfig;
main() {
    let config: ValidatorConfig.Config;
    ValidatorConfig.register_candidate_validator(h"10", h"20", h"30", h"40", h"50", h"60");

    return;
}

// Bump the time so that a new reconfiguration can happen
//! block-prologue
//! proposer: vivian
//! block-time: 2

//! new-transaction
//! sender: association
// run a tx from the association that adds Alice as a validator
import 0x0.LibraSystem;
main() {
    LibraSystem.add_validator({{alice}});

    return;
}

// check: NewEpochEvent
// check: DiscoverySetChangeEvent
// check: EXECUTED

//! block-prologue
//! proposer: vivian
//! block-time: 3

//! new-transaction
//! sender: alice
// rotate alice's key
import 0x0.LibraSystem;
main() {
    LibraSystem.rotate_consensus_pubkey(h"beefbeef");

    return;
}
// check: NewEpochEvent
// check: EXECUTED

//! new-transaction
// check that Alice is a validator AND that her key is as expected (i.e., it's the key after
// rotation, not the key before)
import 0x0.LibraSystem;
main() {
    let info: LibraSystem.ValidatorInfo;

    assert(LibraSystem.is_validator({{alice}}), 70);

    info = LibraSystem.get_ith_validator_info(1);
    assert(*LibraSystem.get_validator_address(&info) == {{alice}}, 71);
    assert(*LibraSystem.get_consensus_pubkey(&info) == h"beefbeef", 72);

    return;
}

// check: EXECUTED
