//! account: alice
//! account: vivian, 1000000, 0, validator

//! sender: alice
// register Alice as a validator candidate
import 0x0.ValidatorConfig;
main() {
    let config: ValidatorConfig.Config;
    ValidatorConfig.register_candidate_validator(h"10", h"20", h"30", h"40", h"50", h"60");

    return;
}

//! block-prologue
//! proposer: vivian
//! block-time: 2

//! new-transaction
//! sender: vivian
// rotate Vivian's key
import 0x0.LibraSystem;
import 0x0.ValidatorConfig;
main() {
    ValidatorConfig.rotate_consensus_pubkey_of_sender(h"beefbeef");
    LibraSystem.update_and_reconfigure();

    return;
}
// check: NewEpochEvent
// check: EXECUTED

//! block-prologue
//! proposer: vivian
//! block-time: 3

//! new-transaction
//! sender: association
// run a tx from the association that adds Alice as a validator
import 0x0.LibraSystem;
main() {
    LibraSystem.add_validator({{alice}});

    return;
}

// check: NewEpochEvent
// check: EXECUTED

//! new-transaction
// check that Alice is a validator and Vivian's key has been rotated
import 0x0.LibraSystem;
import 0x0.ValidatorConfig;
main() {
    let info: ValidatorConfig.Config;

    assert(LibraSystem.is_validator({{alice}}), 70);

    info = LibraSystem.get_validator_config({{vivian}});
    assert(ValidatorConfig.get_consensus_pubkey(&info) == h"beefbeef", 72);

    return;
}

// check: EXECUTED
