import 0x1.LibraAccount;
import 0x1.Signer;

main(account: &signer) {
  let sender: address;
  let old_auth_key: vector<u8>;
  let cap: LibraAccount.KeyRotationCapability;

  sender = Signer.address_of(copy(account));
  old_auth_key = LibraAccount.authentication_key(copy(sender));
  // by default, an account has not delegated its key rotation capability
  assert(!LibraAccount.delegated_key_rotation_capability(copy(sender)), 50);

  // extracting the capability should flip the flag
  cap = LibraAccount.extract_key_rotation_capability(copy(account));
  assert(LibraAccount.delegated_key_rotation_capability(copy(sender)), 51);

  // and the sender should be able to rotate
  LibraAccount.rotate_authentication_key(&cap, move(old_auth_key));

  // restoring the capability should flip the flag back
  LibraAccount.restore_key_rotation_capability(move(cap));
  assert(!LibraAccount.delegated_key_rotation_capability(copy(sender)), 52);

  return;
}

// check: "Keep(EXECUTED)"

// Extracting the capability should preclude rotation
//! new-transaction
import 0x1.LibraAccount;

main(account: &signer) {
  let cap: LibraAccount.KeyRotationCapability;
  let cap2: LibraAccount.KeyRotationCapability;

  cap = LibraAccount.extract_key_rotation_capability(copy(account));
  cap2 = LibraAccount.extract_key_rotation_capability(copy(account));
  // should fail
  LibraAccount.rotate_authentication_key(&cap2, h"00");
  LibraAccount.restore_key_rotation_capability(move(cap));
  LibraAccount.restore_key_rotation_capability(move(cap2));

  return;
}

// check: "Keep(ABORTED { code: 2305,"
// check: location: ::LibraAccount
