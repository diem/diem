import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Libra;
import 0x1.Signer;

main(sender: &signer) {
  let sender_addr: address;
  let cap: LibraAccount.WithdrawCapability;

  sender_addr = Signer.address_of(copy(sender));

  // by default, an account has not delegated its withdrawal capability
  assert(!LibraAccount.delegated_withdraw_capability(copy(sender_addr)), 50);

  // make sure we report that the capability has been extracted
  cap = LibraAccount.extract_withdraw_capability(copy(sender));
  assert(LibraAccount.delegated_withdraw_capability(copy(sender_addr)), 51);

  // and the sender should be able to withdraw with this cap
  LibraAccount.pay_from<LBR.LBR>(&cap, copy(sender_addr), 100, h"", h"");

  // restoring the capability should flip the flag back
  LibraAccount.restore_withdraw_capability(move(cap));
  assert(!LibraAccount.delegated_withdraw_capability(copy(sender_addr)), 52);

  return;
}
