//! account: alice
//! account: bob
//! account: carol

//! sender: alice
module SillyColdWallet {
    import 0x0.LibraAccount;
    import 0x0.LBR;
    import 0x0.Libra;
    import 0x0.Signer;

    resource T {
        cap: LibraAccount.WithdrawCapability,
        owner: address,
    }

    public publish(account: &signer, cap: LibraAccount.WithdrawCapability, owner: address) {
        let t: Self.T;

        t = T { cap: move(cap), owner: move(owner) };
        move_to<T>(move(account), move(t));
        return;
    }

    public withdraw(account: &signer, wallet_address: address, amount: u64): Libra.T<LBR.T> acquires T {
        let wallet_ref: &mut Self.T;

        wallet_ref = borrow_global_mut<T>(move(wallet_address));
        if (*&copy(wallet_ref).owner == Signer.address_of(move(account))) {
            return LibraAccount.withdraw_with_capability<LBR.T>(&move(wallet_ref).cap, move(amount));
        } else {
            abort(77);
        }
    }
}

//! new-transaction
//! sender: alice
import {{alice}}.SillyColdWallet;
import 0x0.LibraAccount;

// create a cold wallet for Bob that withdraws from Alice's account
main(sender: &signer) {
    let cap: LibraAccount.WithdrawCapability;

    cap = LibraAccount.extract_withdraw_capability(copy(sender));
    SillyColdWallet.publish(move(sender), move(cap), {{bob}});

    return;
}
// check: EXECUTED


//! new-transaction
//! sender: bob
import {{alice}}.SillyColdWallet;
import 0x0.LibraAccount;
import 0x0.LBR;
import 0x0.Libra;

// use the cold wallet that Alice created to move funds into Bob's account
main(account: &signer) {
    let alice_initial_balance: u64;
    let coin: Libra.T<LBR.T>;

    alice_initial_balance = LibraAccount.balance<LBR.T>({{alice}});
    coin = SillyColdWallet.withdraw(copy(account), {{alice}}, 1000);
    LibraAccount.deposit_to<LBR.T>(move(account), move(coin));

    // the withdraw should have debited Alice's account
    assert(move(alice_initial_balance) - 1000 == LibraAccount.balance<LBR.T>({{alice}}), 10);

    return;
}
// check: EXECUTED

//! new-transaction
//! sender: alice
import 0x0.LibraAccount;
import 0x0.LBR;
import 0x0.Libra;

// check that Alice can no longer withdraw from her account
main(account: &signer) {
    let coin: Libra.T<LBR.T>;

    coin = LibraAccount.withdraw_from<LBR.T>(copy(account), 1000);
    LibraAccount.deposit_to<LBR.T>(move(account), move(coin));
    return;
}

// should fail with insufficient privileges error
// check: ABORTED 11


//! new-transaction
//! sender: bob
import 0x0.LibraAccount;
import 0x0.LBR;
import 0x0.Libra;

// check that Bob can still withdraw from his normal account
main(account: &signer) {
    let coin: Libra.T<LBR.T>;

    coin = LibraAccount.withdraw_from<LBR.T>(copy(account), 1000);
    LibraAccount.deposit_to<LBR.T>(move(account), move(coin));
    return;
}


//! new-transaction
//! sender: carol
import 0x0.LibraAccount;
import 0x0.LBR;
import 0x0.Vector;

// check that other users can still pay into Alice's account in the normal way
main(account: &signer) {
    LibraAccount.pay_from<LBR.T>(move(account), {{alice}}, 1000);
    return;
}
