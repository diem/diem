//! account: alice
//! account: bob
//! account: carol

//! sender: alice
module SillyColdWallet {
    import 0x1.LibraAccount;
    import 0x1.LBR;
    import 0x1.Libra;
    import 0x1.Signer;

    resource T {
        cap: LibraAccount.WithdrawCapability,
        owner: address,
    }

    public publish(account: &signer, cap: LibraAccount.WithdrawCapability, owner: address) {
        let t: Self.T;

        t = T { cap: move(cap), owner: move(owner) };
        move_to<T>(move(account), move(t));
        return;
    }

    public withdraw(account: &signer, wallet_address: address, amount: u64): Libra.Libra<LBR.LBR> acquires T {
        let wallet_ref: &mut Self.T;

        wallet_ref = borrow_global_mut<T>(move(wallet_address));
        if (*&copy(wallet_ref).owner == Signer.address_of(move(account))) {
            // LibraAccount no longer supports this API
            return Libra.zero<LBR.LBR>();
            //return LibraAccount.withdraw_from<LBR.LBR>(&move(wallet_ref).cap, move(amount));
        } else {
            abort(77);
        }
    }
}

//! new-transaction
//! sender: alice
import {{alice}}.SillyColdWallet;
import 0x1.LibraAccount;

// create a cold wallet for Bob that withdraws from Alice's account
main(sender: &signer) {
    let cap: LibraAccount.WithdrawCapability;

    cap = LibraAccount.extract_withdraw_capability(copy(sender));
    SillyColdWallet.publish(move(sender), move(cap), {{bob}});

    return;
}
// check: "Keep(EXECUTED)"

//! new-transaction
//! sender: alice
import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Libra;

// check that Alice can no longer withdraw from her account
main(account: &signer) {
    let with_cap: LibraAccount.WithdrawCapability;

    with_cap = LibraAccount.extract_withdraw_capability(copy(account));
    LibraAccount.pay_from<LBR.LBR>(&with_cap, {{alice}}, 1000, h"", h"");
    LibraAccount.restore_withdraw_capability(move(with_cap));
    return;
}

// should fail with withdrawal capability already extracted
// check: "Keep(ABORTED { code: 1793,"


//! new-transaction
//! sender: bob
import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Libra;

// check that Bob can still withdraw from his normal account
main(account: &signer) {
    let with_cap: LibraAccount.WithdrawCapability;

    with_cap = LibraAccount.extract_withdraw_capability(copy(account));
    LibraAccount.pay_from<LBR.LBR>(&with_cap, {{bob}}, 1000, h"", h"");
    LibraAccount.restore_withdraw_capability(move(with_cap));
    return;
}


//! new-transaction
//! sender: carol
import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Vector;

// check that other users can still pay into Alice's account in the normal way
main(account: &signer) {
    let with_cap: LibraAccount.WithdrawCapability;
    with_cap = LibraAccount.extract_withdraw_capability(copy(account));
    LibraAccount.pay_from<LBR.LBR>(&with_cap, {{alice}}, 1000, h"", h"");
    LibraAccount.restore_withdraw_capability(move(with_cap));
    return;
}
