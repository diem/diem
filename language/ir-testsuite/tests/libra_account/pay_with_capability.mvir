//! account: alice
//! account: bob
//! account: carol

//! sender: alice
module AlicePays {
    import 0x0.LibraAccount;
    import 0x0.LBR;
    import 0x0.Libra;
    import 0x0.Vector;

    resource T {
        cap: LibraAccount.WithdrawalCapability,
    }

    public create() {
        move_to_sender<T>(T {
            cap: LibraAccount.extract_sender_withdrawal_capability(),
        });
        return;
    }

    public pay(payee: address, amount: u64) acquires T {
        let cap: &Self.T;
        cap = borrow_global<T>({{alice}});
        LibraAccount.pay_from_capability<LBR.T>(move(payee), Vector.empty<u8>(), &move(cap).cap, move(amount), h"0A11CE");
        return;
    }
}

//! new-transaction
//! sender: alice
import {{alice}}.AlicePays;

main() {
    AlicePays.create();
    return;
}

//! new-transaction
//! sender: bob
import {{alice}}.AlicePays;
import 0x0.LibraAccount;
import 0x0.LBR;

main() {
    let carol_prev_balance: u64;
    let alice_prev_balance: u64;
    carol_prev_balance = LibraAccount.balance<LBR.T>({{carol}});
    alice_prev_balance = LibraAccount.balance<LBR.T>({{alice}});
    AlicePays.pay({{carol}}, 10);
    assert(move(carol_prev_balance) + 10 == LibraAccount.balance<LBR.T>({{carol}}), 0);
    assert(move(alice_prev_balance) - 10 == LibraAccount.balance<LBR.T>({{alice}}), 1);
    return;
}

// check: SentPaymentEvent
