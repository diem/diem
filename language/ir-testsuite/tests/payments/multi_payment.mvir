//! account: bob, 1000000
//! account: carol, 1000000

import 0x0.LibraAccount;
import 0x0.LBR;
import 0x0.Libra;

main() {
    let addr1: address;
    let addr2: address;
    let addr3: address;
    let struct1_original_balance: u64;
    let struct2_original_balance: u64;
    let struct3_original_balance: u64;
    let five_coins1: Libra.T<LBR.T>;
    let five_coins2: Libra.T<LBR.T>;
    let struct1_new_balance: u64;
    let struct2_new_balance: u64;
    let struct3_new_balance: u64;

    addr1 = get_txn_sender();
    addr2 = {{bob}};
    addr3 = {{carol}};

    struct1_original_balance = LibraAccount.balance<LBR.T>(copy(addr1));
    struct2_original_balance = LibraAccount.balance<LBR.T>(copy(addr2));
    struct3_original_balance = LibraAccount.balance<LBR.T>(copy(addr3));

    five_coins1 = LibraAccount.withdraw_from_sender<LBR.T>(5);
    five_coins2 = LibraAccount.withdraw_from_sender<LBR.T>(5);
    LibraAccount.deposit<LBR.T>(copy(addr2), move(five_coins1));
    LibraAccount.deposit<LBR.T>(copy(addr3), move(five_coins2));

    struct1_new_balance = LibraAccount.balance<LBR.T>(copy(addr1));
    struct2_new_balance = LibraAccount.balance<LBR.T>(copy(addr2));
    struct3_new_balance = LibraAccount.balance<LBR.T>(copy(addr3));

    assert(copy(struct1_new_balance) == copy(struct1_original_balance) - 10, 42);
    assert(copy(struct2_new_balance) == copy(struct2_original_balance) + 5, 42);
    assert(copy(struct3_new_balance) == copy(struct3_original_balance) + 5, 42);

    return;
}
