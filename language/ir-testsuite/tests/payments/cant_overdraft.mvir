//! account: alice

import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Libra;
import 0x1.Signer;

main(account: &signer) {
    let sender_balance: u64;
    let all_coins: Libra.Libra<LBR.LBR>;
    let one_coin: Libra.Libra<LBR.LBR>;
    let addr: address;
    let with_cap: LibraAccount.WithdrawCapability;

    addr = Signer.address_of(copy(account));
    sender_balance = LibraAccount.balance<LBR.LBR>(copy(addr));
    with_cap = LibraAccount.extract_withdraw_capability(copy(account));
    LibraAccount.pay_from<LBR.LBR>(&with_cap, {{alice}}, copy(sender_balance), h"", h"");

    assert(LibraAccount.balance<LBR.LBR>(copy(addr)) == 0, 42);

    LibraAccount.pay_from<LBR.LBR>(&with_cap, {{alice}}, move(sender_balance), h"", h"");
    LibraAccount.restore_withdraw_capability(move(with_cap));

    return;
}

// check: "Keep(ABORTED { code: 1288,"
