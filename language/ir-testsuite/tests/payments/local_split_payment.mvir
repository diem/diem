//! account: bob, 1000000
//! account: carol, 1000000

import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Libra;
import 0x1.Signer;

main(account: &signer) {
    let addr1: address;
    let addr2: address;
    let addr3: address;
    let struct1_original_balance: u64;
    let struct2_original_balance: u64;
    let struct3_original_balance: u64;
    let five_coins1: Libra.Libra<LBR.LBR>;
    let fc_ref: &mut Libra.Libra<LBR.LBR>;
    let five_coins2: Libra.Libra<LBR.LBR>;
    let struct1_new_balance: u64;
    let struct2_new_balance: u64;
    let struct3_new_balance: u64;
    let with_cap: LibraAccount.WithdrawCapability;

    addr1 = Signer.address_of(copy(account));
    addr2 = {{bob}};
    addr3 = {{carol}};

    struct1_original_balance = LibraAccount.balance<LBR.LBR>(copy(addr1));
    struct2_original_balance = LibraAccount.balance<LBR.LBR>(copy(addr2));
    struct3_original_balance = LibraAccount.balance<LBR.LBR>(copy(addr3));

    with_cap = LibraAccount.extract_withdraw_capability(copy(account));
    five_coins1 = LibraAccount.withdraw_from<LBR.LBR>(&with_cap, 10);
    LibraAccount.restore_withdraw_capability(move(with_cap));
    fc_ref = &mut five_coins1;
    five_coins2 = Libra.withdraw<LBR.LBR>(move(fc_ref), 5);

    LibraAccount.deposit<LBR.LBR>(copy(account), copy(addr2), move(five_coins1));
    LibraAccount.deposit<LBR.LBR>(copy(account), copy(addr3), move(five_coins2));

    struct1_new_balance = LibraAccount.balance<LBR.LBR>(copy(addr1));
    struct2_new_balance = LibraAccount.balance<LBR.LBR>(copy(addr2));
    struct3_new_balance = LibraAccount.balance<LBR.LBR>(copy(addr3));

    assert(copy(struct1_new_balance) == copy(struct1_original_balance) - 10, 41);
    assert(copy(struct2_new_balance) == copy(struct2_original_balance) + 5, 42);
    assert(copy(struct3_new_balance) == copy(struct3_original_balance) + 5, 43);
    return;
}
