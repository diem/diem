//! account: bob, 1000000

import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Libra;
import 0x1.Signer;

main(account: &signer) {
    let sender_addr: address;
    let recipient_addr: address;
    let sender_original_balance: u64;
    let recipient_original_balance: u64;
    let five_coins: Libra.Libra<LBR.LBR>;
    let sender_new_balance: u64;
    let recipient_new_balance: u64;
    let with_cap: LibraAccount.WithdrawCapability;

    sender_addr = Signer.address_of(copy(account));
    recipient_addr = {{bob}};
    sender_original_balance = LibraAccount.balance<LBR.LBR>(copy(sender_addr));
    recipient_original_balance = LibraAccount.balance<LBR.LBR>(copy(recipient_addr));
    with_cap = LibraAccount.extract_withdraw_capability(copy(account));
    five_coins = LibraAccount.withdraw_from<LBR.LBR>(&with_cap, 5);
    LibraAccount.restore_withdraw_capability(move(with_cap));
    LibraAccount.deposit<LBR.LBR>(copy(account), copy(recipient_addr), move(five_coins));

    sender_new_balance = LibraAccount.balance<LBR.LBR>(move(sender_addr));
    recipient_new_balance = LibraAccount.balance<LBR.LBR>(move(recipient_addr));

    assert(move(sender_new_balance) == move(sender_original_balance) - 5, 77);
    assert(move(recipient_new_balance) == move(recipient_original_balance) + 5, 88);

    return;
}
