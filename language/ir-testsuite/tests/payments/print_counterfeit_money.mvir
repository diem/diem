//! account: default, 100000

module M {
    import 0x1.LBR;
    import 0x1.Libra;
    import 0x1.Signer;

    resource R<T: resource> { x: T }
    resource FakeCoin { value: u64 }

    fetch<T: resource>(account: &signer): T acquires R {
        let r: Self.R<T>;
        let t: T;
        r = move_from<R<T>>(Signer.address_of(move(account)));
        R<T> { x: t } = move(r);
        return move(t);
    }

    store<T: resource>(account: &signer, x: T) {
        move_to<R<T>>(move(account), R<T> { x: move(x) });
        return;
    }

    transmute<T1: resource, T2: resource>(account: &signer, x: T1): T2 acquires R {
        Self.store<T1>(copy(account), move(x));
        return Self.fetch<T2>(move(account));
    }

    public become_rich(account: &signer) acquires R {
        let fake: Self.FakeCoin;
        let real: Libra.Libra<LBR.LBR>;

        fake = FakeCoin { value: 400000 };

        real = Self.transmute<Self.FakeCoin, Libra.Libra<LBR.LBR>>(copy(account), move(fake));

        Libra.destroy_zero<LBR.LBR>(move(real));

        return;
    }
}

//! new-transaction
import {{default}}.M;
import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Signer;

main(account: &signer) {
    M.become_rich(copy(account));
    assert(LibraAccount.balance<LBR.LBR>(Signer.address_of(move(account))) == 500000, 42);
    return;
}

// check: MISSING_DATA
