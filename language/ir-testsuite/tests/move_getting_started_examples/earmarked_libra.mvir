// NOTE: this module appears in the "Getting Started With Move" guide on the Libra website.
// Any changes to this code should also be reflected there.

// A module for earmarking a coin for a specific recipient
module EarmarkedLibra {
  import 0x0.LBR;
  import 0x0.Libra;

  // A wrapper containing a Libra coin and the address of the recipient the
  // coin is earmarked for.
  resource T {
    coin: Libra.T<LBR.T>,
    recipient: address
  }

  // Create a new earmarked coin with the given `recipient`.
  // Publish the coin under the transaction sender's account address.
  public create(coin: Libra.T<LBR.T>, recipient: address) {
    let t: Self.T;

    // Construct or "pack" a new resource of type T. Only procedures of the
    // `EarmarkedLibraCoin` module can create an `EarmarkedLibra.T<LBR.T>`.
    t = T {
      coin: move(coin),
      recipient: move(recipient),
    };

    // Publish the earmarked coin under the transaction sender's account
    // address. Each account can contain at most one resource of a given type;
    // this call will fail if the sender already has a resource of this type.
    move_to_sender<T>(move(t));
    return;
  }

  // Allow the transaction sender to claim a coin that was earmarked for her.
  public claim_for_recipient(earmarked_coin_address: address): Self.T acquires T {
    let t: Self.T;
    let t_ref: &Self.T;
    let sender: address;

    // Remove the earmarked coin resource published under `earmarked_coin_address`.
    // If there is no resource of type T published under the address, this will fail.
    t = move_from<T>(move(earmarked_coin_address));

    t_ref = &t;
    // This is a builtin that returns the address of the transaction sender.
    sender = get_txn_sender();
    // Ensure that the transaction sender is the recipient. If this assertion
    // fails, the transaction will fail and none of its effects (e.g.,
    // removing the earmarked coin) will be committed.  99 is an error code
    // that will be emitted in the transaction output if the assertion fails.
    assert(*(&move(t_ref).recipient) == move(sender), 99);

    return move(t);
  }

  // Allow the creator of the earmarked coin to reclaim it.
  public claim_for_creator(): Self.T acquires T {
    let t: Self.T;
    let sender: address;

    sender = get_txn_sender();
    // This will fail if no resource of type T under the sender's address.
    t = move_from<T>(move(sender));
    return move(t);
  }

  // Extract the Libra coin from its wrapper and return it to the caller.
  public unwrap(t: Self.T): Libra.T<LBR.T> {
    let coin: Libra.T<LBR.T>;
    let recipient: address;

    // This "unpacks" a resource type by destroying the outer resource, but
    // returning its contents. Only the module that declares a resource type
    // can unpack it.
    T { coin, recipient } = move(t);
    return move(coin);
  }

}

// TODO: lines below this are tests

//! new-transaction

import 0x0.LibraAccount;
import 0x0.LBR;
import 0x0.Libra;
import {{default}}.EarmarkedLibra;

main() {
  let recipient_address: address;
  let coin: Libra.T<LBR.T>;
  let earmarked_coin: EarmarkedLibra.T;
  let sender: address;

  recipient_address = 0xb0b;
  coin = LibraAccount.withdraw_from_sender<LBR.T>(1000);
  EarmarkedLibra.create(move(coin), move(recipient_address));

  earmarked_coin = EarmarkedLibra.claim_for_creator();
  coin = EarmarkedLibra.unwrap(move(earmarked_coin));
  sender = get_txn_sender();
  LibraAccount.deposit<LBR.T>(move(sender), move(coin));

  return;
}
