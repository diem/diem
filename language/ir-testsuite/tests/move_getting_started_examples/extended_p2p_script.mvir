//! no-run: runtime

// Simple peer-peer payment example.

// Use LibraAccount module published on the blockchain at account address
// 0x0...0 (with 64 zeroes). 0x0 is shorthand that the IR pads out to
// 256 bits (64 digits) by adding leading zeroes.
import 0x0.LibraAccount;
import 0x0.LBR;
import 0x0.Libra;
main(account: &signer, payee: address, amount: u64) {
  // The bytecode (and consequently, the IR) has typed locals.  The scope of
  // each local is the entire procedure. All local variable declarations must
  // be at the beginning of the procedure. Declaration and initialization of
  // variables are separate operations, but the bytecode verifier will prevent
  // any attempt to use an uninitialized variable.
  let coin: Libra.Libra<LBR.LBR>;
  let with_cap: LibraAccount.WithdrawCapability;

  // Acquire a Libra.Libra<LBR.LBR> resource with value `amount` from the sender's
  // account.  This will fail if the sender's balance is less than `amount`.
  with_cap = LibraAccount.extract_withdraw_capability(copy(account));
  coin = LibraAccount.withdraw_from<LBR.LBR>(&with_cap, move(amount));
  LibraAccount.restore_withdraw_capability(move(with_cap));
  // Move the Libra.Libra<LBR.LBR> resource into the account of `payee`. If there is no
  // account at the address `payee`, this step will fail
  LibraAccount.deposit<LBR.LBR>(copy(account), move(payee), move(coin));

  // Every procedure must end in a `return`. The IR compiler is very literal:
  // it directly translates the source it is given. It will not do fancy
  // things like inserting missing `return`s.
  return;
}
