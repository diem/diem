module M {
    resource R { f:bool }
    t0() {
        let r: Self.R;
        let f: bool;
        r = R{ f: false };
        if (true) {
            R{ f: f } = move(r);
        } else {
            R{ f: f } = move(r);
            r = R{ f: false };
        }
        R{ f: f } = move(r);
        return;
    }
}
// check: MOVELOC_UNAVAILABLE_ERROR

//! new-transaction
module M {
    resource R { f:bool }
    t0() {
        let r: Self.R;
        let f: bool;
        r = R{ f: false };
        if (true) {
            R{ f: f } = move(r);
        } else {
            R{ f: f } = move(r);
            r = R{ f: false };
        }
        return;
    }
}
// check: UNSAFE_RET_UNUSED_RESOURCES

//! new-transaction
module M {
    resource R { f:bool }
    t0() {
        let r: Self.R;
        let f: bool;
        r = R{ f: false };
        if (true) {
            R{ f: f } = move(r);
        } else {
            R{ f: f } = move(r);
            r = R{ f: false };
        }
        r = R{ f: false };
        return;
    }
}
// check: STLOC_UNSAFE_TO_DESTROY_ERROR

//! new-transaction
module M {
    resource R { f:bool }
    t0() {
        let r: Self.R;
        let f: bool;
        r = R{ f: false };
        if (true) {
            R{ f: f } = move(r);
        } else {
            R{ f: f } = move(r);
            r = R{ f: false };
        }
        R{ f: f } = copy(r);
        return;
    }
}
// check: COPYLOC_RESOURCE_ERROR

//! new-transaction
module M {
    resource R { f:bool }
    t0() {
        let r: Self.R;
        let ref: &Self.R;
        let f: bool;
        r = R{ f: false };
        if (true) {
            R{ f: f } = move(r);
        } else {
            R{ f: f } = move(r);
            r = R{ f: false };
        }
        ref = &r;
        return;
    }
}
// check: BORROWLOC_UNAVAILABLE_ERROR
