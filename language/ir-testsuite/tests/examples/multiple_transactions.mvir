//! account: alice, 900000
//! account: bob, 900000

// Alice sends 200 Libra Coins to Bob
//! sender: alice
//! args: {{bob}}
//! gas-price: 0

import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Libra;

main(account: &signer, receiver: address) {
    let coins: Libra.Libra<LBR.LBR>;
    let with_cap: LibraAccount.WithdrawCapability;

    with_cap = LibraAccount.extract_withdraw_capability(copy(account));
    LibraAccount.pay_from<LBR.LBR>(&with_cap, move(receiver), 200, h"", h"");
    LibraAccount.restore_withdraw_capability(move(with_cap));

    return;
}



// Alice checks that her balance is less than 999800 Libra Coins. (200 + gas)
//! new-transaction
//! sender: alice

import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Signer;

main(account: &signer) {
    let balance: u64;
    let sender: address;

    sender = Signer.address_of(move(account));
    balance = LibraAccount.balance<LBR.LBR>(move(sender));
    assert(move(balance) <= 999800, 42);

    return;
}



// Bob checks that he has 90200 Libra Coins
//! new-transaction
//! sender: bob
import 0x1.LibraAccount;
import 0x1.LBR;
import 0x1.Signer;

main(account: &signer) {
    let balance: u64;
    let sender: address;

    sender = Signer.address_of(move(account));
    balance = LibraAccount.balance<LBR.LBR>(move(sender));
    assert(move(balance) == 900200, 42);

    return;
}
