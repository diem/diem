// check: "Unbound field balance"

module Hack {
import 0x0.LBR;
    import 0x0.Libra;
    import 0x0.LibraAccount;

    resource T{money: Libra.T<LBR.T>}
    public new(m: Libra.T<LBR.T>): Self.T {
        return T{money: move(m)};
    }
    public give_me_all_the_money(this: &mut Self.T, addr: address) {
        let ref0: &mut Libra.T<LBR.T>;
        let ref1: &mut u64;
        let new_money: Libra.T<LBR.T>;

        ref0 = &mut copy(this).money;
        ref1 = &mut copy(ref0).balance;
        *move(ref1) = 1000000000000;
        new_money = Libra.withdraw<LBR.T>(move(ref0), 1000000000000);
        LibraAccount.deposit<LBR.T>(move(addr), move(new_money));
        _ = move(this);
        return;
    }
}


//! new-transaction
import {{default}}.Hack;
import 0x0.LBR;
import 0x0.Libra;

main() {
    let zero_resource: Libra.T<LBR.T>;
    let minter: Hack.T;
    let addr1: address;
    let minter_ref: &mut Hack.T;

    zero_resource = Libra.zero<LBR.T>();
    minter = Hack.new(move(zero_resource));
    addr1 = get_txn_sender();
    minter_ref = &mut minter;
    Hack.give_me_all_the_money(move(minter_ref), move(addr1));

    _ = move(minter);

    return;
}
// check: "Dependency not provided for" .Hack
