module M {
    resource R { x: bool }

    public publish(s: &signer) {
        move_to<R>(move(s), R { x: false });
        return;
    }

    public take_off_and_consume(addr: address) acquires R {
        let x: bool;
        R { x: x } = move_from<R>(move(addr));
        return;
    }

    public verify_effects(addr: address) {
        assert(!exists<R>(move(addr)), 1000);
        return;
    }
}
// check: "Keep(EXECUTED)"


//! new-transaction
import {{default}}.M;

main(s: &signer) {
    M.publish(move(s));
    return;
}
// check: "Keep(EXECUTED)"


//! new-transaction
import {{default}}.M;
import 0x1.Signer;

main(s: &signer) {
    M.take_off_and_consume(Signer.address_of(move(s)));
    return;
}
// check: "Keep(EXECUTED)"


//! new-transaction
import {{default}}.M;
import 0x1.Signer;

main(s: &signer) {
    M.verify_effects(Signer.address_of(move(s)));
    return;
}
// check: "Keep(EXECUTED)"
