module M {
    import 0x1.Vector;

    resource R { v: vector<u64> }

    public publish(s: &signer) {
        let v: vector<u64>;
        v = Vector.empty<u64>();
        Vector.push_back<u64>(&mut v, 100);
        Vector.push_back<u64>(&mut v, 200);
        move_to<R>(move(s), R { v: move(v) });
        return;
    }

    public borrow_and_pop(addr: address) acquires R {
        assert(Vector.pop_back<u64>(&mut borrow_global_mut<R>(move(addr)).v) == 200, 1000);
        return;
    }

    public verify_effects(addr: address) acquires R {
        assert(Vector.length<u64>(&borrow_global<R>(move(addr)).v) == 1, 1001);
        return;
    }
}
// check: "Keep(EXECUTED)"


//! new-transaction
import {{default}}.M;

main(s: &signer) {
    M.publish(move(s));
    return;
}
// check: "Keep(EXECUTED)"


//! new-transaction
import {{default}}.M;
import 0x1.Signer;

main(s: &signer) {
    M.borrow_and_pop(Signer.address_of(move(s)));
    return;
}
// check: "Keep(EXECUTED)"


//! new-transaction
import {{default}}.M;
import 0x1.Signer;

main(s: &signer) {
    M.verify_effects(Signer.address_of(move(s)));
    return;
}
// check: "Keep(EXECUTED)"
