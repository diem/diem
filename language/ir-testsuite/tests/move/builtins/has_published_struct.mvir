module Token {
    struct T has key { b: bool }

    public new(): Self.T {
        return T{ b: true };
    }

    public has(addr: address): bool {
        let yes: bool;
        yes = exists<T>(move(addr));
        return move(yes);
    }

    public publish(account: &signer, t: Self.T) {
        move_to<T>(move(account), move(t));
        return;
    }
}

//! new-transaction

import 0x1.Signer;
import {{default}}.Token;

main(account: signer) {
    let z: Token.T;
    let sender: address;
    let exists1: bool;
    let addr1: address;
    let exists2: bool;

    z = Token.new();
    Token.publish(&account, move(z));
    sender = Signer.address_of(&account);
    exists1 = Token.has(copy(sender));
    assert(copy(exists1), 42);

    addr1 = 0x0111111111111111111111110;
    exists2 = Token.has(copy(addr1));
    assert(!copy(exists2), 42);

    return;
}
