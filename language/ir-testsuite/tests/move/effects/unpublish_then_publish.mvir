module M {
    import 0x1.Signer;

    struct R has key { x: bool }

    public init(s: &signer) {
        move_to<R>(move(s), R { x: false });
        return;
    }

    public test(s: &signer) acquires R {
        let r: Self.R;
        r = move_from<R>(Signer.address_of(copy(s)));
        move_to<R>(move(s), move(r));
        return;
    }
}
// check: "Keep(EXECUTED)"


//! new-transaction
import {{default}}.M;

main(s: signer) {
    M.init(&s);
    return;
}
// check: "Keep(EXECUTED)"


//! new-transaction
import {{default}}.M;

main(s: signer) {
    M.test(&s);
    return;
}
// The following checks ensure that we do emit a write op for R in case it's unpublished then
// republished.
//
// check: WriteSet
// check: Value(00)
// check: "Keep(EXECUTED)"
