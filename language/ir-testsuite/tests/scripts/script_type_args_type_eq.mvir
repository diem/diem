module M {
    resource Box<T> { _dummy: bool }

    public type_eq<T1, T2>(): bool acquires Box {
        let r: bool;
        let b: bool;
        move_to_sender<Box<T1>>(Box<T1> { _dummy: false });
        r = exists<Box<T2>>(get_txn_sender());
        Box<T1> { _dummy: b } = move_from<Box<T1>>(get_txn_sender());
        return move(r);
    }
}
// check: EXECUTED

//! new-transaction
//! type-args: u64
import {{default}}.M;

main<T>() {
    assert(M.type_eq<T, u64>(), 100);
    assert(!M.type_eq<T, u8>(), 101);
    return;
}
// check: EXECUTED


//! new-transaction
//! type-args: 0x0::LibraAccount::T
import {{default}}.M;
import 0x0.LibraAccount;

main<T>() {
    assert(M.type_eq<T, LibraAccount.T>(), 100);
    assert(!M.type_eq<T, u8>(), 101);
    return;
}
// check: EXECUTED


//! new-transaction
//! type-args: 0x0::LibraAccount::Balance<0x0::LibraAccount::Balance<vector<u64>>>
import {{default}}.M;
import 0x0.LibraAccount;

main<T>() {
    assert(M.type_eq<T, LibraAccount.Balance<LibraAccount.Balance<vector<u64>>>>(), 100);
    assert(!M.type_eq<T, LibraAccount.Balance<LibraAccount.Balance<vector<u8>>>>(), 101);
    return;
}
// check: EXECUTED
