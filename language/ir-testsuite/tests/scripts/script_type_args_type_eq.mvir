module M {
    import 0x1.Signer;

    resource Box<T> { _dummy: bool }

    public type_eq<T1, T2>(account: &signer): bool acquires Box {
        let sender: address;
        let r: bool;
        let b: bool;
        sender = Signer.address_of(copy(account));
        move_to<Box<T1>>(move(account), Box<T1> { _dummy: false });
        r = exists<Box<T2>>(copy(sender));
        Box<T1> { _dummy: b } = move_from<Box<T1>>(move(sender));
        return move(r);
    }
}
// check: "Keep(EXECUTED)"

//! new-transaction
//! type-args: u64
import {{default}}.M;

main<T>(account: &signer) {
    assert(M.type_eq<T, u64>(copy(account)), 100);
    assert(!M.type_eq<T, u8>(copy(account)), 101);
    return;
}
// check: "Keep(EXECUTED)"


//! new-transaction
//! type-args: 0x1::LibraAccount::LibraAccount
import {{default}}.M;
import 0x1.LibraAccount;

main<T>(account: &signer) {
    assert(M.type_eq<T, LibraAccount.LibraAccount>(copy(account)), 100);
    assert(!M.type_eq<T, u8>(copy(account)), 101);
    return;
}
// check: "Keep(EXECUTED)"


//! new-transaction
//! type-args: 0x1::LibraAccount::Balance<0x1::LibraAccount::Balance<vector<u64>>>
import {{default}}.M;
import 0x1.LibraAccount;

main<T>(account: &signer) {
    assert(M.type_eq<T, LibraAccount.Balance<LibraAccount.Balance<vector<u64>>>>(copy(account)), 100);
    assert(!M.type_eq<T, LibraAccount.Balance<LibraAccount.Balance<vector<u8>>>>(copy(account)), 101);
    return;
}
// check: "Keep(EXECUTED)"
