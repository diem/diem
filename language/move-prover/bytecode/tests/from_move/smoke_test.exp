============ initial translation from Move ================

pub fun Signer::address_of(s: &signer): address {
     var $t1: &signer
     var $t2: &address
     var $t3: address
  0: $t1 := move(s)
  1: $t2 := Signer::borrow_address($t1)
  2: $t3 := read_ref($t2)
  3: return $t3
}


pub fun Signer::borrow_address(s: &signer): &address {
}


fun SmokeTest::arithmetic_ops(a: u64): (u64, u64) {
     var c: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
     var $t8: u64
  0: $t2 := 2
  1: c := $t2
  2: $t3 := copy(c)
  3: $t4 := 2
  4: $t5 := !=($t3, $t4)
  5: if ($t5) goto L0 else goto L1
  6: L1:
  7: goto L2
  8: L0:
  9: $t6 := 42
 10: abort($t6)
 11: L2:
 12: $t7 := copy(c)
 13: $t8 := copy(a)
 14: return ($t7, $t8)
}


fun SmokeTest::bool_ops(a: u64, b: u64): (bool, bool) {
     var c: bool
     var d: bool
     var tmp#$4: bool
     var tmp#$5: bool
     var $t6: u64
     var $t7: u64
     var $t8: bool
     var $t9: u64
     var $t10: u64
     var $t11: bool
     var $t12: bool
     var $t13: bool
     var $t14: u64
     var $t15: u64
     var $t16: bool
     var $t17: bool
     var $t18: u64
     var $t19: u64
     var $t20: bool
     var $t21: bool
     var $t22: bool
     var $t23: bool
     var $t24: bool
     var $t25: bool
     var $t26: u64
     var $t27: bool
     var $t28: bool
  0: $t6 := copy(a)
  1: $t7 := copy(b)
  2: $t8 := >($t6, $t7)
  3: if ($t8) goto L0 else goto L1
  4: L1:
  5: goto L2
  6: L0:
  7: $t9 := copy(a)
  8: $t10 := copy(b)
  9: $t11 := >=($t9, $t10)
 10: tmp#$4 := $t11
 11: goto L3
 12: L2:
 13: $t12 := false
 14: tmp#$4 := $t12
 15: goto L3
 16: L3:
 17: $t13 := move(tmp#$4)
 18: c := $t13
 19: $t14 := copy(a)
 20: $t15 := copy(b)
 21: $t16 := <($t14, $t15)
 22: if ($t16) goto L4 else goto L5
 23: L5:
 24: goto L6
 25: L4:
 26: $t17 := true
 27: tmp#$5 := $t17
 28: goto L7
 29: L6:
 30: $t18 := copy(a)
 31: $t19 := copy(b)
 32: $t20 := <=($t18, $t19)
 33: tmp#$5 := $t20
 34: goto L7
 35: L7:
 36: $t21 := move(tmp#$5)
 37: d := $t21
 38: $t22 := copy(c)
 39: $t23 := copy(d)
 40: $t24 := !=($t22, $t23)
 41: $t25 := !($t24)
 42: if ($t25) goto L8 else goto L9
 43: L9:
 44: goto L10
 45: L8:
 46: $t26 := 42
 47: abort($t26)
 48: L10:
 49: $t27 := copy(c)
 50: $t28 := copy(d)
 51: return ($t27, $t28)
}


fun SmokeTest::borrow_global_mut_test(a: address) {
     var r: &mut SmokeTest::R
     var r2: &mut SmokeTest::R
     var $t3: address
     var $t4: &mut SmokeTest::R
     var $t5: &mut SmokeTest::R
     var $t6: address
     var $t7: &mut SmokeTest::R
     var $t8: &mut SmokeTest::R
  0: $t3 := copy(a)
  1: $t4 := borrow_global<SmokeTest::R>($t3)
  2: r := $t4
  3: $t5 := move(r)
  4: destroy($t5)
  5: $t6 := copy(a)
  6: $t7 := borrow_global<SmokeTest::R>($t6)
  7: r2 := $t7
  8: $t8 := move(r2)
  9: destroy($t8)
 10: return ()
}


fun SmokeTest::create_resource(sender: &signer) {
     var $t1: &signer
     var $t2: u64
     var $t3: SmokeTest::R
  0: $t1 := move(sender)
  1: $t2 := 1
  2: $t3 := pack SmokeTest::R($t2)
  3: move_to<SmokeTest::R>($t3, $t1)
  4: return ()
}


fun SmokeTest::create_resoure_generic(sender: &signer) {
     var $t1: &signer
     var $t2: u64
     var $t3: SmokeTest::G<u64>
  0: $t1 := move(sender)
  1: $t2 := 1
  2: $t3 := pack SmokeTest::G<u64>($t2)
  3: move_to<SmokeTest::G<u64>>($t3, $t1)
  4: return ()
}


fun SmokeTest::exists_resource(sender: &signer): bool {
     var $t1: &signer
     var $t2: address
     var $t3: bool
  0: $t1 := move(sender)
  1: $t2 := Signer::address_of($t1)
  2: $t3 := exists<SmokeTest::R>($t2)
  3: return $t3
}


fun SmokeTest::identity(a: SmokeTest::A, b: SmokeTest::B, c: SmokeTest::C): (SmokeTest::A, SmokeTest::B, SmokeTest::C) {
     var $t3: SmokeTest::A
     var $t4: SmokeTest::B
     var $t5: SmokeTest::C
  0: $t3 := move(a)
  1: $t4 := move(b)
  2: $t5 := move(c)
  3: return ($t3, $t4, $t5)
}


fun SmokeTest::move_from_addr(a: address) {
     var r: SmokeTest::R
     var $t2: address
     var $t3: SmokeTest::R
     var $t4: SmokeTest::R
     var $t5: u64
  0: $t2 := copy(a)
  1: $t3 := move_from<SmokeTest::R>($t2)
  2: r := $t3
  3: $t4 := move(r)
  4: $t5 := unpack SmokeTest::R($t4)
  5: destroy($t5)
  6: return ()
}


fun SmokeTest::move_from_addr_to_sender(sender: &signer, a: address) {
     var r: SmokeTest::R
     var x: u64
     var $t4: address
     var $t5: SmokeTest::R
     var $t6: SmokeTest::R
     var $t7: u64
     var $t8: &signer
     var $t9: u64
     var $t10: SmokeTest::R
  0: $t4 := copy(a)
  1: $t5 := move_from<SmokeTest::R>($t4)
  2: r := $t5
  3: $t6 := move(r)
  4: $t7 := unpack SmokeTest::R($t6)
  5: x := $t7
  6: $t8 := move(sender)
  7: $t9 := copy(x)
  8: $t10 := pack SmokeTest::R($t9)
  9: move_to<SmokeTest::R>($t10, $t8)
 10: return ()
}


fun SmokeTest::pack_A(a: address, va: u64): SmokeTest::A {
     var $t2: address
     var $t3: u64
     var $t4: SmokeTest::A
  0: $t2 := copy(a)
  1: $t3 := copy(va)
  2: $t4 := pack SmokeTest::A($t2, $t3)
  3: return $t4
}


fun SmokeTest::pack_B(a: address, va: u64, vb: u64): SmokeTest::B {
     var var_a: SmokeTest::A
     var var_b: SmokeTest::B
     var $t5: address
     var $t6: u64
     var $t7: SmokeTest::A
     var $t8: u64
     var $t9: SmokeTest::A
     var $t10: SmokeTest::B
     var $t11: SmokeTest::B
  0: $t5 := copy(a)
  1: $t6 := copy(va)
  2: $t7 := pack SmokeTest::A($t5, $t6)
  3: var_a := $t7
  4: $t8 := copy(vb)
  5: $t9 := move(var_a)
  6: $t10 := pack SmokeTest::B($t8, $t9)
  7: var_b := $t10
  8: $t11 := move(var_b)
  9: return $t11
}


fun SmokeTest::pack_C(a: address, va: u64, vb: u64, vc: u64): SmokeTest::C {
     var var_a: SmokeTest::A
     var var_b: SmokeTest::B
     var var_c: SmokeTest::C
     var $t7: address
     var $t8: u64
     var $t9: SmokeTest::A
     var $t10: u64
     var $t11: SmokeTest::A
     var $t12: SmokeTest::B
     var $t13: u64
     var $t14: SmokeTest::B
     var $t15: SmokeTest::C
     var $t16: SmokeTest::C
  0: $t7 := copy(a)
  1: $t8 := copy(va)
  2: $t9 := pack SmokeTest::A($t7, $t8)
  3: var_a := $t9
  4: $t10 := copy(vb)
  5: $t11 := move(var_a)
  6: $t12 := pack SmokeTest::B($t10, $t11)
  7: var_b := $t12
  8: $t13 := copy(vc)
  9: $t14 := move(var_b)
 10: $t15 := pack SmokeTest::C($t13, $t14)
 11: var_c := $t15
 12: $t16 := move(var_c)
 13: return $t16
}


fun SmokeTest::ref_A(a: address, b: bool): SmokeTest::A {
     var b_val_ref: &u64
     var b_var: u64
     var tmp#$4: SmokeTest::A
     var var_a: SmokeTest::A
     var var_a_ref: &SmokeTest::A
     var $t7: bool
     var $t8: address
     var $t9: u64
     var $t10: SmokeTest::A
     var $t11: address
     var $t12: u64
     var $t13: SmokeTest::A
     var $t14: SmokeTest::A
     var $t15: &SmokeTest::A
     var $t16: &SmokeTest::A
     var $t17: &u64
     var $t18: &u64
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: bool
     var $t23: u64
     var $t24: SmokeTest::A
  0: $t7 := copy(b)
  1: if ($t7) goto L0 else goto L1
  2: L1:
  3: goto L2
  4: L0:
  5: $t8 := copy(a)
  6: $t9 := 1
  7: $t10 := pack SmokeTest::A($t8, $t9)
  8: tmp#$4 := $t10
  9: goto L3
 10: L2:
 11: $t11 := copy(a)
 12: $t12 := 42
 13: $t13 := pack SmokeTest::A($t11, $t12)
 14: tmp#$4 := $t13
 15: goto L3
 16: L3:
 17: $t14 := move(tmp#$4)
 18: var_a := $t14
 19: $t15 := borrow_local(var_a)
 20: var_a_ref := $t15
 21: $t16 := move(var_a_ref)
 22: $t17 := borrow_field<SmokeTest::A>.val($t16)
 23: b_val_ref := $t17
 24: $t18 := move(b_val_ref)
 25: $t19 := read_ref($t18)
 26: b_var := $t19
 27: $t20 := copy(b_var)
 28: $t21 := 42
 29: $t22 := !=($t20, $t21)
 30: if ($t22) goto L4 else goto L5
 31: L5:
 32: goto L6
 33: L4:
 34: $t23 := 42
 35: abort($t23)
 36: L6:
 37: $t24 := move(var_a)
 38: return $t24
}


fun SmokeTest::unpack_A(a: address, va: u64): (address, u64) {
     var aa: address
     var v1: u64
     var var_a: SmokeTest::A
     var $t5: address
     var $t6: u64
     var $t7: SmokeTest::A
     var $t8: SmokeTest::A
     var $t9: address
     var $t10: u64
     var $t11: address
     var $t12: u64
  0: $t5 := copy(a)
  1: $t6 := copy(va)
  2: $t7 := pack SmokeTest::A($t5, $t6)
  3: var_a := $t7
  4: $t8 := move(var_a)
  5: ($t9, $t10) := unpack SmokeTest::A($t8)
  6: v1 := $t10
  7: aa := $t9
  8: $t11 := copy(aa)
  9: $t12 := copy(v1)
 10: return ($t11, $t12)
}


fun SmokeTest::unpack_B(a: address, va: u64, vb: u64): (address, u64, u64) {
     var aa: address
     var v1: u64
     var v2: u64
     var var_a: SmokeTest::A
     var var_b: SmokeTest::B
     var $t8: address
     var $t9: u64
     var $t10: SmokeTest::A
     var $t11: u64
     var $t12: SmokeTest::A
     var $t13: SmokeTest::B
     var $t14: SmokeTest::B
     var $t15: u64
     var $t16: SmokeTest::A
     var $t17: address
     var $t18: u64
     var $t19: address
     var $t20: u64
     var $t21: u64
  0: $t8 := copy(a)
  1: $t9 := copy(va)
  2: $t10 := pack SmokeTest::A($t8, $t9)
  3: var_a := $t10
  4: $t11 := copy(vb)
  5: $t12 := move(var_a)
  6: $t13 := pack SmokeTest::B($t11, $t12)
  7: var_b := $t13
  8: $t14 := move(var_b)
  9: ($t15, $t16) := unpack SmokeTest::B($t14)
 10: ($t17, $t18) := unpack SmokeTest::A($t16)
 11: v1 := $t18
 12: aa := $t17
 13: v2 := $t15
 14: $t19 := copy(aa)
 15: $t20 := copy(v1)
 16: $t21 := copy(v2)
 17: return ($t19, $t20, $t21)
}


fun SmokeTest::unpack_C(a: address, va: u64, vb: u64, vc: u64): (address, u64, u64, u64) {
     var aa: address
     var v1: u64
     var v2: u64
     var v3: u64
     var var_a: SmokeTest::A
     var var_b: SmokeTest::B
     var var_c: SmokeTest::C
     var $t11: address
     var $t12: u64
     var $t13: SmokeTest::A
     var $t14: u64
     var $t15: SmokeTest::A
     var $t16: SmokeTest::B
     var $t17: u64
     var $t18: SmokeTest::B
     var $t19: SmokeTest::C
     var $t20: SmokeTest::C
     var $t21: u64
     var $t22: SmokeTest::B
     var $t23: u64
     var $t24: SmokeTest::A
     var $t25: address
     var $t26: u64
     var $t27: address
     var $t28: u64
     var $t29: u64
     var $t30: u64
  0: $t11 := copy(a)
  1: $t12 := copy(va)
  2: $t13 := pack SmokeTest::A($t11, $t12)
  3: var_a := $t13
  4: $t14 := copy(vb)
  5: $t15 := move(var_a)
  6: $t16 := pack SmokeTest::B($t14, $t15)
  7: var_b := $t16
  8: $t17 := copy(vc)
  9: $t18 := move(var_b)
 10: $t19 := pack SmokeTest::C($t17, $t18)
 11: var_c := $t19
 12: $t20 := move(var_c)
 13: ($t21, $t22) := unpack SmokeTest::C($t20)
 14: ($t23, $t24) := unpack SmokeTest::B($t22)
 15: ($t25, $t26) := unpack SmokeTest::A($t24)
 16: v1 := $t26
 17: aa := $t25
 18: v2 := $t23
 19: v3 := $t21
 20: $t27 := copy(aa)
 21: $t28 := copy(v1)
 22: $t29 := copy(v2)
 23: $t30 := copy(v3)
 24: return ($t27, $t28, $t29, $t30)
}
