============ initial translation from Move ================

[variant baseline]
public intrinsic fun Vector::contains<#0>($t0|v: &vector<#0>, $t1|e: &#0): bool;


[variant baseline]
public intrinsic fun Vector::index_of<#0>($t0|v: &vector<#0>, $t1|e: &#0): (bool, u64);


[variant baseline]
public intrinsic fun Vector::append<#0>($t0|lhs: &mut vector<#0>, $t1|other: vector<#0>);


[variant baseline]
public native fun Vector::borrow<#0>($t0|v: &vector<#0>, $t1|i: u64): &#0;


[variant baseline]
public native fun Vector::borrow_mut<#0>($t0|v: &mut vector<#0>, $t1|i: u64): &mut #0;


[variant baseline]
public native fun Vector::destroy_empty<#0>($t0|v: vector<#0>);


[variant baseline]
public native fun Vector::empty<#0>(): vector<#0>;


[variant baseline]
public intrinsic fun Vector::is_empty<#0>($t0|v: &vector<#0>): bool;


[variant baseline]
public native fun Vector::length<#0>($t0|v: &vector<#0>): u64;


[variant baseline]
public native fun Vector::pop_back<#0>($t0|v: &mut vector<#0>): #0;


[variant baseline]
public native fun Vector::push_back<#0>($t0|v: &mut vector<#0>, $t1|e: #0);


[variant baseline]
public intrinsic fun Vector::remove<#0>($t0|v: &mut vector<#0>, $t1|i: u64): #0;


[variant baseline]
public intrinsic fun Vector::reverse<#0>($t0|v: &mut vector<#0>);


[variant baseline]
public fun Vector::singleton<#0>($t0|e: #0): vector<#0> {
     var $t1|v: vector<#0>
     var $t2: vector<#0>
     var $t3: &mut vector<#0>
     var $t4: #0
     var $t5: vector<#0>
  0: $t2 := Vector::empty<#0>()
  1: $t1 := $t2
  2: $t3 := borrow_local($t1)
  3: $t4 := move($t0)
  4: Vector::push_back<#0>($t3, $t4)
  5: $t5 := move($t1)
  6: return $t5
}


[variant baseline]
public native fun Vector::swap<#0>($t0|v: &mut vector<#0>, $t1|i: u64, $t2|j: u64);


[variant baseline]
public intrinsic fun Vector::swap_remove<#0>($t0|v: &mut vector<#0>, $t1|i: u64): #0;


[variant baseline]
public fun Signer::address_of($t0|s: &signer): address {
     var $t1: &signer
     var $t2: &address
     var $t3: address
  0: $t1 := move($t0)
  1: $t2 := Signer::borrow_address($t1)
  2: $t3 := read_ref($t2)
  3: return $t3
}


[variant baseline]
public native fun Signer::borrow_address($t0|s: &signer): &address;


[variant baseline]
public fun Diem::market_cap<#0>(): u128 {
     var $t0: address
     var $t1: &Diem::Info<#0>
     var $t2: &u128
     var $t3: u128
  0: $t0 := 0xa550c18
  1: $t1 := borrow_global<Diem::Info<#0>>($t0)
  2: $t2 := borrow_field<Diem::Info<#0>>.total_value($t1)
  3: $t3 := read_ref($t2)
  4: return $t3
}


[variant baseline]
public fun Diem::preburn<#0>($t0|preburn_ref: &mut Diem::Preburn<#0>, $t1|coin: Diem::T<#0>) {
     var $t2|coin_value: u64
     var $t3|market_cap: &mut Diem::Info<#0>
     var $t4: &Diem::T<#0>
     var $t5: u64
     var $t6: &mut Diem::Preburn<#0>
     var $t7: &mut vector<Diem::T<#0>>
     var $t8: Diem::T<#0>
     var $t9: address
     var $t10: &mut Diem::Info<#0>
     var $t11: &mut Diem::Info<#0>
     var $t12: &u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: &mut Diem::Info<#0>
     var $t17: &mut u64
  0: $t4 := borrow_local($t1)
  1: $t5 := Diem::value<#0>($t4)
  2: $t2 := $t5
  3: $t6 := move($t0)
  4: $t7 := borrow_field<Diem::Preburn<#0>>.requests($t6)
  5: $t8 := move($t1)
  6: Vector::push_back<Diem::T<#0>>($t7, $t8)
  7: $t9 := 0xa550c18
  8: $t10 := borrow_global<Diem::Info<#0>>($t9)
  9: $t3 := $t10
 10: $t11 := copy($t3)
 11: $t12 := borrow_field<Diem::Info<#0>>.preburn_value($t11)
 12: $t13 := read_ref($t12)
 13: $t14 := copy($t2)
 14: $t15 := +($t13, $t14)
 15: $t16 := move($t3)
 16: $t17 := borrow_field<Diem::Info<#0>>.preburn_value($t16)
 17: write_ref($t17, $t15)
 18: return ()
}


[variant baseline]
public fun Diem::preburn_to<#0>($t0|account: &signer, $t1|coin: Diem::T<#0>) {
     var $t2: &signer
     var $t3: address
     var $t4: &mut Diem::Preburn<#0>
     var $t5: Diem::T<#0>
  0: $t2 := move($t0)
  1: $t3 := Signer::address_of($t2)
  2: $t4 := borrow_global<Diem::Preburn<#0>>($t3)
  3: $t5 := move($t1)
  4: Diem::preburn<#0>($t4, $t5)
  5: return ()
}


[variant baseline]
public fun Diem::preburn_value<#0>(): u64 {
     var $t0: address
     var $t1: &Diem::Info<#0>
     var $t2: &u64
     var $t3: u64
  0: $t0 := 0xa550c18
  1: $t1 := borrow_global<Diem::Info<#0>>($t0)
  2: $t2 := borrow_field<Diem::Info<#0>>.preburn_value($t1)
  3: $t3 := read_ref($t2)
  4: return $t3
}


[variant baseline]
public fun Diem::value<#0>($t0|coin_ref: &Diem::T<#0>): u64 {
     var $t1: &Diem::T<#0>
     var $t2: &u64
     var $t3: u64
  0: $t1 := move($t0)
  1: $t2 := borrow_field<Diem::T<#0>>.value($t1)
  2: $t3 := read_ref($t2)
  3: return $t3
}
