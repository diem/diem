============ initial translation from Move ================

pub fun TestMutRefs::data_invariant(_x: &mut TestMutRefs::T) {
  0: return ()
}


pub fun TestMutRefs::decrement_invalid(x: &mut TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var $t2: &mut TestMutRefs::T
     var $t3: &u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: &mut TestMutRefs::T
     var $t8: &mut u64
     var $t9: address
     var $t10: &mut TestMutRefs::TSum
     var $t11: &mut TestMutRefs::TSum
     var $t12: &u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: &mut TestMutRefs::TSum
     var $t17: &mut u64
  0: $t2 := copy(x)
  1: $t3 := borrow_field<TestMutRefs::T>.value($t2)
  2: $t4 := read_ref($t3)
  3: $t5 := 1
  4: $t6 := -($t4, $t5)
  5: $t7 := move(x)
  6: $t8 := borrow_field<TestMutRefs::T>.value($t7)
  7: write_ref($t8, $t6)
  8: $t9 := 0x0
  9: $t10 := borrow_global<TestMutRefs::TSum>($t9)
 10: r := $t10
 11: $t11 := copy(r)
 12: $t12 := borrow_field<TestMutRefs::TSum>.sum($t11)
 13: $t13 := read_ref($t12)
 14: $t14 := 1
 15: $t15 := -($t13, $t14)
 16: $t16 := move(r)
 17: $t17 := borrow_field<TestMutRefs::TSum>.sum($t16)
 18: write_ref($t17, $t15)
 19: return ()
}


pub fun TestMutRefs::delete(x: TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var v: u64
     var $t3: address
     var $t4: &mut TestMutRefs::TSum
     var $t5: TestMutRefs::T
     var $t6: u64
     var $t7: &mut TestMutRefs::TSum
     var $t8: &u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: &mut TestMutRefs::TSum
     var $t13: &mut u64
  0: $t3 := 0x0
  1: $t4 := borrow_global<TestMutRefs::TSum>($t3)
  2: r := $t4
  3: $t5 := move(x)
  4: $t6 := unpack TestMutRefs::T($t5)
  5: v := $t6
  6: $t7 := copy(r)
  7: $t8 := borrow_field<TestMutRefs::TSum>.sum($t7)
  8: $t9 := read_ref($t8)
  9: $t10 := copy(v)
 10: $t11 := -($t9, $t10)
 11: $t12 := move(r)
 12: $t13 := borrow_field<TestMutRefs::TSum>.sum($t12)
 13: write_ref($t13, $t11)
 14: return ()
}


pub fun TestMutRefs::increment(x: &mut TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var $t2: &mut TestMutRefs::T
     var $t3: &u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: &mut TestMutRefs::T
     var $t8: &mut u64
     var $t9: address
     var $t10: &mut TestMutRefs::TSum
     var $t11: &mut TestMutRefs::TSum
     var $t12: &u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: &mut TestMutRefs::TSum
     var $t17: &mut u64
  0: $t2 := copy(x)
  1: $t3 := borrow_field<TestMutRefs::T>.value($t2)
  2: $t4 := read_ref($t3)
  3: $t5 := 1
  4: $t6 := +($t4, $t5)
  5: $t7 := move(x)
  6: $t8 := borrow_field<TestMutRefs::T>.value($t7)
  7: write_ref($t8, $t6)
  8: $t9 := 0x0
  9: $t10 := borrow_global<TestMutRefs::TSum>($t9)
 10: r := $t10
 11: $t11 := copy(r)
 12: $t12 := borrow_field<TestMutRefs::TSum>.sum($t11)
 13: $t13 := read_ref($t12)
 14: $t14 := 1
 15: $t15 := +($t13, $t14)
 16: $t16 := move(r)
 17: $t17 := borrow_field<TestMutRefs::TSum>.sum($t16)
 18: write_ref($t17, $t15)
 19: return ()
}


pub fun TestMutRefs::increment_invalid(x: &mut TestMutRefs::T) {
     var $t1: &mut TestMutRefs::T
     var $t2: &u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: &mut TestMutRefs::T
     var $t7: &mut u64
  0: $t1 := copy(x)
  1: $t2 := borrow_field<TestMutRefs::T>.value($t1)
  2: $t3 := read_ref($t2)
  3: $t4 := 1
  4: $t5 := +($t3, $t4)
  5: $t6 := move(x)
  6: $t7 := borrow_field<TestMutRefs::T>.value($t6)
  7: write_ref($t7, $t5)
  8: return ()
}


pub fun TestMutRefs::new(x: u64): TestMutRefs::T {
     var r: &mut TestMutRefs::TSum
     var $t2: address
     var $t3: &mut TestMutRefs::TSum
     var $t4: &mut TestMutRefs::TSum
     var $t5: &u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: &mut TestMutRefs::TSum
     var $t10: &mut u64
     var $t11: u64
     var $t12: TestMutRefs::T
  0: $t2 := 0x0
  1: $t3 := borrow_global<TestMutRefs::TSum>($t2)
  2: r := $t3
  3: $t4 := copy(r)
  4: $t5 := borrow_field<TestMutRefs::TSum>.sum($t4)
  5: $t6 := read_ref($t5)
  6: $t7 := copy(x)
  7: $t8 := +($t6, $t7)
  8: $t9 := move(r)
  9: $t10 := borrow_field<TestMutRefs::TSum>.sum($t9)
 10: write_ref($t10, $t8)
 11: $t11 := copy(x)
 12: $t12 := pack TestMutRefs::T($t11)
 13: return $t12
}


fun TestMutRefs::private_data_invariant_invalid(_x: &mut TestMutRefs::T) {
  0: return ()
}


fun TestMutRefs::private_decrement(x: &mut TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var $t2: &mut TestMutRefs::T
     var $t3: &u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: &mut TestMutRefs::T
     var $t8: &mut u64
     var $t9: address
     var $t10: &mut TestMutRefs::TSum
     var $t11: &mut TestMutRefs::TSum
     var $t12: &u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: &mut TestMutRefs::TSum
     var $t17: &mut u64
  0: $t2 := copy(x)
  1: $t3 := borrow_field<TestMutRefs::T>.value($t2)
  2: $t4 := read_ref($t3)
  3: $t5 := 1
  4: $t6 := -($t4, $t5)
  5: $t7 := move(x)
  6: $t8 := borrow_field<TestMutRefs::T>.value($t7)
  7: write_ref($t8, $t6)
  8: $t9 := 0x0
  9: $t10 := borrow_global<TestMutRefs::TSum>($t9)
 10: r := $t10
 11: $t11 := copy(r)
 12: $t12 := borrow_field<TestMutRefs::TSum>.sum($t11)
 13: $t13 := read_ref($t12)
 14: $t14 := 1
 15: $t15 := -($t13, $t14)
 16: $t16 := move(r)
 17: $t17 := borrow_field<TestMutRefs::TSum>.sum($t16)
 18: write_ref($t17, $t15)
 19: return ()
}


fun TestMutRefs::private_to_public_caller(r: &mut TestMutRefs::T) {
     var $t1: &mut TestMutRefs::T
  0: $t1 := move(r)
  1: TestMutRefs::increment($t1)
  2: return ()
}


fun TestMutRefs::private_to_public_caller_invalid_data_invariant() {
     var r: &mut TestMutRefs::T
     var x: TestMutRefs::T
     var $t2: u64
     var $t3: TestMutRefs::T
     var $t4: &mut TestMutRefs::T
     var $t5: &mut TestMutRefs::T
     var $t6: &mut TestMutRefs::T
  0: $t2 := 1
  1: $t3 := TestMutRefs::new($t2)
  2: x := $t3
  3: $t4 := borrow_local(x)
  4: r := $t4
  5: $t5 := copy(r)
  6: TestMutRefs::private_decrement($t5)
  7: $t6 := move(r)
  8: TestMutRefs::increment($t6)
  9: return ()
}


pub fun TestMutRefsUser::valid() {
     var x: TestMutRefs::T
     var $t1: u64
     var $t2: TestMutRefs::T
     var $t3: &mut TestMutRefs::T
     var $t4: TestMutRefs::T
  0: $t1 := 4
  1: $t2 := TestMutRefs::new($t1)
  2: x := $t2
  3: $t3 := borrow_local(x)
  4: TestMutRefs::increment($t3)
  5: $t4 := move(x)
  6: TestMutRefs::delete($t4)
  7: return ()
}

============ after pipeline `memory_instr` ================

pub fun TestMutRefs::data_invariant(_x: TestMutRefs::T): TestMutRefs::T {
     var $t1: TestMutRefs::T
     var $t2: &mut TestMutRefs::T
  0: $t1 := move(_x)
  1: $t2 := borrow_local($t1)
  2: return $t1
}


pub fun TestMutRefs::decrement_invalid(x: TestMutRefs::T): TestMutRefs::T {
     var r: &mut TestMutRefs::TSum
     var $t2: TestMutRefs::T
     var $t3: &mut TestMutRefs::T
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: &mut u64
     var $t8: address
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: &mut u64
  0: $t2 := move(x)
  1: $t3 := borrow_local($t2)
  2: unpack_ref($t3)
  3: $t4 := get_field<TestMutRefs::T>.value($t3)
  4: $t5 := 1
  5: $t6 := -($t4, $t5)
  6: $t7 := borrow_field<TestMutRefs::T>.value($t3)
  7: unpack_ref($t7)
  8: write_ref($t7, $t6)
  9: pack_ref($t7)
 10: write_back[Reference($t3)]($t7)
 11: pack_ref($t3)
 12: write_back[LocalRoot($t2)]($t3)
 13: $t8 := 0x0
 14: r := borrow_global<TestMutRefs::TSum>($t8)
 15: unpack_ref(r)
 16: $t9 := get_field<TestMutRefs::TSum>.sum(r)
 17: $t10 := 1
 18: $t11 := -($t9, $t10)
 19: $t12 := borrow_field<TestMutRefs::TSum>.sum(r)
 20: unpack_ref($t12)
 21: write_ref($t12, $t11)
 22: pack_ref($t12)
 23: write_back[Reference(r)]($t12)
 24: pack_ref(r)
 25: write_back[TestMutRefs::TSum](r)
 26: return $t2
}


pub fun TestMutRefs::delete(x: TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var v: u64
     var $t3: TestMutRefs::T
     var $t4: address
     var $t5: u64
     var $t6: u64
     var $t7: &mut u64
  0: $t3 := move(x)
  1: $t4 := 0x0
  2: r := borrow_global<TestMutRefs::TSum>($t4)
  3: unpack_ref(r)
  4: v := unpack TestMutRefs::T($t3)
  5: $t5 := get_field<TestMutRefs::TSum>.sum(r)
  6: $t6 := -($t5, v)
  7: $t7 := borrow_field<TestMutRefs::TSum>.sum(r)
  8: unpack_ref($t7)
  9: write_ref($t7, $t6)
 10: pack_ref($t7)
 11: write_back[Reference(r)]($t7)
 12: pack_ref(r)
 13: write_back[TestMutRefs::TSum](r)
 14: return ()
}


pub fun TestMutRefs::increment(x: TestMutRefs::T): TestMutRefs::T {
     var r: &mut TestMutRefs::TSum
     var $t2: TestMutRefs::T
     var $t3: &mut TestMutRefs::T
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: &mut u64
     var $t8: address
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: &mut u64
  0: $t2 := move(x)
  1: $t3 := borrow_local($t2)
  2: unpack_ref($t3)
  3: $t4 := get_field<TestMutRefs::T>.value($t3)
  4: $t5 := 1
  5: $t6 := +($t4, $t5)
  6: $t7 := borrow_field<TestMutRefs::T>.value($t3)
  7: unpack_ref($t7)
  8: write_ref($t7, $t6)
  9: pack_ref($t7)
 10: write_back[Reference($t3)]($t7)
 11: pack_ref($t3)
 12: write_back[LocalRoot($t2)]($t3)
 13: $t8 := 0x0
 14: r := borrow_global<TestMutRefs::TSum>($t8)
 15: unpack_ref(r)
 16: $t9 := get_field<TestMutRefs::TSum>.sum(r)
 17: $t10 := 1
 18: $t11 := +($t9, $t10)
 19: $t12 := borrow_field<TestMutRefs::TSum>.sum(r)
 20: unpack_ref($t12)
 21: write_ref($t12, $t11)
 22: pack_ref($t12)
 23: write_back[Reference(r)]($t12)
 24: pack_ref(r)
 25: write_back[TestMutRefs::TSum](r)
 26: return $t2
}


pub fun TestMutRefs::increment_invalid(x: TestMutRefs::T): TestMutRefs::T {
     var $t1: TestMutRefs::T
     var $t2: &mut TestMutRefs::T
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: &mut u64
  0: $t1 := move(x)
  1: $t2 := borrow_local($t1)
  2: unpack_ref($t2)
  3: $t3 := get_field<TestMutRefs::T>.value($t2)
  4: $t4 := 1
  5: $t5 := +($t3, $t4)
  6: $t6 := borrow_field<TestMutRefs::T>.value($t2)
  7: unpack_ref($t6)
  8: write_ref($t6, $t5)
  9: pack_ref($t6)
 10: write_back[Reference($t2)]($t6)
 11: pack_ref($t2)
 12: write_back[LocalRoot($t1)]($t2)
 13: return $t1
}


pub fun TestMutRefs::new(x: u64): TestMutRefs::T {
     var r: &mut TestMutRefs::TSum
     var $t2: u64
     var $t3: address
     var $t4: u64
     var $t5: u64
     var $t6: &mut u64
     var $t7: TestMutRefs::T
  0: $t2 := move(x)
  1: $t3 := 0x0
  2: r := borrow_global<TestMutRefs::TSum>($t3)
  3: unpack_ref(r)
  4: $t4 := get_field<TestMutRefs::TSum>.sum(r)
  5: $t5 := +($t4, $t2)
  6: $t6 := borrow_field<TestMutRefs::TSum>.sum(r)
  7: unpack_ref($t6)
  8: write_ref($t6, $t5)
  9: pack_ref($t6)
 10: write_back[Reference(r)]($t6)
 11: pack_ref(r)
 12: write_back[TestMutRefs::TSum](r)
 13: $t7 := pack TestMutRefs::T($t2)
 14: return $t7
}


fun TestMutRefs::private_data_invariant_invalid(_x: TestMutRefs::T): TestMutRefs::T {
     var $t1: TestMutRefs::T
     var $t2: &mut TestMutRefs::T
  0: $t1 := move(_x)
  1: $t2 := borrow_local($t1)
  2: return $t1
}


fun TestMutRefs::private_decrement(x: TestMutRefs::T): TestMutRefs::T {
     var r: &mut TestMutRefs::TSum
     var $t2: TestMutRefs::T
     var $t3: &mut TestMutRefs::T
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: &mut u64
     var $t8: address
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: &mut u64
  0: $t2 := move(x)
  1: $t3 := borrow_local($t2)
  2: $t4 := get_field<TestMutRefs::T>.value($t3)
  3: $t5 := 1
  4: $t6 := -($t4, $t5)
  5: $t7 := borrow_field<TestMutRefs::T>.value($t3)
  6: write_ref($t7, $t6)
  7: write_back[Reference($t3)]($t7)
  8: write_back[LocalRoot($t2)]($t3)
  9: $t8 := 0x0
 10: r := borrow_global<TestMutRefs::TSum>($t8)
 11: unpack_ref(r)
 12: $t9 := get_field<TestMutRefs::TSum>.sum(r)
 13: $t10 := 1
 14: $t11 := -($t9, $t10)
 15: $t12 := borrow_field<TestMutRefs::TSum>.sum(r)
 16: unpack_ref($t12)
 17: write_ref($t12, $t11)
 18: pack_ref($t12)
 19: write_back[Reference(r)]($t12)
 20: pack_ref(r)
 21: write_back[TestMutRefs::TSum](r)
 22: return $t2
}


fun TestMutRefs::private_to_public_caller(r: TestMutRefs::T): TestMutRefs::T {
     var $t1: TestMutRefs::T
     var $t2: &mut TestMutRefs::T
     var $t3: TestMutRefs::T
  0: $t1 := move(r)
  1: $t2 := borrow_local($t1)
  2: $t3 := read_ref($t2)
  3: $t3 := TestMutRefs::increment($t3)
  4: write_ref($t2, $t3)
  5: write_back[LocalRoot($t1)]($t2)
  6: return $t1
}


fun TestMutRefs::private_to_public_caller_invalid_data_invariant() {
     var r: &mut TestMutRefs::T
     var x: TestMutRefs::T
     var $t2: u64
     var $t3: TestMutRefs::T
  0: $t2 := 1
  1: x := TestMutRefs::new($t2)
  2: r := borrow_local(x)
  3: unpack_ref(r)
  4: $t3 := read_ref(r)
  5: $t3 := TestMutRefs::private_decrement($t3)
  6: write_ref(r, $t3)
  7: $t3 := read_ref(r)
  8: $t3 := TestMutRefs::increment($t3)
  9: write_ref(r, $t3)
 10: pack_ref(r)
 11: write_back[LocalRoot(x)](r)
 12: return ()
}


pub fun TestMutRefsUser::valid() {
     var x: TestMutRefs::T
     var $t1: u64
     var $t2: &mut TestMutRefs::T
     var $t3: TestMutRefs::T
  0: $t1 := 4
  1: x := TestMutRefs::new($t1)
  2: $t2 := borrow_local(x)
  3: unpack_ref($t2)
  4: $t3 := read_ref($t2)
  5: $t3 := TestMutRefs::increment($t3)
  6: write_ref($t2, $t3)
  7: pack_ref($t2)
  8: write_back[LocalRoot(x)]($t2)
  9: TestMutRefs::delete(x)
 10: return ()
}
