============ initial translation from Move ================

[variant baseline]
public fun A::mutate_at($t0|addr: address) {
     var $t1|s: &mut A::S
     var $t2: address
     var $t3: &mut A::S
     var $t4: u64
     var $t5: &mut A::S
     var $t6: &mut u64
  0: $t2 := copy($t0)
  1: $t3 := borrow_global<A::S>($t2)
  2: $t1 := $t3
  3: $t4 := 2
  4: $t5 := move($t1)
  5: $t6 := borrow_field<A::S>.x($t5)
  6: write_ref($t6, $t4)
  7: return ()
}


[variant baseline]
public fun A::read_at($t0|addr: address): u64 {
     var $t1|s: &A::S
     var $t2: address
     var $t3: &A::S
     var $t4: &A::S
     var $t5: &u64
     var $t6: u64
  0: $t2 := copy($t0)
  1: $t3 := borrow_global<A::S>($t2)
  2: $t1 := $t3
  3: $t4 := move($t1)
  4: $t5 := borrow_field<A::S>.x($t4)
  5: $t6 := read_ref($t5)
  6: return $t6
}


[variant baseline]
public fun B::move_from_test_incorrect($t0|addr1: address, $t1|addr2: address): B::T {
     var $t2|v: B::T
     var $t3|x0: u64
     var $t4|x1: u64
     var $t5: address
     var $t6: u64
     var $t7: address
     var $t8: B::T
     var $t9: address
     var $t10: u64
     var $t11: B::T
  0: $t5 := copy($t1)
  1: $t6 := A::read_at($t5)
  2: $t3 := $t6
  3: $t7 := copy($t0)
  4: $t8 := move_from<B::T>($t7)
  5: $t2 := $t8
  6: $t9 := copy($t1)
  7: $t10 := A::read_at($t9)
  8: $t4 := $t10
  9: assert Eq<u64>($t3, $t4)
 10: $t11 := move($t2)
 11: return $t11
}


[variant baseline]
public fun B::move_to_test_incorrect($t0|account: &signer, $t1|addr2: address) {
     var $t2|x0: u64
     var $t3|x1: u64
     var $t4: address
     var $t5: u64
     var $t6: &signer
     var $t7: u64
     var $t8: B::T
     var $t9: address
     var $t10: u64
  0: $t4 := copy($t1)
  1: $t5 := A::read_at($t4)
  2: $t2 := $t5
  3: $t6 := move($t0)
  4: $t7 := 2
  5: $t8 := pack B::T($t7)
  6: move_to<B::T>($t8, $t6)
  7: $t9 := copy($t1)
  8: $t10 := A::read_at($t9)
  9: $t3 := $t10
 10: assert Eq<u64>($t2, $t3)
 11: return ()
}


[variant baseline]
public fun B::mutate_S_test1_incorrect($t0|addr1: address, $t1|addr2: address) {
     var $t2|x0: u64
     var $t3|x1: u64
     var $t4: address
     var $t5: u64
     var $t6: address
     var $t7: address
     var $t8: u64
  0: $t4 := copy($t1)
  1: $t5 := A::read_at($t4)
  2: $t2 := $t5
  3: $t6 := copy($t0)
  4: A::mutate_at($t6)
  5: $t7 := copy($t1)
  6: $t8 := A::read_at($t7)
  7: $t3 := $t8
  8: assert Eq<u64>($t2, $t3)
  9: return ()
}


[variant baseline]
public fun B::mutate_S_test2_incorrect($t0|addr: address) {
     var $t1|x0: u64
     var $t2|x1: u64
     var $t3: address
     var $t4: u64
     var $t5: address
     var $t6: address
     var $t7: u64
  0: $t3 := copy($t0)
  1: $t4 := A::read_at($t3)
  2: $t1 := $t4
  3: $t5 := copy($t0)
  4: A::mutate_at($t5)
  5: $t6 := copy($t0)
  6: $t7 := A::read_at($t6)
  7: $t2 := $t7
  8: assert Eq<u64>($t1, $t2)
  9: return ()
}


[variant baseline]
public fun B::mutate_at_test_incorrect($t0|addr1: address, $t1|addr2: address) {
     var $t2|t: &mut B::T
     var $t3|x0: u64
     var $t4|x1: u64
     var $t5: address
     var $t6: u64
     var $t7: address
     var $t8: &mut B::T
     var $t9: u64
     var $t10: &mut B::T
     var $t11: &mut u64
     var $t12: address
     var $t13: u64
  0: $t5 := copy($t1)
  1: $t6 := A::read_at($t5)
  2: $t3 := $t6
  3: $t7 := copy($t0)
  4: $t8 := borrow_global<B::T>($t7)
  5: $t2 := $t8
  6: $t9 := 2
  7: $t10 := move($t2)
  8: $t11 := borrow_field<B::T>.x($t10)
  9: write_ref($t11, $t9)
 10: $t12 := copy($t1)
 11: $t13 := A::read_at($t12)
 12: $t4 := $t13
 13: assert Eq<u64>($t3, $t4)
 14: return ()
}

============ after pipeline `spec_instrumentation` ================

[variant verification]
public fun A::mutate_at($t0|addr: address) {
     var $t1|s: &mut A::S
     var $t2: &mut A::S
     var $t3: num
     var $t4: u64
     var $t5: &mut u64
  0: assume WellFormed($t0)
  1: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  2: assume CanModify<A::S>($t0)
  3: @1 := save_mem(A::S)
     # VC: caller does not have permission to modify `A::S` at given address at tests/spec_instrumentation/modifies.move:18:17+17
  4: assert CanModify<A::S>($t0)
  5: $t2 := borrow_global<A::S>($t0) on_abort goto 15 with $t3
  6: $t4 := 2
  7: $t5 := borrow_field<A::S>.x($t2)
  8: write_ref($t5, $t4)
  9: write_back[Reference($t2).x]($t5)
 10: write_back[A::S@]($t2)
 11: label L1
     # VC: function does not abort under this condition at tests/spec_instrumentation/modifies.move:24:9+27
 12: assert Not(Not(exists[@1]<A::S>($t0)))
     # VC: post-condition does not hold at tests/spec_instrumentation/modifies.move:23:9+31
 13: assert Eq<u64>(select A::S.x(global<A::S>($t0)), 2)
 14: return ()
 15: label L2
     # VC: abort not covered by any of the `aborts_if` clauses at tests/spec_instrumentation/modifies.move:21:5+166
 16: assert Not(exists[@1]<A::S>($t0))
 17: abort($t3)
}


[variant verification]
public fun A::read_at($t0|addr: address): u64 {
     var $t1|s: A::S
     var $t2: A::S
     var $t3: num
     var $t4: u64
  0: assume WellFormed($t0)
  1: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  2: @0 := save_mem(A::S)
  3: $t2 := get_global<A::S>($t0) on_abort goto 9 with $t3
  4: $t4 := get_field<A::S>.x($t2)
  5: label L1
     # VC: function does not abort under this condition at tests/spec_instrumentation/modifies.move:13:9+27
  6: assert Not(Not(exists[@0]<A::S>($t0)))
     # VC: post-condition does not hold at tests/spec_instrumentation/modifies.move:14:9+36
  7: assert Eq<u64>($t4, select A::S.x(global<A::S>($t0)))
  8: return $t4
  9: label L2
     # VC: abort not covered by any of the `aborts_if` clauses at tests/spec_instrumentation/modifies.move:11:5+135
 10: assert Not(exists[@0]<A::S>($t0))
 11: abort($t3)
}


[variant verification]
public fun B::move_from_test_incorrect($t0|addr1: address, $t1|addr2: address): B::T {
     var $t2|v: B::T
     var $t3|x0: u64
     var $t4|x1: u64
     var $t5: bool
     var $t6: num
     var $t7: u64
     var $t8: B::T
     var $t9: bool
     var $t10: u64
  0: assume WellFormed($t0)
  1: assume WellFormed($t1)
  2: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  3: assume forall $rsc: ResourceDomain<B::T>(): WellFormed($rsc)
  4: assume CanModify<B::T>($t1)
     # >> opaque call: $t5 := A::read_at($t1)
  5: nop
  6: assume Identical($t5, Not(exists<A::S>($t1)))
  7: if ($t5) goto 8 else goto 11
  8: label L4
  9: trace_abort($t6)
 10: goto 30
 11: label L3
 12: assume WellFormed($t7)
 13: assume Eq<u64>($t7, select A::S.x(global<A::S>($t1)))
     # << opaque call: $t5 := A::read_at($t1)
 14: nop
     # VC: caller does not have permission to modify `B::T` at given address at tests/spec_instrumentation/modifies.move:65:17+9
 15: assert CanModify<B::T>($t0)
 16: $t8 := move_from<B::T>($t0) on_abort goto 30 with $t6
     # >> opaque call: $t7 := A::read_at($t1)
 17: nop
 18: assume Identical($t9, Not(exists<A::S>($t1)))
 19: if ($t9) goto 20 else goto 23
 20: label L6
 21: trace_abort($t6)
 22: goto 30
 23: label L5
 24: assume WellFormed($t10)
 25: assume Eq<u64>($t10, select A::S.x(global<A::S>($t1)))
     # << opaque call: $t7 := A::read_at($t1)
 26: nop
 27: assert Eq<u64>($t7, $t10)
 28: label L1
 29: return $t8
 30: label L2
 31: abort($t6)
}


[variant verification]
public fun B::move_to_test_incorrect($t0|account: signer, $t1|addr2: address) {
     var $t2|x0: u64
     var $t3|x1: u64
     var $t4: bool
     var $t5: num
     var $t6: u64
     var $t7: u64
     var $t8: B::T
     var $t9: bool
     var $t10: u64
  0: assume WellFormed($t0)
  1: assume WellFormed($t1)
  2: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  3: assume forall $rsc: ResourceDomain<B::T>(): WellFormed($rsc)
  4: assume CanModify<B::T>($t1)
     # >> opaque call: $t4 := A::read_at($t1)
  5: nop
  6: assume Identical($t4, Not(exists<A::S>($t1)))
  7: if ($t4) goto 8 else goto 11
  8: label L4
  9: trace_abort($t5)
 10: goto 32
 11: label L3
 12: assume WellFormed($t6)
 13: assume Eq<u64>($t6, select A::S.x(global<A::S>($t1)))
     # << opaque call: $t4 := A::read_at($t1)
 14: nop
 15: $t7 := 2
 16: $t8 := pack B::T($t7)
     # VC: caller does not have permission to modify `B::T` at given address at tests/spec_instrumentation/modifies.move:52:9+7
 17: assert CanModify<B::T>($t0)
 18: move_to<B::T>($t8, $t0) on_abort goto 32 with $t5
     # >> opaque call: $t7 := A::read_at($t1)
 19: nop
 20: assume Identical($t9, Not(exists<A::S>($t1)))
 21: if ($t9) goto 22 else goto 25
 22: label L6
 23: trace_abort($t5)
 24: goto 32
 25: label L5
 26: assume WellFormed($t10)
 27: assume Eq<u64>($t10, select A::S.x(global<A::S>($t1)))
     # << opaque call: $t7 := A::read_at($t1)
 28: nop
 29: assert Eq<u64>($t6, $t10)
 30: label L1
 31: return ()
 32: label L2
 33: abort($t5)
}


[variant verification]
public fun B::mutate_S_test1_incorrect($t0|addr1: address, $t1|addr2: address) {
     var $t2|x0: u64
     var $t3|x1: u64
     var $t4: bool
     var $t5: num
     var $t6: u64
     var $t7: bool
     var $t8: bool
     var $t9: u64
  0: assume WellFormed($t0)
  1: assume WellFormed($t1)
  2: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  3: assume Neq<address>($t0, $t1)
  4: assume CanModify<A::S>($t1)
     # >> opaque call: $t4 := A::read_at($t1)
  5: nop
  6: assume Identical($t4, Not(exists<A::S>($t1)))
  7: if ($t4) goto 8 else goto 11
  8: label L4
  9: trace_abort($t5)
 10: goto 39
 11: label L3
 12: assume WellFormed($t6)
 13: assume Eq<u64>($t6, select A::S.x(global<A::S>($t1)))
     # << opaque call: $t4 := A::read_at($t1)
 14: nop
     # >> opaque call: A::mutate_at($t0)
 15: nop
     # VC: caller does not have permission to modify `A::S` at given address at tests/spec_instrumentation/modifies.move:79:9+19
 16: assert CanModify<A::S>($t0)
 17: assume Identical($t7, Not(exists<A::S>($t0)))
 18: if ($t7) goto 19 else goto 22
 19: label L6
 20: trace_abort($t5)
 21: goto 39
 22: label L5
 23: modifies global<A::S>($t0)
 24: assume Eq<u64>(select A::S.x(global<A::S>($t0)), 2)
     # << opaque call: A::mutate_at($t0)
 25: nop
     # >> opaque call: $t5 := A::read_at($t1)
 26: nop
 27: assume Identical($t8, Not(exists<A::S>($t1)))
 28: if ($t8) goto 29 else goto 32
 29: label L8
 30: trace_abort($t5)
 31: goto 39
 32: label L7
 33: assume WellFormed($t9)
 34: assume Eq<u64>($t9, select A::S.x(global<A::S>($t1)))
     # << opaque call: $t5 := A::read_at($t1)
 35: nop
 36: assert Eq<u64>($t6, $t9)
 37: label L1
 38: return ()
 39: label L2
 40: abort($t5)
}


[variant verification]
public fun B::mutate_S_test2_incorrect($t0|addr: address) {
     var $t1|x0: u64
     var $t2|x1: u64
     var $t3: bool
     var $t4: num
     var $t5: u64
     var $t6: bool
     var $t7: bool
     var $t8: u64
  0: assume WellFormed($t0)
  1: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  2: assume CanModify<A::S>($t0)
     # >> opaque call: $t3 := A::read_at($t0)
  3: nop
  4: assume Identical($t3, Not(exists<A::S>($t0)))
  5: if ($t3) goto 6 else goto 9
  6: label L4
  7: trace_abort($t4)
  8: goto 37
  9: label L3
 10: assume WellFormed($t5)
 11: assume Eq<u64>($t5, select A::S.x(global<A::S>($t0)))
     # << opaque call: $t3 := A::read_at($t0)
 12: nop
     # >> opaque call: A::mutate_at($t0)
 13: nop
     # VC: caller does not have permission to modify `A::S` at given address at tests/spec_instrumentation/modifies.move:92:9+18
 14: assert CanModify<A::S>($t0)
 15: assume Identical($t6, Not(exists<A::S>($t0)))
 16: if ($t6) goto 17 else goto 20
 17: label L6
 18: trace_abort($t4)
 19: goto 37
 20: label L5
 21: modifies global<A::S>($t0)
 22: assume Eq<u64>(select A::S.x(global<A::S>($t0)), 2)
     # << opaque call: A::mutate_at($t0)
 23: nop
     # >> opaque call: $t4 := A::read_at($t0)
 24: nop
 25: assume Identical($t7, Not(exists<A::S>($t0)))
 26: if ($t7) goto 27 else goto 30
 27: label L8
 28: trace_abort($t4)
 29: goto 37
 30: label L7
 31: assume WellFormed($t8)
 32: assume Eq<u64>($t8, select A::S.x(global<A::S>($t0)))
     # << opaque call: $t4 := A::read_at($t0)
 33: nop
 34: assert Eq<u64>($t5, $t8)
 35: label L1
 36: return ()
 37: label L2
 38: abort($t4)
}


[variant verification]
public fun B::mutate_at_test_incorrect($t0|addr1: address, $t1|addr2: address) {
     var $t2|t: &mut B::T
     var $t3|x0: u64
     var $t4|x1: u64
     var $t5: bool
     var $t6: num
     var $t7: u64
     var $t8: &mut B::T
     var $t9: u64
     var $t10: &mut u64
     var $t11: bool
     var $t12: u64
  0: assume WellFormed($t0)
  1: assume WellFormed($t1)
  2: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  3: assume forall $rsc: ResourceDomain<B::T>(): WellFormed($rsc)
  4: assume CanModify<B::T>($t1)
     # >> opaque call: $t5 := A::read_at($t1)
  5: nop
  6: assume Identical($t5, Not(exists<A::S>($t1)))
  7: if ($t5) goto 8 else goto 11
  8: label L4
  9: trace_abort($t6)
 10: goto 35
 11: label L3
 12: assume WellFormed($t7)
 13: assume Eq<u64>($t7, select A::S.x(global<A::S>($t1)))
     # << opaque call: $t5 := A::read_at($t1)
 14: nop
     # VC: caller does not have permission to modify `B::T` at given address at tests/spec_instrumentation/modifies.move:38:17+17
 15: assert CanModify<B::T>($t0)
 16: $t8 := borrow_global<B::T>($t0) on_abort goto 35 with $t6
 17: $t9 := 2
 18: $t10 := borrow_field<B::T>.x($t8)
 19: write_ref($t10, $t9)
 20: write_back[Reference($t8).x]($t10)
 21: write_back[B::T@]($t8)
     # >> opaque call: $t9 := A::read_at($t1)
 22: nop
 23: assume Identical($t11, Not(exists<A::S>($t1)))
 24: if ($t11) goto 25 else goto 28
 25: label L6
 26: trace_abort($t6)
 27: goto 35
 28: label L5
 29: assume WellFormed($t12)
 30: assume Eq<u64>($t12, select A::S.x(global<A::S>($t1)))
     # << opaque call: $t9 := A::read_at($t1)
 31: nop
 32: assert Eq<u64>($t7, $t12)
 33: label L1
 34: return ()
 35: label L2
 36: abort($t6)
}



==== spec-instrumenter input specs ====

fun A::mutate_at[baseline[
spec {
  ensures Eq<u64>(select A::S.x(global<A::S>($t0)), 2);
  aborts_if Not(exists<A::S>($t0));
  modifies global<A::S>($t0);
}

fun A::mutate_at[verification[
spec {
  ensures Eq<u64>(select A::S.x(global<A::S>($t0)), 2);
  aborts_if Not(exists<A::S>($t0));
  modifies global<A::S>($t0);
}

fun A::read_at[baseline[
spec {
  aborts_if Not(exists<A::S>($t0));
  ensures Eq<u64>(result0(), select A::S.x(global<A::S>($t0)));
}

fun A::read_at[verification[
spec {
  aborts_if Not(exists<A::S>($t0));
  ensures Eq<u64>(result0(), select A::S.x(global<A::S>($t0)));
}

fun B::move_from_test_incorrect[baseline[
spec {
  modifies global<B::T>($t1);
}

fun B::move_from_test_incorrect[verification[
spec {
  modifies global<B::T>($t1);
}

fun B::move_to_test_incorrect[baseline[
spec {
  modifies global<B::T>($t1);
}

fun B::move_to_test_incorrect[verification[
spec {
  modifies global<B::T>($t1);
}

fun B::mutate_S_test1_incorrect[baseline[
spec {
  requires Neq<address>($t0, $t1);
  modifies global<A::S>($t1);
}

fun B::mutate_S_test1_incorrect[verification[
spec {
  requires Neq<address>($t0, $t1);
  modifies global<A::S>($t1);
}

fun B::mutate_S_test2_incorrect[baseline[
spec {
  modifies global<A::S>($t0);
}

fun B::mutate_S_test2_incorrect[verification[
spec {
  modifies global<A::S>($t0);
}

fun B::mutate_at_test_incorrect[baseline[
spec {
  modifies global<B::T>($t1);
}

fun B::mutate_at_test_incorrect[verification[
spec {
  modifies global<B::T>($t1);
}
