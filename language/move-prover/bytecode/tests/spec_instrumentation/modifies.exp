============ initial translation from Move ================

[variant baseline]
pub fun A::mutate_at($t0|addr: address) {
     var $t1|s: &mut A::S
     var $t2: address
     var $t3: &mut A::S
     var $t4: u64
     var $t5: &mut A::S
     var $t6: &mut u64
  0: $t2 := copy($t0)
  1: $t3 := borrow_global<A::S>($t2)
  2: $t1 := $t3
  3: $t4 := 2
  4: $t5 := move($t1)
  5: $t6 := borrow_field<A::S>.x($t5)
  6: write_ref($t6, $t4)
  7: return ()
}


[variant baseline]
pub fun A::read_at($t0|addr: address): u64 {
     var $t1|s: &A::S
     var $t2: address
     var $t3: &A::S
     var $t4: &A::S
     var $t5: &u64
     var $t6: u64
  0: $t2 := copy($t0)
  1: $t3 := borrow_global<A::S>($t2)
  2: $t1 := $t3
  3: $t4 := move($t1)
  4: $t5 := borrow_field<A::S>.x($t4)
  5: $t6 := read_ref($t5)
  6: return $t6
}


[variant baseline]
pub fun B::move_from_test_incorrect($t0|addr1: address, $t1|addr2: address): B::T {
     var $t2|v: B::T
     var $t3|x0: u64
     var $t4|x1: u64
     var $t5: address
     var $t6: u64
     var $t7: address
     var $t8: B::T
     var $t9: address
     var $t10: u64
     var $t11: B::T
  0: $t5 := copy($t1)
  1: $t6 := A::read_at($t5)
  2: $t3 := $t6
  3: $t7 := copy($t0)
  4: $t8 := move_from<B::T>($t7)
  5: $t2 := $t8
  6: $t9 := copy($t1)
  7: $t10 := A::read_at($t9)
  8: $t4 := $t10
  9: assert Eq<u64>($t3, $t4)
 10: $t11 := move($t2)
 11: return $t11
}


[variant baseline]
pub fun B::move_to_test_incorrect($t0|account: &signer, $t1|addr2: address) {
     var $t2|x0: u64
     var $t3|x1: u64
     var $t4: address
     var $t5: u64
     var $t6: &signer
     var $t7: u64
     var $t8: B::T
     var $t9: address
     var $t10: u64
  0: $t4 := copy($t1)
  1: $t5 := A::read_at($t4)
  2: $t2 := $t5
  3: $t6 := move($t0)
  4: $t7 := 2
  5: $t8 := pack B::T($t7)
  6: move_to<B::T>($t8, $t6)
  7: $t9 := copy($t1)
  8: $t10 := A::read_at($t9)
  9: $t3 := $t10
 10: assert Eq<u64>($t2, $t3)
 11: return ()
}


[variant baseline]
pub fun B::mutate_S_test1_incorrect($t0|addr1: address, $t1|addr2: address) {
     var $t2|x0: u64
     var $t3|x1: u64
     var $t4: address
     var $t5: u64
     var $t6: address
     var $t7: address
     var $t8: u64
  0: $t4 := copy($t1)
  1: $t5 := A::read_at($t4)
  2: $t2 := $t5
  3: $t6 := copy($t0)
  4: A::mutate_at($t6)
  5: $t7 := copy($t1)
  6: $t8 := A::read_at($t7)
  7: $t3 := $t8
  8: assert Eq<u64>($t2, $t3)
  9: return ()
}


[variant baseline]
pub fun B::mutate_S_test2_incorrect($t0|addr: address) {
     var $t1|x0: u64
     var $t2|x1: u64
     var $t3: address
     var $t4: u64
     var $t5: address
     var $t6: address
     var $t7: u64
  0: $t3 := copy($t0)
  1: $t4 := A::read_at($t3)
  2: $t1 := $t4
  3: $t5 := copy($t0)
  4: A::mutate_at($t5)
  5: $t6 := copy($t0)
  6: $t7 := A::read_at($t6)
  7: $t2 := $t7
  8: assert Eq<u64>($t1, $t2)
  9: return ()
}


[variant baseline]
pub fun B::mutate_at_test_incorrect($t0|addr1: address, $t1|addr2: address) {
     var $t2|t: &mut B::T
     var $t3|x0: u64
     var $t4|x1: u64
     var $t5: address
     var $t6: u64
     var $t7: address
     var $t8: &mut B::T
     var $t9: u64
     var $t10: &mut B::T
     var $t11: &mut u64
     var $t12: address
     var $t13: u64
  0: $t5 := copy($t1)
  1: $t6 := A::read_at($t5)
  2: $t3 := $t6
  3: $t7 := copy($t0)
  4: $t8 := borrow_global<B::T>($t7)
  5: $t2 := $t8
  6: $t9 := 2
  7: $t10 := move($t2)
  8: $t11 := borrow_field<B::T>.x($t10)
  9: write_ref($t11, $t9)
 10: $t12 := copy($t1)
 11: $t13 := A::read_at($t12)
 12: $t4 := $t13
 13: assert Eq<u64>($t3, $t4)
 14: return ()
}

============ after pipeline `spec_instrumentation` ================

[variant verification]
pub fun A::mutate_at($t0|addr: address) {
     var $t1|s: &mut A::S
     var $t2: num
     var $t3: u64
     var $t4: &mut u64
     # VC: `abort not covered by any of the `aborts_if` clauses` at tests/spec_instrumentation/modifies.move:17:5+115
  0: assume WellFormed($t0)
  1: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  2: @1 := save_mem(A::S)
     # VC: `caller does not have permission to modify `A::S` at given address` at tests/spec_instrumentation/modifies.move:18:17+17
  3: assert CanModify<A::S>($t0)
  4: $t1 := borrow_global<A::S>($t0) on_abort goto 14 with $t2
  5: $t3 := 2
  6: $t4 := borrow_field<A::S>.x($t1)
  7: write_ref($t4, $t3)
  8: write_back[Reference($t1)]($t4)
  9: write_back[A::S]($t1)
 10: label L1
     # VC: `function does not abort under this condition` at tests/spec_instrumentation/modifies.move:24:9+27
 11: assert Not(Not(exists[@1]<A::S>($t0)))
     # VC: `post-condition does not hold` at tests/spec_instrumentation/modifies.move:23:9+31
 12: assert Eq<u64>(select A::S.x(global<A::S>($t0)), 2)
 13: return ()
 14: label L2
 15: assert Not(exists[@1]<A::S>($t0))
 16: abort($t2)
}


[variant verification]
pub fun A::read_at($t0|addr: address): u64 {
     var $t1|s: A::S
     var $t2: num
     var $t3: u64
  0: assume WellFormed($t0)
  1: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  2: @0 := save_mem(A::S)
  3: $t1 := get_global<A::S>($t0) on_abort goto 9 with $t2
  4: $t3 := get_field<A::S>.x($t1)
  5: label L1
     # VC: `function does not abort under this condition` at tests/spec_instrumentation/modifies.move:13:9+27
  6: assert Not(Not(exists[@0]<A::S>($t0)))
     # VC: `post-condition does not hold` at tests/spec_instrumentation/modifies.move:14:9+36
  7: assert Eq<u64>($t3, select A::S.x(global<A::S>($t0)))
  8: return $t3
  9: label L2
     # VC: `abort not covered by any of the `aborts_if` clauses` at tests/spec_instrumentation/modifies.move:7:5+109
 10: assert Not(exists[@0]<A::S>($t0))
 11: abort($t2)
}


[variant verification]
pub fun B::move_from_test_incorrect($t0|addr1: address, $t1|addr2: address): B::T {
     var $t2|v: B::T
     var $t3|x0: u64
     var $t4|x1: u64
     var $t5: bool
     var $t6: num
     var $t7: bool
  0: assume WellFormed($t0)
  1: assume WellFormed($t1)
  2: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  3: assume forall $rsc: ResourceDomain<B::T>(): WellFormed($rsc)
     # original call of opaque function: $t3 := A::read_at($t6)
  4: assume Eq($t5, Not(exists<A::S>($t1)))
  5: if ($t5) goto 6 else goto 9
  6: label L4
  7: trace_abort($t6)
  8: goto 25
  9: label L3
 10: assume Eq<u64>($t3, select A::S.x(global<A::S>($t1)))
 11: assume WellFormed($t3)
     # VC: `caller does not have permission to modify `B::T` at given address` at tests/spec_instrumentation/modifies.move:65:17+9
 12: assert CanModify<B::T>($t0)
 13: $t2 := move_from<B::T>($t0) on_abort goto 25 with $t6
     # original call of opaque function: $t4 := A::read_at($t6)
 14: assume Eq($t7, Not(exists<A::S>($t1)))
 15: if ($t7) goto 16 else goto 19
 16: label L6
 17: trace_abort($t6)
 18: goto 25
 19: label L5
 20: assume Eq<u64>($t4, select A::S.x(global<A::S>($t1)))
 21: assume WellFormed($t4)
 22: assert Eq<u64>($t3, $t4)
 23: label L1
 24: return $t2
 25: label L2
 26: abort($t6)
}


[variant verification]
pub fun B::move_to_test_incorrect($t0|account: signer, $t1|addr2: address) {
     var $t2|x0: u64
     var $t3|x1: u64
     var $t4: bool
     var $t5: num
     var $t6: u64
     var $t7: B::T
     var $t8: bool
  0: assume WellFormed($t0)
  1: assume WellFormed($t1)
  2: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  3: assume forall $rsc: ResourceDomain<B::T>(): WellFormed($rsc)
     # original call of opaque function: $t2 := A::read_at($t5)
  4: assume Eq($t4, Not(exists<A::S>($t1)))
  5: if ($t4) goto 6 else goto 9
  6: label L4
  7: trace_abort($t5)
  8: goto 27
  9: label L3
 10: assume Eq<u64>($t2, select A::S.x(global<A::S>($t1)))
 11: assume WellFormed($t2)
 12: $t6 := 2
 13: $t7 := pack B::T($t6)
     # VC: `caller does not have permission to modify `B::T` at given address` at tests/spec_instrumentation/modifies.move:52:9+7
 14: assert CanModify<B::T>($t0)
 15: move_to<B::T>($t7, $t0) on_abort goto 27 with $t5
     # original call of opaque function: $t3 := A::read_at($t5)
 16: assume Eq($t8, Not(exists<A::S>($t1)))
 17: if ($t8) goto 18 else goto 21
 18: label L6
 19: trace_abort($t5)
 20: goto 27
 21: label L5
 22: assume Eq<u64>($t3, select A::S.x(global<A::S>($t1)))
 23: assume WellFormed($t3)
 24: assert Eq<u64>($t2, $t3)
 25: label L1
 26: return ()
 27: label L2
 28: abort($t5)
}


[variant verification]
pub fun B::mutate_S_test1_incorrect($t0|addr1: address, $t1|addr2: address) {
     var $t2|x0: u64
     var $t3|x1: u64
     var $t4: bool
     var $t5: num
     var $t6: bool
     var $t7: bool
  0: assume WellFormed($t0)
  1: assume WellFormed($t1)
  2: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  3: assume Neq<address>($t0, $t1)
     # original call of opaque function: $t2 := A::read_at($t5)
  4: assume Eq($t4, Not(exists<A::S>($t1)))
  5: if ($t4) goto 6 else goto 9
  6: label L4
  7: trace_abort($t5)
  8: goto 32
  9: label L3
 10: assume Eq<u64>($t2, select A::S.x(global<A::S>($t1)))
 11: assume WellFormed($t2)
     # original call of opaque function: A::mutate_at($t4)
     # VC: `caller does not have permission to modify `A::S` at given address` at tests/spec_instrumentation/modifies.move:79:12+9
 12: assert CanModify<A::S>($t0)
 13: assume Eq($t6, Not(exists<A::S>($t0)))
 14: if ($t6) goto 15 else goto 18
 15: label L6
 16: trace_abort($t5)
 17: goto 32
 18: label L5
 19: modifies global<A::S>($t0)
 20: assume Eq<u64>(select A::S.x(global<A::S>($t0)), 2)
     # original call of opaque function: $t3 := A::read_at($t5)
 21: assume Eq($t7, Not(exists<A::S>($t1)))
 22: if ($t7) goto 23 else goto 26
 23: label L8
 24: trace_abort($t5)
 25: goto 32
 26: label L7
 27: assume Eq<u64>($t3, select A::S.x(global<A::S>($t1)))
 28: assume WellFormed($t3)
 29: assert Eq<u64>($t2, $t3)
 30: label L1
 31: return ()
 32: label L2
 33: abort($t5)
}


[variant verification]
pub fun B::mutate_S_test2_incorrect($t0|addr: address) {
     var $t1|x0: u64
     var $t2|x1: u64
     var $t3: bool
     var $t4: num
     var $t5: bool
     var $t6: bool
  0: assume WellFormed($t0)
  1: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
     # original call of opaque function: $t1 := A::read_at($t3)
  2: assume Eq($t3, Not(exists<A::S>($t0)))
  3: if ($t3) goto 4 else goto 7
  4: label L4
  5: trace_abort($t4)
  6: goto 30
  7: label L3
  8: assume Eq<u64>($t1, select A::S.x(global<A::S>($t0)))
  9: assume WellFormed($t1)
     # original call of opaque function: A::mutate_at($t3)
     # VC: `caller does not have permission to modify `A::S` at given address` at tests/spec_instrumentation/modifies.move:92:12+9
 10: assert CanModify<A::S>($t0)
 11: assume Eq($t5, Not(exists<A::S>($t0)))
 12: if ($t5) goto 13 else goto 16
 13: label L6
 14: trace_abort($t4)
 15: goto 30
 16: label L5
 17: modifies global<A::S>($t0)
 18: assume Eq<u64>(select A::S.x(global<A::S>($t0)), 2)
     # original call of opaque function: $t2 := A::read_at($t3)
 19: assume Eq($t6, Not(exists<A::S>($t0)))
 20: if ($t6) goto 21 else goto 24
 21: label L8
 22: trace_abort($t4)
 23: goto 30
 24: label L7
 25: assume Eq<u64>($t2, select A::S.x(global<A::S>($t0)))
 26: assume WellFormed($t2)
 27: assert Eq<u64>($t1, $t2)
 28: label L1
 29: return ()
 30: label L2
 31: abort($t4)
}


[variant verification]
pub fun B::mutate_at_test_incorrect($t0|addr1: address, $t1|addr2: address) {
     var $t2|t: &mut B::T
     var $t3|x0: u64
     var $t4|x1: u64
     var $t5: bool
     var $t6: num
     var $t7: u64
     var $t8: &mut u64
     var $t9: bool
  0: assume WellFormed($t0)
  1: assume WellFormed($t1)
  2: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  3: assume forall $rsc: ResourceDomain<B::T>(): WellFormed($rsc)
     # original call of opaque function: $t3 := A::read_at($t6)
  4: assume Eq($t5, Not(exists<A::S>($t1)))
  5: if ($t5) goto 6 else goto 9
  6: label L4
  7: trace_abort($t6)
  8: goto 30
  9: label L3
 10: assume Eq<u64>($t3, select A::S.x(global<A::S>($t1)))
 11: assume WellFormed($t3)
     # VC: `caller does not have permission to modify `B::T` at given address` at tests/spec_instrumentation/modifies.move:38:17+17
 12: assert CanModify<B::T>($t0)
 13: $t2 := borrow_global<B::T>($t0) on_abort goto 30 with $t6
 14: $t7 := 2
 15: $t8 := borrow_field<B::T>.x($t2)
 16: write_ref($t8, $t7)
 17: write_back[Reference($t2)]($t8)
 18: write_back[B::T]($t2)
     # original call of opaque function: $t4 := A::read_at($t6)
 19: assume Eq($t9, Not(exists<A::S>($t1)))
 20: if ($t9) goto 21 else goto 24
 21: label L6
 22: trace_abort($t6)
 23: goto 30
 24: label L5
 25: assume Eq<u64>($t4, select A::S.x(global<A::S>($t1)))
 26: assume WellFormed($t4)
 27: assert Eq<u64>($t3, $t4)
 28: label L1
 29: return ()
 30: label L2
 31: abort($t6)
}
