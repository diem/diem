============ initial translation from Move ================

[variant baseline]
public fun A::mutate_at($t0|addr: address) {
     var $t1|s: &mut A::S
     var $t2: address
     var $t3: &mut A::S
     var $t4: u64
     var $t5: &mut A::S
     var $t6: &mut u64
  0: $t2 := copy($t0)
  1: $t3 := borrow_global<A::S>($t2)
  2: $t1 := $t3
  3: $t4 := 2
  4: $t5 := move($t1)
  5: $t6 := borrow_field<A::S>.x($t5)
  6: write_ref($t6, $t4)
  7: return ()
}


[variant baseline]
public fun A::read_at($t0|addr: address): u64 {
     var $t1|s: &A::S
     var $t2: address
     var $t3: &A::S
     var $t4: &A::S
     var $t5: &u64
     var $t6: u64
  0: $t2 := copy($t0)
  1: $t3 := borrow_global<A::S>($t2)
  2: $t1 := $t3
  3: $t4 := move($t1)
  4: $t5 := borrow_field<A::S>.x($t4)
  5: $t6 := read_ref($t5)
  6: return $t6
}


[variant baseline]
public fun B::move_from_test_incorrect($t0|addr1: address, $t1|addr2: address): B::T {
     var $t2|v: B::T
     var $t3|x0: u64
     var $t4|x1: u64
     var $t5: address
     var $t6: u64
     var $t7: address
     var $t8: B::T
     var $t9: address
     var $t10: u64
     var $t11: B::T
  0: $t5 := copy($t1)
  1: $t6 := A::read_at($t5)
  2: $t3 := $t6
  3: $t7 := copy($t0)
  4: $t8 := move_from<B::T>($t7)
  5: $t2 := $t8
  6: $t9 := copy($t1)
  7: $t10 := A::read_at($t9)
  8: $t4 := $t10
  9: assert Eq<u64>($t3, $t4)
 10: $t11 := move($t2)
 11: return $t11
}


[variant baseline]
public fun B::move_to_test_incorrect($t0|account: &signer, $t1|addr2: address) {
     var $t2|x0: u64
     var $t3|x1: u64
     var $t4: address
     var $t5: u64
     var $t6: &signer
     var $t7: u64
     var $t8: B::T
     var $t9: address
     var $t10: u64
  0: $t4 := copy($t1)
  1: $t5 := A::read_at($t4)
  2: $t2 := $t5
  3: $t6 := move($t0)
  4: $t7 := 2
  5: $t8 := pack B::T($t7)
  6: move_to<B::T>($t8, $t6)
  7: $t9 := copy($t1)
  8: $t10 := A::read_at($t9)
  9: $t3 := $t10
 10: assert Eq<u64>($t2, $t3)
 11: return ()
}


[variant baseline]
public fun B::mutate_S_test1_incorrect($t0|addr1: address, $t1|addr2: address) {
     var $t2|x0: u64
     var $t3|x1: u64
     var $t4: address
     var $t5: u64
     var $t6: address
     var $t7: address
     var $t8: u64
  0: $t4 := copy($t1)
  1: $t5 := A::read_at($t4)
  2: $t2 := $t5
  3: $t6 := copy($t0)
  4: A::mutate_at($t6)
  5: $t7 := copy($t1)
  6: $t8 := A::read_at($t7)
  7: $t3 := $t8
  8: assert Eq<u64>($t2, $t3)
  9: return ()
}


[variant baseline]
public fun B::mutate_S_test2_incorrect($t0|addr: address) {
     var $t1|x0: u64
     var $t2|x1: u64
     var $t3: address
     var $t4: u64
     var $t5: address
     var $t6: address
     var $t7: u64
  0: $t3 := copy($t0)
  1: $t4 := A::read_at($t3)
  2: $t1 := $t4
  3: $t5 := copy($t0)
  4: A::mutate_at($t5)
  5: $t6 := copy($t0)
  6: $t7 := A::read_at($t6)
  7: $t2 := $t7
  8: assert Eq<u64>($t1, $t2)
  9: return ()
}


[variant baseline]
public fun B::mutate_at_test_incorrect($t0|addr1: address, $t1|addr2: address) {
     var $t2|t: &mut B::T
     var $t3|x0: u64
     var $t4|x1: u64
     var $t5: address
     var $t6: u64
     var $t7: address
     var $t8: &mut B::T
     var $t9: u64
     var $t10: &mut B::T
     var $t11: &mut u64
     var $t12: address
     var $t13: u64
  0: $t5 := copy($t1)
  1: $t6 := A::read_at($t5)
  2: $t3 := $t6
  3: $t7 := copy($t0)
  4: $t8 := borrow_global<B::T>($t7)
  5: $t2 := $t8
  6: $t9 := 2
  7: $t10 := move($t2)
  8: $t11 := borrow_field<B::T>.x($t10)
  9: write_ref($t11, $t9)
 10: $t12 := copy($t1)
 11: $t13 := A::read_at($t12)
 12: $t4 := $t13
 13: assert Eq<u64>($t3, $t4)
 14: return ()
}

============ after pipeline `spec_instrumentation` ================

[variant verification]
public fun A::mutate_at($t0|addr: address) {
     var $t1|s: &mut A::S
     var $t2: &mut A::S
     var $t3: num
     var $t4: u64
     var $t5: &mut u64
     var $t6: address
     var $t7: &mut A::S
  0: assume WellFormed($t0)
  1: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  2: assume CanModify<A::S>($t0)
  3: @1 := save_mem(A::S)
     # VC: caller does not have permission to modify `A::S` at given address at tests/spec_instrumentation/modifies.move:18:17+17
  4: assert CanModify<A::S>($t0)
  5: $t2 := borrow_global<A::S>($t0) on_abort goto 18 with $t3
  6: $t4 := 2
  7: $t5 := borrow_field<A::S>.x($t2)
  8: write_ref($t5, $t4)
  9: $t6 := global_address($t5)
     # VC: caller does not have permission to modify `A::S` at given address at tests/spec_instrumentation/modifies.move:19:9+7
 10: assert CanModify<A::S>($t6)
 11: $t7 := borrow_global<A::S>($t6) on_abort goto 18 with $t3
 12: write_back[Reference($t7).x]($t5)
 13: write_back[A::S@]($t7)
 14: label L1
     # VC: function does not abort under this condition at tests/spec_instrumentation/modifies.move:24:9+27
 15: assert Not(Not(exists[@1]<A::S>($t0)))
     # VC: post-condition does not hold at tests/spec_instrumentation/modifies.move:23:9+31
 16: assert Eq<u64>(select A::S.x(global<A::S>($t0)), 2)
 17: return ()
 18: label L2
     # VC: abort not covered by any of the `aborts_if` clauses at tests/spec_instrumentation/modifies.move:21:5+162
 19: assert Not(exists[@1]<A::S>($t0))
 20: abort($t3)
}


[variant verification]
public fun A::read_at($t0|addr: address): u64 {
     var $t1|s: A::S
     var $t2: A::S
     var $t3: num
     var $t4: u64
  0: assume WellFormed($t0)
  1: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  2: @0 := save_mem(A::S)
  3: $t2 := get_global<A::S>($t0) on_abort goto 9 with $t3
  4: $t4 := get_field<A::S>.x($t2)
  5: label L1
     # VC: function does not abort under this condition at tests/spec_instrumentation/modifies.move:13:9+27
  6: assert Not(Not(exists[@0]<A::S>($t0)))
     # VC: post-condition does not hold at tests/spec_instrumentation/modifies.move:14:9+36
  7: assert Eq<u64>($t4, select A::S.x(global<A::S>($t0)))
  8: return $t4
  9: label L2
     # VC: abort not covered by any of the `aborts_if` clauses at tests/spec_instrumentation/modifies.move:11:5+131
 10: assert Not(exists[@0]<A::S>($t0))
 11: abort($t3)
}


[variant verification]
public fun B::move_from_test_incorrect($t0|addr1: address, $t1|addr2: address): B::T {
     var $t2|v: B::T
     var $t3|x0: u64
     var $t4|x1: u64
     var $t5: u64
     var $t6: bool
     var $t7: num
     var $t8: B::T
     var $t9: u64
     var $t10: bool
  0: assume WellFormed($t0)
  1: assume WellFormed($t1)
  2: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  3: assume forall $rsc: ResourceDomain<B::T>(): WellFormed($rsc)
  4: assume CanModify<B::T>($t1)
     # >> opaque call: $t5 := A::read_at($t1)
  5: nop
  6: $t5 := opaque begin: A::read_at($t1)
  7: assume Identical($t6, Not(exists<A::S>($t1)))
  8: if ($t6) goto 9 else goto 12
  9: label L4
 10: trace_abort($t7)
 11: goto 32
 12: label L3
 13: assume WellFormed($t5)
 14: assume Eq<u64>($t5, select A::S.x(global<A::S>($t1)))
 15: $t5 := opaque end: A::read_at($t1)
     # VC: caller does not have permission to modify `B::T` at given address at tests/spec_instrumentation/modifies.move:65:17+9
 16: assert CanModify<B::T>($t0)
 17: $t8 := move_from<B::T>($t0) on_abort goto 32 with $t7
     # >> opaque call: $t7 := A::read_at($t1)
 18: nop
 19: $t9 := opaque begin: A::read_at($t1)
 20: assume Identical($t10, Not(exists<A::S>($t1)))
 21: if ($t10) goto 22 else goto 25
 22: label L6
 23: trace_abort($t7)
 24: goto 32
 25: label L5
 26: assume WellFormed($t9)
 27: assume Eq<u64>($t9, select A::S.x(global<A::S>($t1)))
 28: $t9 := opaque end: A::read_at($t1)
 29: assert Eq<u64>($t5, $t9)
 30: label L1
 31: return $t8
 32: label L2
 33: abort($t7)
}


[variant verification]
public fun B::move_to_test_incorrect($t0|account: signer, $t1|addr2: address) {
     var $t2|x0: u64
     var $t3|x1: u64
     var $t4: u64
     var $t5: bool
     var $t6: num
     var $t7: u64
     var $t8: B::T
     var $t9: u64
     var $t10: bool
  0: assume WellFormed($t0)
  1: assume WellFormed($t1)
  2: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  3: assume forall $rsc: ResourceDomain<B::T>(): WellFormed($rsc)
  4: assume CanModify<B::T>($t1)
     # >> opaque call: $t4 := A::read_at($t1)
  5: nop
  6: $t4 := opaque begin: A::read_at($t1)
  7: assume Identical($t5, Not(exists<A::S>($t1)))
  8: if ($t5) goto 9 else goto 12
  9: label L4
 10: trace_abort($t6)
 11: goto 34
 12: label L3
 13: assume WellFormed($t4)
 14: assume Eq<u64>($t4, select A::S.x(global<A::S>($t1)))
 15: $t4 := opaque end: A::read_at($t1)
 16: $t7 := 2
 17: $t8 := pack B::T($t7)
     # VC: caller does not have permission to modify `B::T` at given address at tests/spec_instrumentation/modifies.move:52:9+7
 18: assert CanModify<B::T>($t0)
 19: move_to<B::T>($t8, $t0) on_abort goto 34 with $t6
     # >> opaque call: $t7 := A::read_at($t1)
 20: nop
 21: $t9 := opaque begin: A::read_at($t1)
 22: assume Identical($t10, Not(exists<A::S>($t1)))
 23: if ($t10) goto 24 else goto 27
 24: label L6
 25: trace_abort($t6)
 26: goto 34
 27: label L5
 28: assume WellFormed($t9)
 29: assume Eq<u64>($t9, select A::S.x(global<A::S>($t1)))
 30: $t9 := opaque end: A::read_at($t1)
 31: assert Eq<u64>($t4, $t9)
 32: label L1
 33: return ()
 34: label L2
 35: abort($t6)
}


[variant verification]
public fun B::mutate_S_test1_incorrect($t0|addr1: address, $t1|addr2: address) {
     var $t2|x0: u64
     var $t3|x1: u64
     var $t4: u64
     var $t5: bool
     var $t6: num
     var $t7: bool
     var $t8: u64
     var $t9: bool
  0: assume WellFormed($t0)
  1: assume WellFormed($t1)
  2: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  3: assume Neq<address>($t0, $t1)
  4: assume CanModify<A::S>($t1)
     # >> opaque call: $t4 := A::read_at($t1)
  5: nop
  6: $t4 := opaque begin: A::read_at($t1)
  7: assume Identical($t5, Not(exists<A::S>($t1)))
  8: if ($t5) goto 9 else goto 12
  9: label L4
 10: trace_abort($t6)
 11: goto 42
 12: label L3
 13: assume WellFormed($t4)
 14: assume Eq<u64>($t4, select A::S.x(global<A::S>($t1)))
 15: $t4 := opaque end: A::read_at($t1)
     # >> opaque call: A::mutate_at($t0)
 16: nop
     # VC: caller does not have permission to modify `A::S` at given address at tests/spec_instrumentation/modifies.move:79:9+19
 17: assert CanModify<A::S>($t0)
 18: opaque begin: A::mutate_at($t0)
 19: assume Identical($t7, Not(exists<A::S>($t0)))
 20: if ($t7) goto 21 else goto 24
 21: label L6
 22: trace_abort($t6)
 23: goto 42
 24: label L5
 25: modifies global<A::S>($t0)
 26: assume Eq<u64>(select A::S.x(global<A::S>($t0)), 2)
 27: opaque end: A::mutate_at($t0)
     # >> opaque call: $t5 := A::read_at($t1)
 28: nop
 29: $t8 := opaque begin: A::read_at($t1)
 30: assume Identical($t9, Not(exists<A::S>($t1)))
 31: if ($t9) goto 32 else goto 35
 32: label L8
 33: trace_abort($t6)
 34: goto 42
 35: label L7
 36: assume WellFormed($t8)
 37: assume Eq<u64>($t8, select A::S.x(global<A::S>($t1)))
 38: $t8 := opaque end: A::read_at($t1)
 39: assert Eq<u64>($t4, $t8)
 40: label L1
 41: return ()
 42: label L2
 43: abort($t6)
}


[variant verification]
public fun B::mutate_S_test2_incorrect($t0|addr: address) {
     var $t1|x0: u64
     var $t2|x1: u64
     var $t3: u64
     var $t4: bool
     var $t5: num
     var $t6: bool
     var $t7: u64
     var $t8: bool
  0: assume WellFormed($t0)
  1: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  2: assume CanModify<A::S>($t0)
     # >> opaque call: $t3 := A::read_at($t0)
  3: nop
  4: $t3 := opaque begin: A::read_at($t0)
  5: assume Identical($t4, Not(exists<A::S>($t0)))
  6: if ($t4) goto 7 else goto 10
  7: label L4
  8: trace_abort($t5)
  9: goto 40
 10: label L3
 11: assume WellFormed($t3)
 12: assume Eq<u64>($t3, select A::S.x(global<A::S>($t0)))
 13: $t3 := opaque end: A::read_at($t0)
     # >> opaque call: A::mutate_at($t0)
 14: nop
     # VC: caller does not have permission to modify `A::S` at given address at tests/spec_instrumentation/modifies.move:92:9+18
 15: assert CanModify<A::S>($t0)
 16: opaque begin: A::mutate_at($t0)
 17: assume Identical($t6, Not(exists<A::S>($t0)))
 18: if ($t6) goto 19 else goto 22
 19: label L6
 20: trace_abort($t5)
 21: goto 40
 22: label L5
 23: modifies global<A::S>($t0)
 24: assume Eq<u64>(select A::S.x(global<A::S>($t0)), 2)
 25: opaque end: A::mutate_at($t0)
     # >> opaque call: $t4 := A::read_at($t0)
 26: nop
 27: $t7 := opaque begin: A::read_at($t0)
 28: assume Identical($t8, Not(exists<A::S>($t0)))
 29: if ($t8) goto 30 else goto 33
 30: label L8
 31: trace_abort($t5)
 32: goto 40
 33: label L7
 34: assume WellFormed($t7)
 35: assume Eq<u64>($t7, select A::S.x(global<A::S>($t0)))
 36: $t7 := opaque end: A::read_at($t0)
 37: assert Eq<u64>($t3, $t7)
 38: label L1
 39: return ()
 40: label L2
 41: abort($t5)
}


[variant verification]
public fun B::mutate_at_test_incorrect($t0|addr1: address, $t1|addr2: address) {
     var $t2|t: &mut B::T
     var $t3|x0: u64
     var $t4|x1: u64
     var $t5: u64
     var $t6: bool
     var $t7: num
     var $t8: &mut B::T
     var $t9: u64
     var $t10: &mut u64
     var $t11: address
     var $t12: &mut B::T
     var $t13: u64
     var $t14: bool
  0: assume WellFormed($t0)
  1: assume WellFormed($t1)
  2: assume forall $rsc: ResourceDomain<A::S>(): WellFormed($rsc)
  3: assume forall $rsc: ResourceDomain<B::T>(): WellFormed($rsc)
  4: assume CanModify<B::T>($t1)
     # >> opaque call: $t5 := A::read_at($t1)
  5: nop
  6: $t5 := opaque begin: A::read_at($t1)
  7: assume Identical($t6, Not(exists<A::S>($t1)))
  8: if ($t6) goto 9 else goto 12
  9: label L4
 10: trace_abort($t7)
 11: goto 40
 12: label L3
 13: assume WellFormed($t5)
 14: assume Eq<u64>($t5, select A::S.x(global<A::S>($t1)))
 15: $t5 := opaque end: A::read_at($t1)
     # VC: caller does not have permission to modify `B::T` at given address at tests/spec_instrumentation/modifies.move:38:17+17
 16: assert CanModify<B::T>($t0)
 17: $t8 := borrow_global<B::T>($t0) on_abort goto 40 with $t7
 18: $t9 := 2
 19: $t10 := borrow_field<B::T>.x($t8)
 20: write_ref($t10, $t9)
 21: $t11 := global_address($t10)
     # VC: caller does not have permission to modify `B::T` at given address at tests/spec_instrumentation/modifies.move:39:9+7
 22: assert CanModify<B::T>($t11)
 23: $t12 := borrow_global<B::T>($t11) on_abort goto 40 with $t7
 24: write_back[Reference($t12).x]($t10)
 25: write_back[B::T@]($t12)
     # >> opaque call: $t9 := A::read_at($t1)
 26: nop
 27: $t13 := opaque begin: A::read_at($t1)
 28: assume Identical($t14, Not(exists<A::S>($t1)))
 29: if ($t14) goto 30 else goto 33
 30: label L6
 31: trace_abort($t7)
 32: goto 40
 33: label L5
 34: assume WellFormed($t13)
 35: assume Eq<u64>($t13, select A::S.x(global<A::S>($t1)))
 36: $t13 := opaque end: A::read_at($t1)
 37: assert Eq<u64>($t5, $t13)
 38: label L1
 39: return ()
 40: label L2
 41: abort($t7)
}



==== spec-instrumenter input specs ====

fun A::mutate_at[baseline[
spec {
  ensures Eq<u64>(select A::S.x(global<A::S>($t0)), 2);
  aborts_if Not(exists<A::S>($t0));
  modifies global<A::S>($t0);
}

fun A::mutate_at[verification[
spec {
  ensures Eq<u64>(select A::S.x(global<A::S>($t0)), 2);
  aborts_if Not(exists<A::S>($t0));
  modifies global<A::S>($t0);
}

fun A::read_at[baseline[
spec {
  aborts_if Not(exists<A::S>($t0));
  ensures Eq<u64>(result0(), select A::S.x(global<A::S>($t0)));
}

fun A::read_at[verification[
spec {
  aborts_if Not(exists<A::S>($t0));
  ensures Eq<u64>(result0(), select A::S.x(global<A::S>($t0)));
}

fun B::move_from_test_incorrect[baseline[
spec {
  modifies global<B::T>($t1);
}

fun B::move_from_test_incorrect[verification[
spec {
  modifies global<B::T>($t1);
}

fun B::move_to_test_incorrect[baseline[
spec {
  modifies global<B::T>($t1);
}

fun B::move_to_test_incorrect[verification[
spec {
  modifies global<B::T>($t1);
}

fun B::mutate_S_test1_incorrect[baseline[
spec {
  requires Neq<address>($t0, $t1);
  modifies global<A::S>($t1);
}

fun B::mutate_S_test1_incorrect[verification[
spec {
  requires Neq<address>($t0, $t1);
  modifies global<A::S>($t1);
}

fun B::mutate_S_test2_incorrect[baseline[
spec {
  modifies global<A::S>($t0);
}

fun B::mutate_S_test2_incorrect[verification[
spec {
  modifies global<A::S>($t0);
}

fun B::mutate_at_test_incorrect[baseline[
spec {
  modifies global<B::T>($t1);
}

fun B::mutate_at_test_incorrect[verification[
spec {
  modifies global<B::T>($t1);
}
