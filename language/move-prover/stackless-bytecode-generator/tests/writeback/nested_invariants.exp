============ initial translation from Move ================

fun TestNestedInvariants::mutate() {
     var o: TestNestedInvariants::Outer
     var r: &mut TestNestedInvariants::Outer
     var $t2: u64
     var $t3: u64
     var $t4: TestNestedInvariants::Nested
     var $t5: TestNestedInvariants::Outer
     var $t6: &mut TestNestedInvariants::Outer
     var $t7: u64
     var $t8: &mut TestNestedInvariants::Outer
     var $t9: &mut u64
     var $t10: u64
     var $t11: &mut TestNestedInvariants::Outer
     var $t12: &mut TestNestedInvariants::Nested
     var $t13: &mut u64
  0: $t2 := 3
  1: $t3 := 2
  2: $t4 := pack TestNestedInvariants::Nested($t3)
  3: $t5 := pack TestNestedInvariants::Outer($t2, $t4)
  4: o := $t5
  5: $t6 := borrow_local(o)
  6: r := $t6
  7: $t7 := 2
  8: $t8 := copy(r)
  9: $t9 := borrow_field<TestNestedInvariants::Outer>.y($t8)
 10: write_ref($t9, $t7)
 11: $t10 := 1
 12: $t11 := move(r)
 13: $t12 := borrow_field<TestNestedInvariants::Outer>.n($t11)
 14: $t13 := borrow_field<TestNestedInvariants::Nested>.x($t12)
 15: write_ref($t13, $t10)
 16: return ()
}


fun TestNestedInvariants::mutate_inner_data_invariant_invalid() {
     var o: TestNestedInvariants::Outer
     var r: &mut TestNestedInvariants::Outer
     var $t2: u64
     var $t3: u64
     var $t4: TestNestedInvariants::Nested
     var $t5: TestNestedInvariants::Outer
     var $t6: &mut TestNestedInvariants::Outer
     var $t7: u64
     var $t8: &mut TestNestedInvariants::Outer
     var $t9: &mut TestNestedInvariants::Nested
     var $t10: &mut u64
  0: $t2 := 3
  1: $t3 := 2
  2: $t4 := pack TestNestedInvariants::Nested($t3)
  3: $t5 := pack TestNestedInvariants::Outer($t2, $t4)
  4: o := $t5
  5: $t6 := borrow_local(o)
  6: r := $t6
  7: $t7 := 0
  8: $t8 := move(r)
  9: $t9 := borrow_field<TestNestedInvariants::Outer>.n($t8)
 10: $t10 := borrow_field<TestNestedInvariants::Nested>.x($t9)
 11: write_ref($t10, $t7)
 12: return ()
}


fun TestNestedInvariants::mutate_outer_data_invariant_invalid() {
     var o: TestNestedInvariants::Outer
     var r: &mut TestNestedInvariants::Outer
     var $t2: u64
     var $t3: u64
     var $t4: TestNestedInvariants::Nested
     var $t5: TestNestedInvariants::Outer
     var $t6: &mut TestNestedInvariants::Outer
     var $t7: u64
     var $t8: &mut TestNestedInvariants::Outer
     var $t9: &mut u64
  0: $t2 := 3
  1: $t3 := 2
  2: $t4 := pack TestNestedInvariants::Nested($t3)
  3: $t5 := pack TestNestedInvariants::Outer($t2, $t4)
  4: o := $t5
  5: $t6 := borrow_local(o)
  6: r := $t6
  7: $t7 := 2
  8: $t8 := move(r)
  9: $t9 := borrow_field<TestNestedInvariants::Outer>.y($t8)
 10: write_ref($t9, $t7)
 11: return ()
}


fun TestNestedInvariants::new(): TestNestedInvariants::Outer {
     var $t0: u64
     var $t1: u64
     var $t2: TestNestedInvariants::Nested
     var $t3: TestNestedInvariants::Outer
  0: $t0 := 3
  1: $t1 := 2
  2: $t2 := pack TestNestedInvariants::Nested($t1)
  3: $t3 := pack TestNestedInvariants::Outer($t0, $t2)
  4: return $t3
}


fun TestNestedInvariants::new_inner_data_invariant_invalid(): TestNestedInvariants::Outer {
     var $t0: u64
     var $t1: u64
     var $t2: TestNestedInvariants::Nested
     var $t3: TestNestedInvariants::Outer
  0: $t0 := 2
  1: $t1 := 0
  2: $t2 := pack TestNestedInvariants::Nested($t1)
  3: $t3 := pack TestNestedInvariants::Outer($t0, $t2)
  4: return $t3
}


fun TestNestedInvariants::new_outer_data_invariant_invalid(): TestNestedInvariants::Outer {
     var $t0: u64
     var $t1: u64
     var $t2: TestNestedInvariants::Nested
     var $t3: TestNestedInvariants::Outer
  0: $t0 := 2
  1: $t1 := 2
  2: $t2 := pack TestNestedInvariants::Nested($t1)
  3: $t3 := pack TestNestedInvariants::Outer($t0, $t2)
  4: return $t3
}

============ after pipeline `writeback` ================

fun TestNestedInvariants::mutate() {
     var o: TestNestedInvariants::Outer
     var r: &mut TestNestedInvariants::Outer
     var $t2: u64
     var $t3: u64
     var $t4: TestNestedInvariants::Nested
     var $t5: u64
     var $t6: &mut u64
     var $t7: u64
     var $t8: &mut TestNestedInvariants::Nested
     var $t9: &mut u64
  0: $t2 := 3
  1: $t3 := 2
  2: $t4 := pack TestNestedInvariants::Nested($t3)
  3: o := pack TestNestedInvariants::Outer($t2, $t4)
  4: r := borrow_local(o)
     // live_refs: r
     // borrowed_by: LocalRoot(o) -> {Reference(r)}
     // borrows_from: Reference(r) -> {LocalRoot(o)}
  5: $t5 := 2
     // live_refs: r
     // borrowed_by: LocalRoot(o) -> {Reference(r)}
     // borrows_from: Reference(r) -> {LocalRoot(o)}
  6: $t6 := borrow_field<TestNestedInvariants::Outer>.y(r)
     // live_refs: r, $t6
     // borrowed_by: LocalRoot(o) -> {Reference(r)}, Reference(r) -> {Reference($t6)}
     // borrows_from: Reference(r) -> {LocalRoot(o)}, Reference($t6) -> {Reference(r)}
     // Reference(r) <- $t6
  7: write_ref($t6, $t5)
     // live_refs: r
     // borrowed_by: LocalRoot(o) -> {Reference(r)}
     // borrows_from: Reference(r) -> {LocalRoot(o)}
     // dirty_nodes: LocalRoot(o), Reference(r), Reference($t6)
  8: $t7 := 1
     // live_refs: r
     // borrowed_by: LocalRoot(o) -> {Reference(r)}
     // borrows_from: Reference(r) -> {LocalRoot(o)}
     // dirty_nodes: LocalRoot(o), Reference(r), Reference($t6)
     // LocalRoot(o) <- r
  9: $t8 := borrow_field<TestNestedInvariants::Outer>.n(r)
     // live_refs: $t8
     // borrowed_by: LocalRoot(o) -> {Reference($t8)}, Reference(r) -> {Reference($t8)}
     // borrows_from: Reference($t8) -> {LocalRoot(o), Reference(r)}
     // dirty_nodes: LocalRoot(o), Reference(r), Reference($t6)
 10: $t9 := borrow_field<TestNestedInvariants::Nested>.x($t8)
     // live_refs: $t9
     // borrowed_by: LocalRoot(o) -> {Reference($t9)}, Reference(r) -> {Reference($t8)}, Reference($t8) -> {Reference($t9)}
     // borrows_from: Reference($t8) -> {Reference(r)}, Reference($t9) -> {LocalRoot(o), Reference($t8)}
     // dirty_nodes: LocalRoot(o), Reference(r), Reference($t6)
     // LocalRoot(o) <- $t9, Reference($t8) <- $t9, Reference(r) <- $t8
 11: write_ref($t9, $t7)
     // dirty_nodes: LocalRoot(o), Reference(r), Reference($t6), Reference($t8), Reference($t9)
 12: return ()
}


fun TestNestedInvariants::mutate_inner_data_invariant_invalid() {
     var o: TestNestedInvariants::Outer
     var r: &mut TestNestedInvariants::Outer
     var $t2: u64
     var $t3: u64
     var $t4: TestNestedInvariants::Nested
     var $t5: u64
     var $t6: &mut TestNestedInvariants::Nested
     var $t7: &mut u64
  0: $t2 := 3
  1: $t3 := 2
  2: $t4 := pack TestNestedInvariants::Nested($t3)
  3: o := pack TestNestedInvariants::Outer($t2, $t4)
  4: r := borrow_local(o)
     // live_refs: r
     // borrowed_by: LocalRoot(o) -> {Reference(r)}
     // borrows_from: Reference(r) -> {LocalRoot(o)}
  5: $t5 := 0
     // live_refs: r
     // borrowed_by: LocalRoot(o) -> {Reference(r)}
     // borrows_from: Reference(r) -> {LocalRoot(o)}
  6: $t6 := borrow_field<TestNestedInvariants::Outer>.n(r)
     // live_refs: $t6
     // borrowed_by: LocalRoot(o) -> {Reference($t6)}, Reference(r) -> {Reference($t6)}
     // borrows_from: Reference($t6) -> {LocalRoot(o), Reference(r)}
  7: $t7 := borrow_field<TestNestedInvariants::Nested>.x($t6)
     // live_refs: $t7
     // borrowed_by: LocalRoot(o) -> {Reference($t7)}, Reference(r) -> {Reference($t6)}, Reference($t6) -> {Reference($t7)}
     // borrows_from: Reference($t6) -> {Reference(r)}, Reference($t7) -> {LocalRoot(o), Reference($t6)}
     // LocalRoot(o) <- $t7, Reference($t6) <- $t7, Reference(r) <- $t6
  8: write_ref($t7, $t5)
     // dirty_nodes: LocalRoot(o), Reference(r), Reference($t6), Reference($t7)
  9: return ()
}


fun TestNestedInvariants::mutate_outer_data_invariant_invalid() {
     var o: TestNestedInvariants::Outer
     var r: &mut TestNestedInvariants::Outer
     var $t2: u64
     var $t3: u64
     var $t4: TestNestedInvariants::Nested
     var $t5: u64
     var $t6: &mut u64
  0: $t2 := 3
  1: $t3 := 2
  2: $t4 := pack TestNestedInvariants::Nested($t3)
  3: o := pack TestNestedInvariants::Outer($t2, $t4)
  4: r := borrow_local(o)
     // live_refs: r
     // borrowed_by: LocalRoot(o) -> {Reference(r)}
     // borrows_from: Reference(r) -> {LocalRoot(o)}
  5: $t5 := 2
     // live_refs: r
     // borrowed_by: LocalRoot(o) -> {Reference(r)}
     // borrows_from: Reference(r) -> {LocalRoot(o)}
  6: $t6 := borrow_field<TestNestedInvariants::Outer>.y(r)
     // live_refs: $t6
     // borrowed_by: LocalRoot(o) -> {Reference($t6)}, Reference(r) -> {Reference($t6)}
     // borrows_from: Reference($t6) -> {LocalRoot(o), Reference(r)}
     // LocalRoot(o) <- $t6, Reference(r) <- $t6
  7: write_ref($t6, $t5)
     // dirty_nodes: LocalRoot(o), Reference(r), Reference($t6)
  8: return ()
}


fun TestNestedInvariants::new(): TestNestedInvariants::Outer {
     var $t0: u64
     var $t1: u64
     var $t2: TestNestedInvariants::Nested
     var $t3: TestNestedInvariants::Outer
  0: $t0 := 3
  1: $t1 := 2
  2: $t2 := pack TestNestedInvariants::Nested($t1)
  3: $t3 := pack TestNestedInvariants::Outer($t0, $t2)
  4: return $t3
}


fun TestNestedInvariants::new_inner_data_invariant_invalid(): TestNestedInvariants::Outer {
     var $t0: u64
     var $t1: u64
     var $t2: TestNestedInvariants::Nested
     var $t3: TestNestedInvariants::Outer
  0: $t0 := 2
  1: $t1 := 0
  2: $t2 := pack TestNestedInvariants::Nested($t1)
  3: $t3 := pack TestNestedInvariants::Outer($t0, $t2)
  4: return $t3
}


fun TestNestedInvariants::new_outer_data_invariant_invalid(): TestNestedInvariants::Outer {
     var $t0: u64
     var $t1: u64
     var $t2: TestNestedInvariants::Nested
     var $t3: TestNestedInvariants::Outer
  0: $t0 := 2
  1: $t1 := 2
  2: $t2 := pack TestNestedInvariants::Nested($t1)
  3: $t3 := pack TestNestedInvariants::Outer($t0, $t2)
  4: return $t3
}
