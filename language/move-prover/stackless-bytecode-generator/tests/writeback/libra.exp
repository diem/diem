============ initial translation from Move ================

pub fun Vector::append<$tv0>(lhs: &mut vector<#0>, other: vector<#0>) {
     var $t2: &mut vector<#0>
     var $t3: &vector<#0>
     var $t4: bool
     var $t5: bool
     var $t6: &mut vector<#0>
     var $t7: &mut vector<#0>
     var $t8: #0
     var $t9: &mut vector<#0>
     var $t10: vector<#0>
  0: $t2 := borrow_local(other)
  1: Vector::reverse<#0>($t2)
  2: goto L3
  3: L3:
  4: $t3 := borrow_local(other)
  5: $t4 := Vector::is_empty<#0>($t3)
  6: $t5 := !($t4)
  7: if ($t5) goto L0 else goto L1
  8: L1:
  9: goto L2
 10: L0:
 11: $t6 := copy(lhs)
 12: $t7 := borrow_local(other)
 13: $t8 := Vector::pop_back<#0>($t7)
 14: Vector::push_back<#0>($t6, $t8)
 15: goto L3
 16: L2:
 17: $t9 := move(lhs)
 18: destroy($t9)
 19: $t10 := move(other)
 20: Vector::destroy_empty<#0>($t10)
 21: return ()
}


pub fun Vector::borrow<$tv0>(v: &vector<#0>, i: u64): &#0 {
}


pub fun Vector::borrow_mut<$tv0>(v: &mut vector<#0>, i: u64): &mut #0 {
}


pub fun Vector::contains<$tv0>(v: &vector<#0>, e: &#0): bool {
     var i: u64
     var len: u64
     var $t4: u64
     var $t5: &vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: &vector<#0>
     var $t11: u64
     var $t12: &#0
     var $t13: &#0
     var $t14: bool
     var $t15: &vector<#0>
     var $t16: &#0
     var $t17: bool
     var $t18: u64
     var $t19: u64
     var $t20: u64
     var $t21: &vector<#0>
     var $t22: &#0
     var $t23: bool
  0: $t4 := 0
  1: i := $t4
  2: $t5 := copy(v)
  3: $t6 := Vector::length<#0>($t5)
  4: len := $t6
  5: goto L6
  6: L6:
  7: $t7 := copy(i)
  8: $t8 := copy(len)
  9: $t9 := <($t7, $t8)
 10: if ($t9) goto L0 else goto L1
 11: L1:
 12: goto L2
 13: L0:
 14: $t10 := copy(v)
 15: $t11 := copy(i)
 16: $t12 := Vector::borrow<#0>($t10, $t11)
 17: $t13 := copy(e)
 18: $t14 := ==($t12, $t13)
 19: if ($t14) goto L3 else goto L4
 20: L4:
 21: goto L5
 22: L3:
 23: $t15 := move(v)
 24: destroy($t15)
 25: $t16 := move(e)
 26: destroy($t16)
 27: $t17 := true
 28: return $t17
 29: L5:
 30: $t18 := copy(i)
 31: $t19 := 1
 32: $t20 := +($t18, $t19)
 33: i := $t20
 34: goto L6
 35: L2:
 36: $t21 := move(v)
 37: destroy($t21)
 38: $t22 := move(e)
 39: destroy($t22)
 40: $t23 := false
 41: return $t23
}


pub fun Vector::destroy_empty<$tv0>(v: vector<#0>) {
}


pub fun Vector::empty<$tv0>(): vector<#0> {
}


pub fun Vector::index_of<$tv0>(v: &vector<#0>, e: &#0): (bool, u64) {
     var i: u64
     var len: u64
     var $t4: u64
     var $t5: &vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: &vector<#0>
     var $t11: u64
     var $t12: &#0
     var $t13: &#0
     var $t14: bool
     var $t15: &vector<#0>
     var $t16: &#0
     var $t17: bool
     var $t18: u64
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: &vector<#0>
     var $t23: &#0
     var $t24: bool
     var $t25: u64
  0: $t4 := 0
  1: i := $t4
  2: $t5 := copy(v)
  3: $t6 := Vector::length<#0>($t5)
  4: len := $t6
  5: goto L6
  6: L6:
  7: $t7 := copy(i)
  8: $t8 := copy(len)
  9: $t9 := <($t7, $t8)
 10: if ($t9) goto L0 else goto L1
 11: L1:
 12: goto L2
 13: L0:
 14: $t10 := copy(v)
 15: $t11 := copy(i)
 16: $t12 := Vector::borrow<#0>($t10, $t11)
 17: $t13 := copy(e)
 18: $t14 := ==($t12, $t13)
 19: if ($t14) goto L3 else goto L4
 20: L4:
 21: goto L5
 22: L3:
 23: $t15 := move(v)
 24: destroy($t15)
 25: $t16 := move(e)
 26: destroy($t16)
 27: $t17 := true
 28: $t18 := copy(i)
 29: return ($t17, $t18)
 30: L5:
 31: $t19 := copy(i)
 32: $t20 := 1
 33: $t21 := +($t19, $t20)
 34: i := $t21
 35: goto L6
 36: L2:
 37: $t22 := move(v)
 38: destroy($t22)
 39: $t23 := move(e)
 40: destroy($t23)
 41: $t24 := false
 42: $t25 := 0
 43: return ($t24, $t25)
}


pub fun Vector::is_empty<$tv0>(v: &vector<#0>): bool {
     var $t1: &vector<#0>
     var $t2: u64
     var $t3: u64
     var $t4: bool
  0: $t1 := move(v)
  1: $t2 := Vector::length<#0>($t1)
  2: $t3 := 0
  3: $t4 := ==($t2, $t3)
  4: return $t4
}


pub fun Vector::length<$tv0>(v: &vector<#0>): u64 {
}


pub fun Vector::pop_back<$tv0>(v: &mut vector<#0>): #0 {
}


pub fun Vector::push_back<$tv0>(v: &mut vector<#0>, e: #0) {
}


pub fun Vector::remove<$tv0>(v: &mut vector<#0>, i: u64): #0 {
     var len: u64
     var tmp#$3: u64
     var tmp#$4: &mut vector<#0>
     var $t5: &mut vector<#0>
     var $t6: &vector<#0>
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: bool
     var $t11: &mut vector<#0>
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: u64
     var $t18: bool
     var $t19: &mut vector<#0>
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: u64
     var $t24: &mut vector<#0>
     var $t25: u64
     var $t26: u64
     var $t27: &mut vector<#0>
     var $t28: #0
  0: $t5 := copy(v)
  1: $t6 := freeze_ref($t5)
  2: $t7 := Vector::length<#0>($t6)
  3: len := $t7
  4: $t8 := copy(i)
  5: $t9 := copy(len)
  6: $t10 := >=($t8, $t9)
  7: if ($t10) goto L0 else goto L1
  8: L1:
  9: goto L2
 10: L0:
 11: $t11 := move(v)
 12: destroy($t11)
 13: $t12 := 0
 14: abort($t12)
 15: L2:
 16: $t13 := copy(len)
 17: $t14 := 1
 18: $t15 := -($t13, $t14)
 19: len := $t15
 20: goto L6
 21: L6:
 22: $t16 := copy(i)
 23: $t17 := copy(len)
 24: $t18 := <($t16, $t17)
 25: if ($t18) goto L3 else goto L4
 26: L4:
 27: goto L5
 28: L3:
 29: $t19 := copy(v)
 30: tmp#$4 := $t19
 31: $t20 := copy(i)
 32: tmp#$3 := $t20
 33: $t21 := copy(i)
 34: $t22 := 1
 35: $t23 := +($t21, $t22)
 36: i := $t23
 37: $t24 := move(tmp#$4)
 38: $t25 := move(tmp#$3)
 39: $t26 := copy(i)
 40: Vector::swap<#0>($t24, $t25, $t26)
 41: goto L6
 42: L5:
 43: $t27 := move(v)
 44: $t28 := Vector::pop_back<#0>($t27)
 45: return $t28
}


pub fun Vector::reverse<$tv0>(v: &mut vector<#0>) {
     var back_index: u64
     var front_index: u64
     var len: u64
     var $t4: &mut vector<#0>
     var $t5: &vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: &mut vector<#0>
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: bool
     var $t18: &mut vector<#0>
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: u64
     var $t24: u64
     var $t25: u64
     var $t26: u64
     var $t27: &mut vector<#0>
  0: $t4 := copy(v)
  1: $t5 := freeze_ref($t4)
  2: $t6 := Vector::length<#0>($t5)
  3: len := $t6
  4: $t7 := copy(len)
  5: $t8 := 0
  6: $t9 := ==($t7, $t8)
  7: if ($t9) goto L0 else goto L1
  8: L1:
  9: goto L2
 10: L0:
 11: $t10 := move(v)
 12: destroy($t10)
 13: return ()
 14: L2:
 15: $t11 := 0
 16: front_index := $t11
 17: $t12 := copy(len)
 18: $t13 := 1
 19: $t14 := -($t12, $t13)
 20: back_index := $t14
 21: goto L6
 22: L6:
 23: $t15 := copy(front_index)
 24: $t16 := copy(back_index)
 25: $t17 := <($t15, $t16)
 26: if ($t17) goto L3 else goto L4
 27: L4:
 28: goto L5
 29: L3:
 30: $t18 := copy(v)
 31: $t19 := copy(front_index)
 32: $t20 := copy(back_index)
 33: Vector::swap<#0>($t18, $t19, $t20)
 34: $t21 := copy(front_index)
 35: $t22 := 1
 36: $t23 := +($t21, $t22)
 37: front_index := $t23
 38: $t24 := copy(back_index)
 39: $t25 := 1
 40: $t26 := -($t24, $t25)
 41: back_index := $t26
 42: goto L6
 43: L5:
 44: $t27 := move(v)
 45: destroy($t27)
 46: return ()
}


pub fun Vector::singleton<$tv0>(e: #0): vector<#0> {
     var v: vector<#0>
     var $t2: vector<#0>
     var $t3: &mut vector<#0>
     var $t4: #0
     var $t5: vector<#0>
  0: $t2 := Vector::empty<#0>()
  1: v := $t2
  2: $t3 := borrow_local(v)
  3: $t4 := move(e)
  4: Vector::push_back<#0>($t3, $t4)
  5: $t5 := move(v)
  6: return $t5
}


pub fun Vector::swap<$tv0>(v: &mut vector<#0>, i: u64, j: u64) {
}


pub fun Vector::swap_remove<$tv0>(v: &mut vector<#0>, i: u64): #0 {
     var last_idx: u64
     var $t3: &mut vector<#0>
     var $t4: &vector<#0>
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: &mut vector<#0>
     var $t9: u64
     var $t10: u64
     var $t11: &mut vector<#0>
     var $t12: #0
  0: $t3 := copy(v)
  1: $t4 := freeze_ref($t3)
  2: $t5 := Vector::length<#0>($t4)
  3: $t6 := 1
  4: $t7 := -($t5, $t6)
  5: last_idx := $t7
  6: $t8 := copy(v)
  7: $t9 := copy(i)
  8: $t10 := copy(last_idx)
  9: Vector::swap<#0>($t8, $t9, $t10)
 10: $t11 := move(v)
 11: $t12 := Vector::pop_back<#0>($t11)
 12: return $t12
}


pub fun Signer::address_of(s: &signer): address {
     var $t1: &signer
     var $t2: &address
     var $t3: address
  0: $t1 := move(s)
  1: $t2 := Signer::borrow_address($t1)
  2: $t3 := read_ref($t2)
  3: return $t3
}


pub fun Signer::borrow_address(s: &signer): &address {
}


fun Libra::assert_is_registered<$tv0>() {
     var tmp#$0: bool
     var tmp#$1: u64
     var $t2: address
     var $t3: bool
     var $t4: bool
     var $t5: u64
  0: $t2 := 0xa550c18
  1: $t3 := exists<Libra::Info<#0>>($t2)
  2: tmp#$0 := $t3
  3: $t4 := move(tmp#$0)
  4: if ($t4) goto L0 else goto L1
  5: L1:
  6: $t5 := 12
  7: abort($t5)
  8: L0:
  9: return ()
}


pub fun Libra::burn<$tv0>(account: &signer, preburn_address: address) {
     var $t2: address
     var $t3: &signer
     var $t4: address
     var $t5: &Libra::MintCapability<#0>
  0: $t2 := copy(preburn_address)
  1: $t3 := move(account)
  2: $t4 := Signer::address_of($t3)
  3: $t5 := borrow_global<Libra::MintCapability<#0>>($t4)
  4: Libra::burn_with_capability<#0>($t2, $t5)
  5: return ()
}


pub fun Libra::burn_with_capability<$tv0>(preburn_address: address, _capability: &Libra::MintCapability<#0>) {
     var market_cap: &mut Libra::Info<#0>
     var preburn: &mut Libra::Preburn<#0>
     var value: u64
     var $t5: address
     var $t6: &mut Libra::Preburn<#0>
     var $t7: &mut Libra::Preburn<#0>
     var $t8: &mut vector<Libra::T<#0>>
     var $t9: u64
     var $t10: Libra::T<#0>
     var $t11: u64
     var $t12: address
     var $t13: &mut Libra::Info<#0>
     var $t14: &mut Libra::Info<#0>
     var $t15: &u128
     var $t16: u128
     var $t17: u64
     var $t18: u128
     var $t19: u128
     var $t20: &mut Libra::Info<#0>
     var $t21: &mut u128
     var $t22: &mut Libra::Info<#0>
     var $t23: &u64
     var $t24: u64
     var $t25: u64
     var $t26: u64
     var $t27: &mut Libra::Info<#0>
     var $t28: &mut u64
  0: $t5 := copy(preburn_address)
  1: $t6 := borrow_global<Libra::Preburn<#0>>($t5)
  2: preburn := $t6
  3: $t7 := move(preburn)
  4: $t8 := borrow_field<Libra::Preburn<#0>>.requests($t7)
  5: $t9 := 0
  6: $t10 := Vector::remove<Libra::T<#0>>($t8, $t9)
  7: $t11 := unpack Libra::T<#0>($t10)
  8: value := $t11
  9: $t12 := 0xa550c18
 10: $t13 := borrow_global<Libra::Info<#0>>($t12)
 11: market_cap := $t13
 12: $t14 := copy(market_cap)
 13: $t15 := borrow_field<Libra::Info<#0>>.total_value($t14)
 14: $t16 := read_ref($t15)
 15: $t17 := copy(value)
 16: $t18 := (u128)($t17)
 17: $t19 := -($t16, $t18)
 18: $t20 := copy(market_cap)
 19: $t21 := borrow_field<Libra::Info<#0>>.total_value($t20)
 20: write_ref($t21, $t19)
 21: $t22 := copy(market_cap)
 22: $t23 := borrow_field<Libra::Info<#0>>.preburn_value($t22)
 23: $t24 := read_ref($t23)
 24: $t25 := copy(value)
 25: $t26 := -($t24, $t25)
 26: $t27 := move(market_cap)
 27: $t28 := borrow_field<Libra::Info<#0>>.preburn_value($t27)
 28: write_ref($t28, $t26)
 29: return ()
}


pub fun Libra::cancel_burn<$tv0>(account: &signer, preburn_address: address): Libra::T<#0> {
     var $t2: address
     var $t3: &signer
     var $t4: address
     var $t5: &Libra::MintCapability<#0>
     var $t6: Libra::T<#0>
  0: $t2 := copy(preburn_address)
  1: $t3 := move(account)
  2: $t4 := Signer::address_of($t3)
  3: $t5 := borrow_global<Libra::MintCapability<#0>>($t4)
  4: $t6 := Libra::cancel_burn_with_capability<#0>($t2, $t5)
  5: return $t6
}


pub fun Libra::cancel_burn_with_capability<$tv0>(preburn_address: address, _capability: &Libra::MintCapability<#0>): Libra::T<#0> {
     var coin: Libra::T<#0>
     var market_cap: &mut Libra::Info<#0>
     var preburn: &mut Libra::Preburn<#0>
     var $t5: address
     var $t6: &mut Libra::Preburn<#0>
     var $t7: &mut Libra::Preburn<#0>
     var $t8: &mut vector<Libra::T<#0>>
     var $t9: u64
     var $t10: Libra::T<#0>
     var $t11: address
     var $t12: &mut Libra::Info<#0>
     var $t13: &mut Libra::Info<#0>
     var $t14: &u64
     var $t15: u64
     var $t16: &Libra::T<#0>
     var $t17: u64
     var $t18: u64
     var $t19: &mut Libra::Info<#0>
     var $t20: &mut u64
     var $t21: Libra::T<#0>
  0: $t5 := copy(preburn_address)
  1: $t6 := borrow_global<Libra::Preburn<#0>>($t5)
  2: preburn := $t6
  3: $t7 := move(preburn)
  4: $t8 := borrow_field<Libra::Preburn<#0>>.requests($t7)
  5: $t9 := 0
  6: $t10 := Vector::remove<Libra::T<#0>>($t8, $t9)
  7: coin := $t10
  8: $t11 := 0xa550c18
  9: $t12 := borrow_global<Libra::Info<#0>>($t11)
 10: market_cap := $t12
 11: $t13 := copy(market_cap)
 12: $t14 := borrow_field<Libra::Info<#0>>.preburn_value($t13)
 13: $t15 := read_ref($t14)
 14: $t16 := borrow_local(coin)
 15: $t17 := Libra::value<#0>($t16)
 16: $t18 := -($t15, $t17)
 17: $t19 := move(market_cap)
 18: $t20 := borrow_field<Libra::Info<#0>>.preburn_value($t19)
 19: write_ref($t20, $t18)
 20: $t21 := move(coin)
 21: return $t21
}


pub fun Libra::deposit<$tv0>(coin_ref: &mut Libra::T<#0>, check: Libra::T<#0>) {
     var value: u64
     var $t3: Libra::T<#0>
     var $t4: u64
     var $t5: &mut Libra::T<#0>
     var $t6: &u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: &mut Libra::T<#0>
     var $t11: &mut u64
  0: $t3 := move(check)
  1: $t4 := unpack Libra::T<#0>($t3)
  2: value := $t4
  3: $t5 := copy(coin_ref)
  4: $t6 := borrow_field<Libra::T<#0>>.value($t5)
  5: $t7 := read_ref($t6)
  6: $t8 := copy(value)
  7: $t9 := +($t7, $t8)
  8: $t10 := move(coin_ref)
  9: $t11 := borrow_field<Libra::T<#0>>.value($t10)
 10: write_ref($t11, $t9)
 11: return ()
}


pub fun Libra::destroy_preburn<$tv0>(preburn: Libra::Preburn<#0>) {
     var requests: vector<Libra::T<#0>>
     var $t2: Libra::Preburn<#0>
     var $t3: vector<Libra::T<#0>>
     var $t4: bool
     var $t5: vector<Libra::T<#0>>
  0: $t2 := move(preburn)
  1: ($t3, $t4) := unpack Libra::Preburn<#0>($t2)
  2: destroy($t4)
  3: requests := $t3
  4: $t5 := move(requests)
  5: Vector::destroy_empty<Libra::T<#0>>($t5)
  6: return ()
}


pub fun Libra::preburn<$tv0>(preburn_ref: &mut Libra::Preburn<#0>, coin: Libra::T<#0>) {
     var coin_value: u64
     var market_cap: &mut Libra::Info<#0>
     var $t4: &Libra::T<#0>
     var $t5: u64
     var $t6: &mut Libra::Preburn<#0>
     var $t7: &mut vector<Libra::T<#0>>
     var $t8: Libra::T<#0>
     var $t9: address
     var $t10: &mut Libra::Info<#0>
     var $t11: &mut Libra::Info<#0>
     var $t12: &u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: &mut Libra::Info<#0>
     var $t17: &mut u64
  0: $t4 := borrow_local(coin)
  1: $t5 := Libra::value<#0>($t4)
  2: coin_value := $t5
  3: $t6 := move(preburn_ref)
  4: $t7 := borrow_field<Libra::Preburn<#0>>.requests($t6)
  5: $t8 := move(coin)
  6: Vector::push_back<Libra::T<#0>>($t7, $t8)
  7: $t9 := 0xa550c18
  8: $t10 := borrow_global<Libra::Info<#0>>($t9)
  9: market_cap := $t10
 10: $t11 := copy(market_cap)
 11: $t12 := borrow_field<Libra::Info<#0>>.preburn_value($t11)
 12: $t13 := read_ref($t12)
 13: $t14 := copy(coin_value)
 14: $t15 := +($t13, $t14)
 15: $t16 := move(market_cap)
 16: $t17 := borrow_field<Libra::Info<#0>>.preburn_value($t16)
 17: write_ref($t17, $t15)
 18: return ()
}


pub fun Libra::destroy_zero<$tv0>(coin: Libra::T<#0>) {
     var tmp#$1: bool
     var tmp#$2: u64
     var value: u64
     var $t4: Libra::T<#0>
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: bool
     var $t9: bool
     var $t10: u64
  0: $t4 := move(coin)
  1: $t5 := unpack Libra::T<#0>($t4)
  2: value := $t5
  3: $t6 := copy(value)
  4: $t7 := 0
  5: $t8 := ==($t6, $t7)
  6: tmp#$1 := $t8
  7: $t9 := move(tmp#$1)
  8: if ($t9) goto L0 else goto L1
  9: L1:
 10: $t10 := 11
 11: abort($t10)
 12: L0:
 13: return ()
}


pub fun Libra::join<$tv0>(coin1: Libra::T<#0>, coin2: Libra::T<#0>): Libra::T<#0> {
     var $t2: &mut Libra::T<#0>
     var $t3: Libra::T<#0>
     var $t4: Libra::T<#0>
  0: $t2 := borrow_local(coin1)
  1: $t3 := move(coin2)
  2: Libra::deposit<#0>($t2, $t3)
  3: $t4 := move(coin1)
  4: return $t4
}


pub fun Libra::market_cap<$tv0>(): u128 {
     var $t0: address
     var $t1: &Libra::Info<#0>
     var $t2: &u128
     var $t3: u128
  0: $t0 := 0xa550c18
  1: $t1 := borrow_global<Libra::Info<#0>>($t0)
  2: $t2 := borrow_field<Libra::Info<#0>>.total_value($t1)
  3: $t3 := read_ref($t2)
  4: return $t3
}


pub fun Libra::mint<$tv0>(account: &signer, amount: u64): Libra::T<#0> {
     var $t2: u64
     var $t3: &signer
     var $t4: address
     var $t5: &Libra::MintCapability<#0>
     var $t6: Libra::T<#0>
  0: $t2 := copy(amount)
  1: $t3 := move(account)
  2: $t4 := Signer::address_of($t3)
  3: $t5 := borrow_global<Libra::MintCapability<#0>>($t4)
  4: $t6 := Libra::mint_with_capability<#0>($t2, $t5)
  5: return $t6
}


pub fun Libra::mint_with_capability<$tv0>(value: u64, _capability: &Libra::MintCapability<#0>): Libra::T<#0> {
     var market_cap: &mut Libra::Info<#0>
     var tmp#$3: bool
     var tmp#$4: u64
     var $t5: u64
     var $t6: u64
     var $t7: bool
     var $t8: bool
     var $t9: u64
     var $t10: address
     var $t11: &mut Libra::Info<#0>
     var $t12: &mut Libra::Info<#0>
     var $t13: &u128
     var $t14: u128
     var $t15: u64
     var $t16: u128
     var $t17: u128
     var $t18: &mut Libra::Info<#0>
     var $t19: &mut u128
     var $t20: u64
     var $t21: Libra::T<#0>
  0: Libra::assert_is_registered<#0>()
  1: $t5 := copy(value)
  2: $t6 := 1000000000000000
  3: $t7 := <=($t5, $t6)
  4: tmp#$3 := $t7
  5: $t8 := move(tmp#$3)
  6: if ($t8) goto L0 else goto L1
  7: L1:
  8: $t9 := 11
  9: abort($t9)
 10: L0:
 11: $t10 := 0xa550c18
 12: $t11 := borrow_global<Libra::Info<#0>>($t10)
 13: market_cap := $t11
 14: $t12 := copy(market_cap)
 15: $t13 := borrow_field<Libra::Info<#0>>.total_value($t12)
 16: $t14 := read_ref($t13)
 17: $t15 := copy(value)
 18: $t16 := (u128)($t15)
 19: $t17 := +($t14, $t16)
 20: $t18 := move(market_cap)
 21: $t19 := borrow_field<Libra::Info<#0>>.total_value($t18)
 22: write_ref($t19, $t17)
 23: $t20 := copy(value)
 24: $t21 := pack Libra::T<#0>($t20)
 25: return $t21
}


pub fun Libra::value<$tv0>(coin_ref: &Libra::T<#0>): u64 {
     var $t1: &Libra::T<#0>
     var $t2: &u64
     var $t3: u64
  0: $t1 := move(coin_ref)
  1: $t2 := borrow_field<Libra::T<#0>>.value($t1)
  2: $t3 := read_ref($t2)
  3: return $t3
}


pub fun Libra::new_preburn<$tv0>(): Libra::Preburn<#0> {
     var $t0: vector<Libra::T<#0>>
     var $t1: bool
     var $t2: Libra::Preburn<#0>
  0: Libra::assert_is_registered<#0>()
  1: $t0 := Vector::empty<Libra::T<#0>>()
  2: $t1 := false
  3: $t2 := pack Libra::Preburn<#0>($t0, $t1)
  4: return $t2
}


pub fun Libra::preburn_to<$tv0>(account: &signer, coin: Libra::T<#0>) {
     var sender: address
     var $t3: &signer
     var $t4: address
     var $t5: address
     var $t6: &mut Libra::Preburn<#0>
     var $t7: Libra::T<#0>
  0: $t3 := move(account)
  1: $t4 := Signer::address_of($t3)
  2: sender := $t4
  3: $t5 := copy(sender)
  4: $t6 := borrow_global<Libra::Preburn<#0>>($t5)
  5: $t7 := move(coin)
  6: Libra::preburn<#0>($t6, $t7)
  7: return ()
}


pub fun Libra::preburn_value<$tv0>(): u64 {
     var $t0: address
     var $t1: &Libra::Info<#0>
     var $t2: &u64
     var $t3: u64
  0: $t0 := 0xa550c18
  1: $t1 := borrow_global<Libra::Info<#0>>($t0)
  2: $t2 := borrow_field<Libra::Info<#0>>.preburn_value($t1)
  3: $t3 := read_ref($t2)
  4: return $t3
}


pub fun Libra::publish_mint_capability<$tv0>(account: &signer, capability: Libra::MintCapability<#0>) {
     var $t2: &signer
     var $t3: Libra::MintCapability<#0>
  0: $t2 := move(account)
  1: $t3 := move(capability)
  2: move_to<Libra::MintCapability<#0>>($t3, $t2)
  3: return ()
}


pub fun Libra::publish_preburn<$tv0>(account: &signer, preburn: Libra::Preburn<#0>) {
     var $t2: &signer
     var $t3: Libra::Preburn<#0>
  0: $t2 := move(account)
  1: $t3 := move(preburn)
  2: move_to<Libra::Preburn<#0>>($t3, $t2)
  3: return ()
}


pub fun Libra::register<$tv0>(association: &signer) {
     var tmp#$1: bool
     var tmp#$2: u64
     var $t3: &signer
     var $t4: address
     var $t5: address
     var $t6: bool
     var $t7: bool
     var $t8: &signer
     var $t9: u64
     var $t10: &signer
     var $t11: bool
     var $t12: Libra::MintCapability<#0>
     var $t13: &signer
     var $t14: u128
     var $t15: u64
     var $t16: Libra::Info<#0>
  0: $t3 := copy(association)
  1: $t4 := Signer::address_of($t3)
  2: $t5 := 0xa550c18
  3: $t6 := ==($t4, $t5)
  4: tmp#$1 := $t6
  5: $t7 := move(tmp#$1)
  6: if ($t7) goto L0 else goto L1
  7: L1:
  8: $t8 := move(association)
  9: destroy($t8)
 10: $t9 := 1
 11: abort($t9)
 12: L0:
 13: $t10 := copy(association)
 14: $t11 := false
 15: $t12 := pack Libra::MintCapability<#0>($t11)
 16: move_to<Libra::MintCapability<#0>>($t12, $t10)
 17: $t13 := move(association)
 18: $t14 := 0
 19: $t15 := 0
 20: $t16 := pack Libra::Info<#0>($t14, $t15)
 21: move_to<Libra::Info<#0>>($t16, $t13)
 22: return ()
}


pub fun Libra::remove_mint_capability<$tv0>(account: &signer): Libra::MintCapability<#0> {
     var $t1: &signer
     var $t2: address
     var $t3: Libra::MintCapability<#0>
  0: $t1 := move(account)
  1: $t2 := Signer::address_of($t1)
  2: $t3 := move_from<Libra::MintCapability<#0>>($t2)
  3: return $t3
}


pub fun Libra::remove_preburn<$tv0>(account: &signer): Libra::Preburn<#0> {
     var $t1: &signer
     var $t2: address
     var $t3: Libra::Preburn<#0>
  0: $t1 := move(account)
  1: $t2 := Signer::address_of($t1)
  2: $t3 := move_from<Libra::Preburn<#0>>($t2)
  3: return $t3
}


pub fun Libra::split<$tv0>(coin: Libra::T<#0>, amount: u64): (Libra::T<#0>, Libra::T<#0>) {
     var other: Libra::T<#0>
     var $t3: &mut Libra::T<#0>
     var $t4: u64
     var $t5: Libra::T<#0>
     var $t6: Libra::T<#0>
     var $t7: Libra::T<#0>
  0: $t3 := borrow_local(coin)
  1: $t4 := copy(amount)
  2: $t5 := Libra::withdraw<#0>($t3, $t4)
  3: other := $t5
  4: $t6 := move(coin)
  5: $t7 := move(other)
  6: return ($t6, $t7)
}


pub fun Libra::withdraw<$tv0>(coin_ref: &mut Libra::T<#0>, value: u64): Libra::T<#0> {
     var tmp#$2: bool
     var tmp#$3: u64
     var $t4: &mut Libra::T<#0>
     var $t5: &u64
     var $t6: u64
     var $t7: u64
     var $t8: bool
     var $t9: bool
     var $t10: &mut Libra::T<#0>
     var $t11: u64
     var $t12: &mut Libra::T<#0>
     var $t13: &u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: &mut Libra::T<#0>
     var $t18: &mut u64
     var $t19: u64
     var $t20: Libra::T<#0>
  0: $t4 := copy(coin_ref)
  1: $t5 := borrow_field<Libra::T<#0>>.value($t4)
  2: $t6 := read_ref($t5)
  3: $t7 := copy(value)
  4: $t8 := >=($t6, $t7)
  5: tmp#$2 := $t8
  6: $t9 := move(tmp#$2)
  7: if ($t9) goto L0 else goto L1
  8: L1:
  9: $t10 := move(coin_ref)
 10: destroy($t10)
 11: $t11 := 10
 12: abort($t11)
 13: L0:
 14: $t12 := copy(coin_ref)
 15: $t13 := borrow_field<Libra::T<#0>>.value($t12)
 16: $t14 := read_ref($t13)
 17: $t15 := copy(value)
 18: $t16 := -($t14, $t15)
 19: $t17 := move(coin_ref)
 20: $t18 := borrow_field<Libra::T<#0>>.value($t17)
 21: write_ref($t18, $t16)
 22: $t19 := copy(value)
 23: $t20 := pack Libra::T<#0>($t19)
 24: return $t20
}


pub fun Libra::zero<$tv0>(): Libra::T<#0> {
     var $t0: u64
     var $t1: Libra::T<#0>
  0: Libra::assert_is_registered<#0>()
  1: $t0 := 0
  2: $t1 := pack Libra::T<#0>($t0)
  3: return $t1
}

============ after pipeline `writeback` ================

pub fun Vector::append<$tv0>(lhs: &mut vector<#0>, other: vector<#0>) {
     var $t2: &mut vector<#0>
     var $t3: vector<#0>
     var $t4: bool
     var $t5: bool
     var $t6: &mut vector<#0>
     var $t7: &mut vector<#0>
     var $t8: #0
     var $t9: &mut vector<#0>
     var $t10: vector<#0>
  0: $t2 := borrow_local(other)
  1: Vector::reverse<#0>($t2)
  2: goto L3
  3: L3:
  4: $t3 := copy(other)
  5: $t4 := Vector::is_empty<#0>($t3)
  6: $t5 := !($t4)
  7: if ($t5) goto L0 else goto L1
  8: L1:
  9: goto L2
 10: L0:
 11: $t6 := copy(lhs)
 12: $t7 := borrow_local(other)
 13: $t8 := Vector::pop_back<#0>($t7)
 14: Vector::push_back<#0>($t6, $t8)
 15: goto L3
 16: L2:
 17: $t9 := move(lhs)
 18: destroy($t9)
 19: $t10 := move(other)
 20: Vector::destroy_empty<#0>($t10)
 21: return ()
}


pub fun Vector::borrow<$tv0>(v: vector<#0>, i: u64): #0 {
}


pub fun Vector::borrow_mut<$tv0>(v: &mut vector<#0>, i: u64): &mut #0 {
}


pub fun Vector::contains<$tv0>(v: vector<#0>, e: #0): bool {
     var i: u64
     var len: u64
     var $t4: u64
     var $t5: vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: vector<#0>
     var $t11: u64
     var $t12: #0
     var $t13: #0
     var $t14: bool
     var $t15: vector<#0>
     var $t16: #0
     var $t17: bool
     var $t18: u64
     var $t19: u64
     var $t20: u64
     var $t21: vector<#0>
     var $t22: #0
     var $t23: bool
  0: $t4 := 0
  1: i := $t4
  2: $t5 := copy(v)
  3: $t6 := Vector::length<#0>($t5)
  4: len := $t6
  5: goto L6
  6: L6:
  7: $t7 := copy(i)
  8: $t8 := copy(len)
  9: $t9 := <($t7, $t8)
 10: if ($t9) goto L0 else goto L1
 11: L1:
 12: goto L2
 13: L0:
 14: $t10 := copy(v)
 15: $t11 := copy(i)
 16: $t12 := Vector::borrow<#0>($t10, $t11)
 17: $t13 := copy(e)
 18: $t14 := ==($t12, $t13)
 19: if ($t14) goto L3 else goto L4
 20: L4:
 21: goto L5
 22: L3:
 23: $t15 := move(v)
 24: destroy($t15)
 25: $t16 := move(e)
 26: destroy($t16)
 27: $t17 := true
 28: return $t17
 29: L5:
 30: $t18 := copy(i)
 31: $t19 := 1
 32: $t20 := +($t18, $t19)
 33: i := $t20
 34: goto L6
 35: L2:
 36: $t21 := move(v)
 37: destroy($t21)
 38: $t22 := move(e)
 39: destroy($t22)
 40: $t23 := false
 41: return $t23
}


pub fun Vector::destroy_empty<$tv0>(v: vector<#0>) {
}


pub fun Vector::empty<$tv0>(): vector<#0> {
}


pub fun Vector::index_of<$tv0>(v: vector<#0>, e: #0): (bool, u64) {
     var i: u64
     var len: u64
     var $t4: u64
     var $t5: vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: vector<#0>
     var $t11: u64
     var $t12: #0
     var $t13: #0
     var $t14: bool
     var $t15: vector<#0>
     var $t16: #0
     var $t17: bool
     var $t18: u64
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: vector<#0>
     var $t23: #0
     var $t24: bool
     var $t25: u64
  0: $t4 := 0
  1: i := $t4
  2: $t5 := copy(v)
  3: $t6 := Vector::length<#0>($t5)
  4: len := $t6
  5: goto L6
  6: L6:
  7: $t7 := copy(i)
  8: $t8 := copy(len)
  9: $t9 := <($t7, $t8)
 10: if ($t9) goto L0 else goto L1
 11: L1:
 12: goto L2
 13: L0:
 14: $t10 := copy(v)
 15: $t11 := copy(i)
 16: $t12 := Vector::borrow<#0>($t10, $t11)
 17: $t13 := copy(e)
 18: $t14 := ==($t12, $t13)
 19: if ($t14) goto L3 else goto L4
 20: L4:
 21: goto L5
 22: L3:
 23: $t15 := move(v)
 24: destroy($t15)
 25: $t16 := move(e)
 26: destroy($t16)
 27: $t17 := true
 28: $t18 := copy(i)
 29: return ($t17, $t18)
 30: L5:
 31: $t19 := copy(i)
 32: $t20 := 1
 33: $t21 := +($t19, $t20)
 34: i := $t21
 35: goto L6
 36: L2:
 37: $t22 := move(v)
 38: destroy($t22)
 39: $t23 := move(e)
 40: destroy($t23)
 41: $t24 := false
 42: $t25 := 0
 43: return ($t24, $t25)
}


pub fun Vector::is_empty<$tv0>(v: vector<#0>): bool {
     var $t1: vector<#0>
     var $t2: u64
     var $t3: u64
     var $t4: bool
  0: $t1 := move(v)
  1: $t2 := Vector::length<#0>($t1)
  2: $t3 := 0
  3: $t4 := ==($t2, $t3)
  4: return $t4
}


pub fun Vector::length<$tv0>(v: vector<#0>): u64 {
}


pub fun Vector::pop_back<$tv0>(v: &mut vector<#0>): #0 {
}


pub fun Vector::push_back<$tv0>(v: &mut vector<#0>, e: #0) {
}


pub fun Vector::remove<$tv0>(v: &mut vector<#0>, i: u64): #0 {
     var len: u64
     var tmp#$3: u64
     var tmp#$4: &mut vector<#0>
     var $t5: &mut vector<#0>
     var $t6: vector<#0>
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: bool
     var $t11: &mut vector<#0>
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: u64
     var $t18: bool
     var $t19: &mut vector<#0>
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: u64
     var $t24: &mut vector<#0>
     var $t25: u64
     var $t26: u64
     var $t27: &mut vector<#0>
     var $t28: #0
  0: $t5 := copy(v)
  1: $t6 := read_ref($t5)
  2: $t7 := Vector::length<#0>($t6)
  3: len := $t7
  4: $t8 := copy(i)
  5: $t9 := copy(len)
  6: $t10 := >=($t8, $t9)
  7: if ($t10) goto L0 else goto L1
  8: L1:
  9: goto L2
 10: L0:
 11: $t11 := move(v)
 12: destroy($t11)
 13: $t12 := 0
 14: abort($t12)
 15: L2:
 16: $t13 := copy(len)
 17: $t14 := 1
 18: $t15 := -($t13, $t14)
 19: len := $t15
 20: goto L6
 21: L6:
 22: $t16 := copy(i)
 23: $t17 := copy(len)
 24: $t18 := <($t16, $t17)
 25: if ($t18) goto L3 else goto L4
 26: L4:
 27: goto L5
 28: L3:
 29: $t19 := copy(v)
 30: tmp#$4 := $t19
 31: $t20 := copy(i)
 32: tmp#$3 := $t20
 33: $t21 := copy(i)
 34: $t22 := 1
 35: $t23 := +($t21, $t22)
 36: i := $t23
 37: $t24 := move(tmp#$4)
 38: $t25 := move(tmp#$3)
 39: $t26 := copy(i)
 40: Vector::swap<#0>($t24, $t25, $t26)
 41: goto L6
 42: L5:
 43: $t27 := move(v)
 44: $t28 := Vector::pop_back<#0>($t27)
 45: return $t28
}


pub fun Vector::reverse<$tv0>(v: &mut vector<#0>) {
     var back_index: u64
     var front_index: u64
     var len: u64
     var $t4: &mut vector<#0>
     var $t5: vector<#0>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: &mut vector<#0>
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: bool
     var $t18: &mut vector<#0>
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: u64
     var $t24: u64
     var $t25: u64
     var $t26: u64
     var $t27: &mut vector<#0>
  0: $t4 := copy(v)
  1: $t5 := read_ref($t4)
  2: $t6 := Vector::length<#0>($t5)
  3: len := $t6
  4: $t7 := copy(len)
  5: $t8 := 0
  6: $t9 := ==($t7, $t8)
  7: if ($t9) goto L0 else goto L1
  8: L1:
  9: goto L2
 10: L0:
 11: $t10 := move(v)
 12: destroy($t10)
 13: return ()
 14: L2:
 15: $t11 := 0
 16: front_index := $t11
 17: $t12 := copy(len)
 18: $t13 := 1
 19: $t14 := -($t12, $t13)
 20: back_index := $t14
 21: goto L6
 22: L6:
 23: $t15 := copy(front_index)
 24: $t16 := copy(back_index)
 25: $t17 := <($t15, $t16)
 26: if ($t17) goto L3 else goto L4
 27: L4:
 28: goto L5
 29: L3:
 30: $t18 := copy(v)
 31: $t19 := copy(front_index)
 32: $t20 := copy(back_index)
 33: Vector::swap<#0>($t18, $t19, $t20)
 34: $t21 := copy(front_index)
 35: $t22 := 1
 36: $t23 := +($t21, $t22)
 37: front_index := $t23
 38: $t24 := copy(back_index)
 39: $t25 := 1
 40: $t26 := -($t24, $t25)
 41: back_index := $t26
 42: goto L6
 43: L5:
 44: $t27 := move(v)
 45: destroy($t27)
 46: return ()
}


pub fun Vector::singleton<$tv0>(e: #0): vector<#0> {
     var v: vector<#0>
     var $t2: &mut vector<#0>
  0: v := Vector::empty<#0>()
  1: $t2 := borrow_local(v)
     // live_refs: $t2
     // borrowed_by: LocalRoot(v) -> {Reference($t2)}
     // borrows_from: Reference($t2) -> {LocalRoot(v)}
     // LocalRoot(v) <- $t2
  2: Vector::push_back<#0>($t2, e)
     // dirty_nodes: LocalRoot(v), Reference($t2)
  3: return v
}


pub fun Vector::swap<$tv0>(v: &mut vector<#0>, i: u64, j: u64) {
}


pub fun Vector::swap_remove<$tv0>(v: &mut vector<#0>, i: u64): #0 {
     var last_idx: u64
     var $t3: &mut vector<#0>
     var $t4: vector<#0>
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: &mut vector<#0>
     var $t9: u64
     var $t10: u64
     var $t11: &mut vector<#0>
     var $t12: #0
  0: $t3 := copy(v)
  1: $t4 := read_ref($t3)
  2: $t5 := Vector::length<#0>($t4)
  3: $t6 := 1
  4: $t7 := -($t5, $t6)
  5: last_idx := $t7
  6: $t8 := copy(v)
  7: $t9 := copy(i)
  8: $t10 := copy(last_idx)
  9: Vector::swap<#0>($t8, $t9, $t10)
 10: $t11 := move(v)
 11: $t12 := Vector::pop_back<#0>($t11)
 12: return $t12
}


pub fun Signer::address_of(s: signer): address {
     var $t1: address
  0: $t1 := Signer::borrow_address(s)
  1: return $t1
}


pub fun Signer::borrow_address(s: signer): address {
}


fun Libra::assert_is_registered<$tv0>() {
     var tmp#$0: bool
     var tmp#$1: u64
     var $t2: address
     var $t3: bool
     var $t4: u64
  0: $t2 := 0xa550c18
  1: $t3 := exists<Libra::Info<#0>>($t2)
  2: if ($t3) goto L0 else goto L1
  3: L1:
  4: $t4 := 12
  5: abort($t4)
  6: L0:
  7: return ()
}


pub fun Libra::burn<$tv0>(account: signer, preburn_address: address) {
     var $t2: address
     var $t3: Libra::MintCapability<#0>
  0: $t2 := Signer::address_of(account)
  1: $t3 := get_global<Libra::MintCapability<#0>>($t2)
  2: Libra::burn_with_capability<#0>(preburn_address, $t3)
  3: return ()
}


pub fun Libra::burn_with_capability<$tv0>(preburn_address: address, _capability: Libra::MintCapability<#0>) {
     var market_cap: &mut Libra::Info<#0>
     var preburn: &mut Libra::Preburn<#0>
     var value: u64
     var $t5: &mut vector<Libra::T<#0>>
     var $t6: u64
     var $t7: Libra::T<#0>
     var $t8: address
     var $t9: u128
     var $t10: u128
     var $t11: u128
     var $t12: &mut u128
     var $t13: u64
     var $t14: u64
     var $t15: &mut u64
  0: preburn := borrow_global<Libra::Preburn<#0>>(preburn_address)
     // live_refs: preburn
     // borrowed_by: Libra::Preburn -> {Reference(preburn)}
     // borrows_from: Reference(preburn) -> {Libra::Preburn}
  1: $t5 := borrow_field<Libra::Preburn<#0>>.requests(preburn)
     // live_refs: $t5
     // borrowed_by: Libra::Preburn -> {Reference($t5)}, Reference(preburn) -> {Reference($t5)}
     // borrows_from: Reference($t5) -> {Libra::Preburn, Reference(preburn)}
  2: $t6 := 0
     // live_refs: $t5
     // borrowed_by: Libra::Preburn -> {Reference($t5)}, Reference(preburn) -> {Reference($t5)}
     // borrows_from: Reference($t5) -> {Libra::Preburn, Reference(preburn)}
     // Libra::Preburn <- $t5, Reference(preburn) <- $t5
  3: $t7 := Vector::remove<Libra::T<#0>>($t5, $t6)
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
  4: value := unpack Libra::T<#0>($t7)
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
  5: $t8 := 0xa550c18
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
  6: market_cap := borrow_global<Libra::Info<#0>>($t8)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
  7: $t9 := get_field<Libra::Info<#0>>.total_value(market_cap)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
  8: $t10 := (u128)(value)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
  9: $t11 := -($t9, $t10)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
 10: $t12 := borrow_field<Libra::Info<#0>>.total_value(market_cap)
     // live_refs: market_cap, $t12
     // borrowed_by: Libra::Info -> {Reference(market_cap)}, Reference(market_cap) -> {Reference($t12)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}, Reference($t12) -> {Reference(market_cap)}
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
     // Reference(market_cap) <- $t12
 11: write_ref($t12, $t11)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: Libra::Info, Libra::Preburn, Reference(market_cap), Reference(preburn), Reference($t5), Reference($t12)
 12: $t13 := get_field<Libra::Info<#0>>.preburn_value(market_cap)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: Libra::Info, Libra::Preburn, Reference(market_cap), Reference(preburn), Reference($t5), Reference($t12)
 13: $t14 := -($t13, value)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: Libra::Info, Libra::Preburn, Reference(market_cap), Reference(preburn), Reference($t5), Reference($t12)
     // Libra::Info <- market_cap
 14: $t15 := borrow_field<Libra::Info<#0>>.preburn_value(market_cap)
     // live_refs: $t15
     // borrowed_by: Libra::Info -> {Reference($t15)}, Reference(market_cap) -> {Reference($t15)}
     // borrows_from: Reference($t15) -> {Libra::Info, Reference(market_cap)}
     // dirty_nodes: Libra::Info, Libra::Preburn, Reference(market_cap), Reference(preburn), Reference($t5), Reference($t12)
     // Libra::Info <- $t15, Reference(market_cap) <- $t15
 15: write_ref($t15, $t14)
     // dirty_nodes: Libra::Info, Libra::Preburn, Reference(market_cap), Reference(preburn), Reference($t5), Reference($t12), Reference($t15)
 16: return ()
}


pub fun Libra::cancel_burn<$tv0>(account: signer, preburn_address: address): Libra::T<#0> {
     var $t2: address
     var $t3: Libra::MintCapability<#0>
     var $t4: Libra::T<#0>
  0: $t2 := Signer::address_of(account)
  1: $t3 := get_global<Libra::MintCapability<#0>>($t2)
  2: $t4 := Libra::cancel_burn_with_capability<#0>(preburn_address, $t3)
  3: return $t4
}


pub fun Libra::cancel_burn_with_capability<$tv0>(preburn_address: address, _capability: Libra::MintCapability<#0>): Libra::T<#0> {
     var coin: Libra::T<#0>
     var market_cap: &mut Libra::Info<#0>
     var preburn: &mut Libra::Preburn<#0>
     var $t5: &mut vector<Libra::T<#0>>
     var $t6: u64
     var $t7: address
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: &mut u64
  0: preburn := borrow_global<Libra::Preburn<#0>>(preburn_address)
     // live_refs: preburn
     // borrowed_by: Libra::Preburn -> {Reference(preburn)}
     // borrows_from: Reference(preburn) -> {Libra::Preburn}
  1: $t5 := borrow_field<Libra::Preburn<#0>>.requests(preburn)
     // live_refs: $t5
     // borrowed_by: Libra::Preburn -> {Reference($t5)}, Reference(preburn) -> {Reference($t5)}
     // borrows_from: Reference($t5) -> {Libra::Preburn, Reference(preburn)}
  2: $t6 := 0
     // live_refs: $t5
     // borrowed_by: Libra::Preburn -> {Reference($t5)}, Reference(preburn) -> {Reference($t5)}
     // borrows_from: Reference($t5) -> {Libra::Preburn, Reference(preburn)}
     // Libra::Preburn <- $t5, Reference(preburn) <- $t5
  3: coin := Vector::remove<Libra::T<#0>>($t5, $t6)
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
  4: $t7 := 0xa550c18
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
  5: market_cap := borrow_global<Libra::Info<#0>>($t7)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
  6: $t8 := get_field<Libra::Info<#0>>.preburn_value(market_cap)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
  7: $t9 := Libra::value<#0>(coin)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
  8: $t10 := -($t8, $t9)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
  9: $t11 := borrow_field<Libra::Info<#0>>.preburn_value(market_cap)
     // live_refs: $t11
     // borrowed_by: Libra::Info -> {Reference($t11)}, Reference(market_cap) -> {Reference($t11)}
     // borrows_from: Reference($t11) -> {Libra::Info, Reference(market_cap)}
     // dirty_nodes: Libra::Preburn, Reference(preburn), Reference($t5)
     // Libra::Info <- $t11, Reference(market_cap) <- $t11
 10: write_ref($t11, $t10)
     // dirty_nodes: Libra::Info, Libra::Preburn, Reference(market_cap), Reference(preburn), Reference($t5), Reference($t11)
 11: return coin
}


pub fun Libra::deposit<$tv0>(coin_ref: &mut Libra::T<#0>, check: Libra::T<#0>) {
     var value: u64
     var $t3: u64
     var $t4: u64
     var $t5: &mut u64
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
  0: value := unpack Libra::T<#0>(check)
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
  1: $t3 := get_field<Libra::T<#0>>.value(coin_ref)
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
  2: $t4 := +($t3, value)
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
  3: $t5 := borrow_field<Libra::T<#0>>.value(coin_ref)
     // live_refs: $t5
     // borrowed_by: LocalRoot(coin_ref) -> {Reference($t5)}, Reference(coin_ref) -> {Reference($t5)}
     // borrows_from: Reference($t5) -> {LocalRoot(coin_ref), Reference(coin_ref)}
     // LocalRoot(coin_ref) <- $t5, Reference(coin_ref) <- $t5
  4: write_ref($t5, $t4)
     // dirty_nodes: LocalRoot(coin_ref), Reference(coin_ref), Reference($t5)
  5: return ()
}


pub fun Libra::destroy_preburn<$tv0>(preburn: Libra::Preburn<#0>) {
     var requests: vector<Libra::T<#0>>
     var $t2: vector<Libra::T<#0>>
     var $t3: bool
  0: ($t2, $t3) := unpack Libra::Preburn<#0>(preburn)
  1: destroy($t3)
  2: requests := $t2
  3: Vector::destroy_empty<Libra::T<#0>>(requests)
  4: return ()
}


pub fun Libra::preburn<$tv0>(preburn_ref: &mut Libra::Preburn<#0>, coin: Libra::T<#0>) {
     var coin_value: u64
     var market_cap: &mut Libra::Info<#0>
     var $t4: &mut vector<Libra::T<#0>>
     var $t5: address
     var $t6: u64
     var $t7: u64
     var $t8: &mut u64
     // live_refs: preburn_ref
     // borrowed_by: LocalRoot(preburn_ref) -> {Reference(preburn_ref)}
     // borrows_from: Reference(preburn_ref) -> {LocalRoot(preburn_ref)}
  0: coin_value := Libra::value<#0>(coin)
     // live_refs: preburn_ref
     // borrowed_by: LocalRoot(preburn_ref) -> {Reference(preburn_ref)}
     // borrows_from: Reference(preburn_ref) -> {LocalRoot(preburn_ref)}
  1: $t4 := borrow_field<Libra::Preburn<#0>>.requests(preburn_ref)
     // live_refs: $t4
     // borrowed_by: LocalRoot(preburn_ref) -> {Reference($t4)}, Reference(preburn_ref) -> {Reference($t4)}
     // borrows_from: Reference($t4) -> {LocalRoot(preburn_ref), Reference(preburn_ref)}
     // LocalRoot(preburn_ref) <- $t4, Reference(preburn_ref) <- $t4
  2: Vector::push_back<Libra::T<#0>>($t4, coin)
     // dirty_nodes: LocalRoot(preburn_ref), Reference(preburn_ref), Reference($t4)
  3: $t5 := 0xa550c18
     // dirty_nodes: LocalRoot(preburn_ref), Reference(preburn_ref), Reference($t4)
  4: market_cap := borrow_global<Libra::Info<#0>>($t5)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: LocalRoot(preburn_ref), Reference(preburn_ref), Reference($t4)
  5: $t6 := get_field<Libra::Info<#0>>.preburn_value(market_cap)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: LocalRoot(preburn_ref), Reference(preburn_ref), Reference($t4)
  6: $t7 := +($t6, coin_value)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
     // dirty_nodes: LocalRoot(preburn_ref), Reference(preburn_ref), Reference($t4)
  7: $t8 := borrow_field<Libra::Info<#0>>.preburn_value(market_cap)
     // live_refs: $t8
     // borrowed_by: Libra::Info -> {Reference($t8)}, Reference(market_cap) -> {Reference($t8)}
     // borrows_from: Reference($t8) -> {Libra::Info, Reference(market_cap)}
     // dirty_nodes: LocalRoot(preburn_ref), Reference(preburn_ref), Reference($t4)
     // Libra::Info <- $t8, Reference(market_cap) <- $t8
  8: write_ref($t8, $t7)
     // dirty_nodes: Libra::Info, LocalRoot(preburn_ref), Reference(preburn_ref), Reference(market_cap), Reference($t4), Reference($t8)
  9: return ()
}


pub fun Libra::destroy_zero<$tv0>(coin: Libra::T<#0>) {
     var tmp#$1: bool
     var tmp#$2: u64
     var value: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
  0: value := unpack Libra::T<#0>(coin)
  1: $t4 := 0
  2: $t5 := ==(value, $t4)
  3: if ($t5) goto L0 else goto L1
  4: L1:
  5: $t6 := 11
  6: abort($t6)
  7: L0:
  8: return ()
}


pub fun Libra::join<$tv0>(coin1: Libra::T<#0>, coin2: Libra::T<#0>): Libra::T<#0> {
     var $t2: &mut Libra::T<#0>
  0: $t2 := borrow_local(coin1)
     // live_refs: $t2
     // borrowed_by: LocalRoot(coin1) -> {Reference($t2)}
     // borrows_from: Reference($t2) -> {LocalRoot(coin1)}
     // LocalRoot(coin1) <- $t2
  1: Libra::deposit<#0>($t2, coin2)
     // dirty_nodes: LocalRoot(coin1), Reference($t2)
  2: return coin1
}


pub fun Libra::market_cap<$tv0>(): u128 {
     var $t0: address
     var $t1: Libra::Info<#0>
     var $t2: u128
  0: $t0 := 0xa550c18
  1: $t1 := get_global<Libra::Info<#0>>($t0)
  2: $t2 := get_field<Libra::Info<#0>>.total_value($t1)
  3: return $t2
}


pub fun Libra::mint<$tv0>(account: signer, amount: u64): Libra::T<#0> {
     var $t2: address
     var $t3: Libra::MintCapability<#0>
     var $t4: Libra::T<#0>
  0: $t2 := Signer::address_of(account)
  1: $t3 := get_global<Libra::MintCapability<#0>>($t2)
  2: $t4 := Libra::mint_with_capability<#0>(amount, $t3)
  3: return $t4
}


pub fun Libra::mint_with_capability<$tv0>(value: u64, _capability: Libra::MintCapability<#0>): Libra::T<#0> {
     var market_cap: &mut Libra::Info<#0>
     var tmp#$3: bool
     var tmp#$4: u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: address
     var $t9: u128
     var $t10: u128
     var $t11: u128
     var $t12: &mut u128
     var $t13: Libra::T<#0>
  0: Libra::assert_is_registered<#0>()
  1: $t5 := 1000000000000000
  2: $t6 := <=(value, $t5)
  3: if ($t6) goto L0 else goto L1
  4: L1:
  5: $t7 := 11
  6: abort($t7)
  7: L0:
  8: $t8 := 0xa550c18
  9: market_cap := borrow_global<Libra::Info<#0>>($t8)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
 10: $t9 := get_field<Libra::Info<#0>>.total_value(market_cap)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
 11: $t10 := (u128)(value)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
 12: $t11 := +($t9, $t10)
     // live_refs: market_cap
     // borrowed_by: Libra::Info -> {Reference(market_cap)}
     // borrows_from: Reference(market_cap) -> {Libra::Info}
 13: $t12 := borrow_field<Libra::Info<#0>>.total_value(market_cap)
     // live_refs: $t12
     // borrowed_by: Libra::Info -> {Reference($t12)}, Reference(market_cap) -> {Reference($t12)}
     // borrows_from: Reference($t12) -> {Libra::Info, Reference(market_cap)}
     // Libra::Info <- $t12, Reference(market_cap) <- $t12
 14: write_ref($t12, $t11)
     // dirty_nodes: Libra::Info, Reference(market_cap), Reference($t12)
 15: $t13 := pack Libra::T<#0>(value)
     // dirty_nodes: Libra::Info, Reference(market_cap), Reference($t12)
 16: return $t13
}


pub fun Libra::value<$tv0>(coin_ref: Libra::T<#0>): u64 {
     var $t1: u64
  0: $t1 := get_field<Libra::T<#0>>.value(coin_ref)
  1: return $t1
}


pub fun Libra::new_preburn<$tv0>(): Libra::Preburn<#0> {
     var $t0: vector<Libra::T<#0>>
     var $t1: bool
     var $t2: Libra::Preburn<#0>
  0: Libra::assert_is_registered<#0>()
  1: $t0 := Vector::empty<Libra::T<#0>>()
  2: $t1 := false
  3: $t2 := pack Libra::Preburn<#0>($t0, $t1)
  4: return $t2
}


pub fun Libra::preburn_to<$tv0>(account: signer, coin: Libra::T<#0>) {
     var sender: address
     var $t3: &mut Libra::Preburn<#0>
  0: sender := Signer::address_of(account)
  1: $t3 := borrow_global<Libra::Preburn<#0>>(sender)
     // live_refs: $t3
     // borrowed_by: Libra::Preburn -> {Reference($t3)}
     // borrows_from: Reference($t3) -> {Libra::Preburn}
     // Libra::Preburn <- $t3
  2: Libra::preburn<#0>($t3, coin)
     // dirty_nodes: Libra::Preburn, Reference($t3)
  3: return ()
}


pub fun Libra::preburn_value<$tv0>(): u64 {
     var $t0: address
     var $t1: Libra::Info<#0>
     var $t2: u64
  0: $t0 := 0xa550c18
  1: $t1 := get_global<Libra::Info<#0>>($t0)
  2: $t2 := get_field<Libra::Info<#0>>.preburn_value($t1)
  3: return $t2
}


pub fun Libra::publish_mint_capability<$tv0>(account: signer, capability: Libra::MintCapability<#0>) {
  0: move_to<Libra::MintCapability<#0>>(capability, account)
  1: return ()
}


pub fun Libra::publish_preburn<$tv0>(account: signer, preburn: Libra::Preburn<#0>) {
  0: move_to<Libra::Preburn<#0>>(preburn, account)
  1: return ()
}


pub fun Libra::register<$tv0>(association: signer) {
     var tmp#$1: bool
     var tmp#$2: u64
     var $t3: address
     var $t4: address
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: Libra::MintCapability<#0>
     var $t9: u128
     var $t10: u64
     var $t11: Libra::Info<#0>
  0: $t3 := Signer::address_of(association)
  1: $t4 := 0xa550c18
  2: $t5 := ==($t3, $t4)
  3: if ($t5) goto L0 else goto L1
  4: L1:
  5: destroy(association)
  6: $t6 := 1
  7: abort($t6)
  8: L0:
  9: $t7 := false
 10: $t8 := pack Libra::MintCapability<#0>($t7)
 11: move_to<Libra::MintCapability<#0>>($t8, association)
 12: $t9 := 0
 13: $t10 := 0
 14: $t11 := pack Libra::Info<#0>($t9, $t10)
 15: move_to<Libra::Info<#0>>($t11, association)
 16: return ()
}


pub fun Libra::remove_mint_capability<$tv0>(account: signer): Libra::MintCapability<#0> {
     var $t1: address
     var $t2: Libra::MintCapability<#0>
  0: $t1 := Signer::address_of(account)
  1: $t2 := move_from<Libra::MintCapability<#0>>($t1)
  2: return $t2
}


pub fun Libra::remove_preburn<$tv0>(account: signer): Libra::Preburn<#0> {
     var $t1: address
     var $t2: Libra::Preburn<#0>
  0: $t1 := Signer::address_of(account)
  1: $t2 := move_from<Libra::Preburn<#0>>($t1)
  2: return $t2
}


pub fun Libra::split<$tv0>(coin: Libra::T<#0>, amount: u64): (Libra::T<#0>, Libra::T<#0>) {
     var other: Libra::T<#0>
     var $t3: &mut Libra::T<#0>
  0: $t3 := borrow_local(coin)
     // live_refs: $t3
     // borrowed_by: LocalRoot(coin) -> {Reference($t3)}
     // borrows_from: Reference($t3) -> {LocalRoot(coin)}
     // LocalRoot(coin) <- $t3
  1: other := Libra::withdraw<#0>($t3, amount)
     // dirty_nodes: LocalRoot(coin), Reference($t3)
  2: return (coin, other)
}


pub fun Libra::withdraw<$tv0>(coin_ref: &mut Libra::T<#0>, value: u64): Libra::T<#0> {
     var tmp#$2: bool
     var tmp#$3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: &mut u64
     var $t10: Libra::T<#0>
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
  0: $t4 := get_field<Libra::T<#0>>.value(coin_ref)
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
  1: $t5 := >=($t4, value)
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
  2: if ($t5) goto L0 else goto L1
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
  3: L1:
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
  4: destroy(coin_ref)
  5: $t6 := 10
  6: abort($t6)
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
  7: L0:
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
  8: $t7 := get_field<Libra::T<#0>>.value(coin_ref)
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
  9: $t8 := -($t7, value)
     // live_refs: coin_ref
     // borrowed_by: LocalRoot(coin_ref) -> {Reference(coin_ref)}
     // borrows_from: Reference(coin_ref) -> {LocalRoot(coin_ref)}
 10: $t9 := borrow_field<Libra::T<#0>>.value(coin_ref)
     // live_refs: $t9
     // borrowed_by: LocalRoot(coin_ref) -> {Reference($t9)}, Reference(coin_ref) -> {Reference($t9)}
     // borrows_from: Reference($t9) -> {LocalRoot(coin_ref), Reference(coin_ref)}
     // LocalRoot(coin_ref) <- $t9, Reference(coin_ref) <- $t9
 11: write_ref($t9, $t8)
     // dirty_nodes: LocalRoot(coin_ref), Reference(coin_ref), Reference($t9)
 12: $t10 := pack Libra::T<#0>(value)
     // dirty_nodes: LocalRoot(coin_ref), Reference(coin_ref), Reference($t9)
 13: return $t10
}


pub fun Libra::zero<$tv0>(): Libra::T<#0> {
     var $t0: u64
     var $t1: Libra::T<#0>
  0: Libra::assert_is_registered<#0>()
  1: $t0 := 0
  2: $t1 := pack Libra::T<#0>($t0)
  3: return $t1
}
