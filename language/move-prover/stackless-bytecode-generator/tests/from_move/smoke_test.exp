============ initial translation from Move ================

pub fun Signer::address_of(s: &signer): address {
    var $t1: &signer
    var $t2: &address
    var $t3: address
    $t1 := move(s)
    $t2 := Signer::borrow_address($t1)
    $t3 := read_ref($t2)
    return $t3
}


pub fun Signer::borrow_address(s: &signer): &address {
}


fun SmokeTest::arithmetic_ops(a: u64): (u64, u64) {
    var c: u64
    var $t2: u64
    var $t3: u64
    var $t4: u64
    var $t5: bool
    var $t6: u64
    var $t7: u64
    var $t8: u64
    $t2 := 2
    c := $t2
    $t3 := copy(c)
    $t4 := 2
    $t5 := !=($t3, $t4)
    if ($t5) goto L0 else goto L1
    L1:
    goto L2
    L0:
    $t6 := 42
    abort($t6)
    L2:
    $t7 := copy(c)
    $t8 := copy(a)
    return ($t7, $t8)
}


fun SmokeTest::bool_ops(a: u64, b: u64): (bool, bool) {
    var c: bool
    var d: bool
    var $t4: bool
    var $t5: bool
    var $t6: u64
    var $t7: u64
    var $t8: bool
    var $t9: u64
    var $t10: u64
    var $t11: bool
    var $t12: bool
    var $t13: bool
    var $t14: u64
    var $t15: u64
    var $t16: bool
    var $t17: bool
    var $t18: u64
    var $t19: u64
    var $t20: bool
    var $t21: bool
    var $t22: bool
    var $t23: bool
    var $t24: bool
    var $t25: bool
    var $t26: u64
    var $t27: bool
    var $t28: bool
    $t6 := copy(a)
    $t7 := copy(b)
    $t8 := >($t6, $t7)
    if ($t8) goto L0 else goto L1
    L1:
    goto L2
    L0:
    $t9 := copy(a)
    $t10 := copy(b)
    $t11 := >=($t9, $t10)
    $t4 := $t11
    goto L3
    L2:
    $t12 := false
    $t4 := $t12
    goto L3
    L3:
    $t13 := move($t4)
    c := $t13
    $t14 := copy(a)
    $t15 := copy(b)
    $t16 := <($t14, $t15)
    if ($t16) goto L4 else goto L5
    L5:
    goto L6
    L4:
    $t17 := true
    $t5 := $t17
    goto L7
    L6:
    $t18 := copy(a)
    $t19 := copy(b)
    $t20 := <=($t18, $t19)
    $t5 := $t20
    goto L7
    L7:
    $t21 := move($t5)
    d := $t21
    $t22 := copy(c)
    $t23 := copy(d)
    $t24 := !=($t22, $t23)
    $t25 := !($t24)
    if ($t25) goto L8 else goto L9
    L9:
    goto L10
    L8:
    $t26 := 42
    abort($t26)
    L10:
    $t27 := copy(c)
    $t28 := copy(d)
    return ($t27, $t28)
}


fun SmokeTest::borrow_global_mut_test(a: address) {
    var r: &mut SmokeTest::R
    var r2: &mut SmokeTest::R
    var $t3: address
    var $t4: &mut SmokeTest::R
    var $t5: &mut SmokeTest::R
    var $t6: address
    var $t7: &mut SmokeTest::R
    var $t8: &mut SmokeTest::R
    $t3 := copy(a)
    $t4 := borrow_global<SmokeTest::R>($t3)
    r := $t4
    $t5 := move(r)
    destroy($t5)
    $t6 := copy(a)
    $t7 := borrow_global<SmokeTest::R>($t6)
    r2 := $t7
    $t8 := move(r2)
    destroy($t8)
    return ()
}


fun SmokeTest::create_resource(sender: &signer) {
    var $t1: &signer
    var $t2: u64
    var $t3: SmokeTest::R
    $t1 := move(sender)
    $t2 := 1
    $t3 := pack SmokeTest::R($t2)
    move_to<SmokeTest::R>($t3, $t1)
    return ()
}


fun SmokeTest::create_resoure_generic(sender: &signer) {
    var $t1: &signer
    var $t2: u64
    var $t3: SmokeTest::G<u64>
    $t1 := move(sender)
    $t2 := 1
    $t3 := pack SmokeTest::G<u64>($t2)
    move_to<SmokeTest::G<u64>>($t3, $t1)
    return ()
}


fun SmokeTest::exists_resource(sender: &signer): bool {
    var $t1: &signer
    var $t2: address
    var $t3: bool
    $t1 := move(sender)
    $t2 := Signer::address_of($t1)
    $t3 := exists<SmokeTest::R>($t2)
    return $t3
}


fun SmokeTest::identity(a: SmokeTest::A, b: SmokeTest::B, c: SmokeTest::C): (SmokeTest::A, SmokeTest::B, SmokeTest::C) {
    var $t3: SmokeTest::A
    var $t4: SmokeTest::B
    var $t5: SmokeTest::C
    $t3 := move(a)
    $t4 := move(b)
    $t5 := move(c)
    return ($t3, $t4, $t5)
}


fun SmokeTest::move_from_addr(a: address) {
    var r: SmokeTest::R
    var $t2: address
    var $t3: SmokeTest::R
    var $t4: SmokeTest::R
    var $t5: u64
    $t2 := copy(a)
    $t3 := move_from<SmokeTest::R>($t2)
    r := $t3
    $t4 := move(r)
    $t5 := unpack SmokeTest::R($t4)
    destroy($t5)
    return ()
}


fun SmokeTest::move_from_addr_to_sender(sender: &signer, a: address) {
    var r: SmokeTest::R
    var x: u64
    var $t4: address
    var $t5: SmokeTest::R
    var $t6: SmokeTest::R
    var $t7: u64
    var $t8: &signer
    var $t9: u64
    var $t10: SmokeTest::R
    $t4 := copy(a)
    $t5 := move_from<SmokeTest::R>($t4)
    r := $t5
    $t6 := move(r)
    $t7 := unpack SmokeTest::R($t6)
    x := $t7
    $t8 := move(sender)
    $t9 := copy(x)
    $t10 := pack SmokeTest::R($t9)
    move_to<SmokeTest::R>($t10, $t8)
    return ()
}


fun SmokeTest::pack_A(a: address, va: u64): SmokeTest::A {
    var $t2: address
    var $t3: u64
    var $t4: SmokeTest::A
    $t2 := copy(a)
    $t3 := copy(va)
    $t4 := pack SmokeTest::A($t2, $t3)
    return $t4
}


fun SmokeTest::pack_B(a: address, va: u64, vb: u64): SmokeTest::B {
    var var_a: SmokeTest::A
    var var_b: SmokeTest::B
    var $t5: address
    var $t6: u64
    var $t7: SmokeTest::A
    var $t8: u64
    var $t9: SmokeTest::A
    var $t10: SmokeTest::B
    var $t11: SmokeTest::B
    $t5 := copy(a)
    $t6 := copy(va)
    $t7 := pack SmokeTest::A($t5, $t6)
    var_a := $t7
    $t8 := copy(vb)
    $t9 := move(var_a)
    $t10 := pack SmokeTest::B($t8, $t9)
    var_b := $t10
    $t11 := move(var_b)
    return $t11
}


fun SmokeTest::pack_C(a: address, va: u64, vb: u64, vc: u64): SmokeTest::C {
    var var_a: SmokeTest::A
    var var_b: SmokeTest::B
    var var_c: SmokeTest::C
    var $t7: address
    var $t8: u64
    var $t9: SmokeTest::A
    var $t10: u64
    var $t11: SmokeTest::A
    var $t12: SmokeTest::B
    var $t13: u64
    var $t14: SmokeTest::B
    var $t15: SmokeTest::C
    var $t16: SmokeTest::C
    $t7 := copy(a)
    $t8 := copy(va)
    $t9 := pack SmokeTest::A($t7, $t8)
    var_a := $t9
    $t10 := copy(vb)
    $t11 := move(var_a)
    $t12 := pack SmokeTest::B($t10, $t11)
    var_b := $t12
    $t13 := copy(vc)
    $t14 := move(var_b)
    $t15 := pack SmokeTest::C($t13, $t14)
    var_c := $t15
    $t16 := move(var_c)
    return $t16
}


fun SmokeTest::ref_A(a: address, b: bool): SmokeTest::A {
    var b_val_ref: &u64
    var b_var: u64
    var $t4: SmokeTest::A
    var var_a: SmokeTest::A
    var var_a_ref: &SmokeTest::A
    var $t7: bool
    var $t8: address
    var $t9: u64
    var $t10: SmokeTest::A
    var $t11: address
    var $t12: u64
    var $t13: SmokeTest::A
    var $t14: SmokeTest::A
    var $t15: &SmokeTest::A
    var $t16: &SmokeTest::A
    var $t17: &u64
    var $t18: &u64
    var $t19: u64
    var $t20: u64
    var $t21: u64
    var $t22: bool
    var $t23: u64
    var $t24: SmokeTest::A
    $t7 := copy(b)
    if ($t7) goto L0 else goto L1
    L1:
    goto L2
    L0:
    $t8 := copy(a)
    $t9 := 1
    $t10 := pack SmokeTest::A($t8, $t9)
    $t4 := $t10
    goto L3
    L2:
    $t11 := copy(a)
    $t12 := 42
    $t13 := pack SmokeTest::A($t11, $t12)
    $t4 := $t13
    goto L3
    L3:
    $t14 := move($t4)
    var_a := $t14
    $t15 := borrow_local(var_a)
    var_a_ref := $t15
    $t16 := move(var_a_ref)
    $t17 := borrow_field<SmokeTest::A>.val($t16)
    b_val_ref := $t17
    $t18 := move(b_val_ref)
    $t19 := read_ref($t18)
    b_var := $t19
    $t20 := copy(b_var)
    $t21 := 42
    $t22 := !=($t20, $t21)
    if ($t22) goto L4 else goto L5
    L5:
    goto L6
    L4:
    $t23 := 42
    abort($t23)
    L6:
    $t24 := move(var_a)
    return $t24
}


fun SmokeTest::unpack_A(a: address, va: u64): (address, u64) {
    var aa: address
    var v1: u64
    var var_a: SmokeTest::A
    var $t5: address
    var $t6: u64
    var $t7: SmokeTest::A
    var $t8: SmokeTest::A
    var $t9: address
    var $t10: u64
    var $t11: address
    var $t12: u64
    $t5 := copy(a)
    $t6 := copy(va)
    $t7 := pack SmokeTest::A($t5, $t6)
    var_a := $t7
    $t8 := move(var_a)
    ($t9, $t10) := unpack SmokeTest::A($t8)
    v1 := $t10
    aa := $t9
    $t11 := copy(aa)
    $t12 := copy(v1)
    return ($t11, $t12)
}


fun SmokeTest::unpack_B(a: address, va: u64, vb: u64): (address, u64, u64) {
    var aa: address
    var v1: u64
    var v2: u64
    var var_a: SmokeTest::A
    var var_b: SmokeTest::B
    var $t8: address
    var $t9: u64
    var $t10: SmokeTest::A
    var $t11: u64
    var $t12: SmokeTest::A
    var $t13: SmokeTest::B
    var $t14: SmokeTest::B
    var $t15: u64
    var $t16: SmokeTest::A
    var $t17: address
    var $t18: u64
    var $t19: address
    var $t20: u64
    var $t21: u64
    $t8 := copy(a)
    $t9 := copy(va)
    $t10 := pack SmokeTest::A($t8, $t9)
    var_a := $t10
    $t11 := copy(vb)
    $t12 := move(var_a)
    $t13 := pack SmokeTest::B($t11, $t12)
    var_b := $t13
    $t14 := move(var_b)
    ($t15, $t16) := unpack SmokeTest::B($t14)
    ($t17, $t18) := unpack SmokeTest::A($t16)
    v1 := $t18
    aa := $t17
    v2 := $t15
    $t19 := copy(aa)
    $t20 := copy(v1)
    $t21 := copy(v2)
    return ($t19, $t20, $t21)
}


fun SmokeTest::unpack_C(a: address, va: u64, vb: u64, vc: u64): (address, u64, u64, u64) {
    var aa: address
    var v1: u64
    var v2: u64
    var v3: u64
    var var_a: SmokeTest::A
    var var_b: SmokeTest::B
    var var_c: SmokeTest::C
    var $t11: address
    var $t12: u64
    var $t13: SmokeTest::A
    var $t14: u64
    var $t15: SmokeTest::A
    var $t16: SmokeTest::B
    var $t17: u64
    var $t18: SmokeTest::B
    var $t19: SmokeTest::C
    var $t20: SmokeTest::C
    var $t21: u64
    var $t22: SmokeTest::B
    var $t23: u64
    var $t24: SmokeTest::A
    var $t25: address
    var $t26: u64
    var $t27: address
    var $t28: u64
    var $t29: u64
    var $t30: u64
    $t11 := copy(a)
    $t12 := copy(va)
    $t13 := pack SmokeTest::A($t11, $t12)
    var_a := $t13
    $t14 := copy(vb)
    $t15 := move(var_a)
    $t16 := pack SmokeTest::B($t14, $t15)
    var_b := $t16
    $t17 := copy(vc)
    $t18 := move(var_b)
    $t19 := pack SmokeTest::C($t17, $t18)
    var_c := $t19
    $t20 := move(var_c)
    ($t21, $t22) := unpack SmokeTest::C($t20)
    ($t23, $t24) := unpack SmokeTest::B($t22)
    ($t25, $t26) := unpack SmokeTest::A($t24)
    v1 := $t26
    aa := $t25
    v2 := $t23
    v3 := $t21
    $t27 := copy(aa)
    $t28 := copy(v1)
    $t29 := copy(v2)
    $t30 := copy(v3)
    return ($t27, $t28, $t29, $t30)
}
