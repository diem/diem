============ initial translation from Move ================

fun TestBorrow::test1(): TestBorrow::R {
     var r: TestBorrow::R
     var r_ref: &mut TestBorrow::R
     var x_ref: &mut u64
     var $t3: u64
     var $t4: TestBorrow::R
     var $t5: &mut TestBorrow::R
     var $t6: &mut TestBorrow::R
     var $t7: &mut u64
     var $t8: u64
     var $t9: &mut u64
     var $t10: TestBorrow::R
  0: $t3 := 3
  1: $t4 := pack TestBorrow::R($t3)
  2: r := $t4
  3: $t5 := borrow_local(r)
  4: r_ref := $t5
  5: $t6 := move(r_ref)
  6: $t7 := borrow_field<TestBorrow::R>.x($t6)
  7: x_ref := $t7
  8: $t8 := 0
  9: $t9 := move(x_ref)
 10: write_ref($t9, $t8)
 11: $t10 := move(r)
 12: return $t10
}


fun TestBorrow::test2(x_ref: &mut u64, v: u64) {
     var $t2: u64
     var $t3: &mut u64
  0: $t2 := copy(v)
  1: $t3 := move(x_ref)
  2: write_ref($t3, $t2)
  3: return ()
}


pub fun TestBorrow::test3(r_ref: &mut TestBorrow::R, v: u64) {
     var x_ref: &mut u64
     var $t3: &mut TestBorrow::R
     var $t4: &mut u64
     var $t5: &mut u64
     var $t6: u64
  0: $t3 := move(r_ref)
  1: $t4 := borrow_field<TestBorrow::R>.x($t3)
  2: x_ref := $t4
  3: $t5 := move(x_ref)
  4: $t6 := copy(v)
  5: TestBorrow::test2($t5, $t6)
  6: return ()
}


fun TestBorrow::test4(): TestBorrow::R {
     var r: TestBorrow::R
     var r_ref: &mut TestBorrow::R
     var $t2: u64
     var $t3: TestBorrow::R
     var $t4: &mut TestBorrow::R
     var $t5: &mut TestBorrow::R
     var $t6: u64
     var $t7: TestBorrow::R
  0: $t2 := 3
  1: $t3 := pack TestBorrow::R($t2)
  2: r := $t3
  3: $t4 := borrow_local(r)
  4: r_ref := $t4
  5: $t5 := move(r_ref)
  6: $t6 := 0
  7: TestBorrow::test3($t5, $t6)
  8: $t7 := move(r)
  9: return $t7
}


pub fun TestBorrow::test5(r_ref: &mut TestBorrow::R): &mut u64 {
     var $t1: &mut TestBorrow::R
     var $t2: &mut u64
  0: $t1 := move(r_ref)
  1: $t2 := borrow_field<TestBorrow::R>.x($t1)
  2: return $t2
}


fun TestBorrow::test6(): TestBorrow::R {
     var r: TestBorrow::R
     var r_ref: &mut TestBorrow::R
     var x_ref: &mut u64
     var $t3: u64
     var $t4: TestBorrow::R
     var $t5: &mut TestBorrow::R
     var $t6: &mut TestBorrow::R
     var $t7: &mut u64
     var $t8: &mut u64
     var $t9: u64
     var $t10: TestBorrow::R
  0: $t3 := 3
  1: $t4 := pack TestBorrow::R($t3)
  2: r := $t4
  3: $t5 := borrow_local(r)
  4: r_ref := $t5
  5: $t6 := move(r_ref)
  6: $t7 := TestBorrow::test5($t6)
  7: x_ref := $t7
  8: $t8 := move(x_ref)
  9: $t9 := 0
 10: TestBorrow::test2($t8, $t9)
 11: $t10 := move(r)
 12: return $t10
}


fun TestBorrow::test7(b: bool) {
     var r1: TestBorrow::R
     var r2: TestBorrow::R
     var r_ref: &mut TestBorrow::R
     var $t4: u64
     var $t5: TestBorrow::R
     var $t6: u64
     var $t7: TestBorrow::R
     var $t8: &mut TestBorrow::R
     var $t9: bool
     var $t10: &mut TestBorrow::R
     var $t11: &mut TestBorrow::R
     var $t12: &mut TestBorrow::R
     var $t13: u64
  0: $t4 := 3
  1: $t5 := pack TestBorrow::R($t4)
  2: r1 := $t5
  3: $t6 := 4
  4: $t7 := pack TestBorrow::R($t6)
  5: r2 := $t7
  6: $t8 := borrow_local(r1)
  7: r_ref := $t8
  8: $t9 := copy(b)
  9: if ($t9) goto L0 else goto L1
 10: L1:
 11: goto L2
 12: L0:
 13: $t10 := move(r_ref)
 14: destroy($t10)
 15: $t11 := borrow_local(r2)
 16: r_ref := $t11
 17: goto L2
 18: L2:
 19: $t12 := move(r_ref)
 20: $t13 := 0
 21: TestBorrow::test3($t12, $t13)
 22: return ()
}


fun TestBorrow::test8(b: bool, n: u64, r_ref: &mut TestBorrow::R) {
     var r1: TestBorrow::R
     var r2: TestBorrow::R
     var t_ref: &mut TestBorrow::R
     var $t6: u64
     var $t7: TestBorrow::R
     var $t8: u64
     var $t9: TestBorrow::R
     var $t10: &mut TestBorrow::R
     var $t11: u64
     var $t12: u64
     var $t13: bool
     var $t14: &mut TestBorrow::R
     var $t15: u64
     var $t16: u64
     var $t17: u64
     var $t18: u64
     var $t19: bool
     var $t20: &mut TestBorrow::R
     var $t21: &mut TestBorrow::R
     var $t22: u64
     var $t23: u64
     var $t24: u64
     var $t25: bool
     var $t26: &mut TestBorrow::R
     var $t27: &mut TestBorrow::R
     var $t28: u64
     var $t29: &mut TestBorrow::R
     var $t30: &mut TestBorrow::R
     var $t31: u64
  0: $t6 := 3
  1: $t7 := pack TestBorrow::R($t6)
  2: r1 := $t7
  3: $t8 := 4
  4: $t9 := pack TestBorrow::R($t8)
  5: r2 := $t9
  6: $t10 := borrow_local(r2)
  7: t_ref := $t10
  8: goto L7
  9: L7:
 10: $t11 := 0
 11: $t12 := copy(n)
 12: $t13 := <($t11, $t12)
 13: if ($t13) goto L0 else goto L1
 14: L1:
 15: goto L2
 16: L0:
 17: $t14 := move(t_ref)
 18: destroy($t14)
 19: $t15 := copy(n)
 20: $t16 := 2
 21: $t17 := /($t15, $t16)
 22: $t18 := 0
 23: $t19 := ==($t17, $t18)
 24: if ($t19) goto L3 else goto L4
 25: L4:
 26: goto L5
 27: L3:
 28: $t20 := borrow_local(r1)
 29: t_ref := $t20
 30: goto L6
 31: L5:
 32: $t21 := borrow_local(r2)
 33: t_ref := $t21
 34: goto L6
 35: L6:
 36: $t22 := copy(n)
 37: $t23 := 1
 38: $t24 := -($t22, $t23)
 39: n := $t24
 40: goto L7
 41: L2:
 42: $t25 := copy(b)
 43: if ($t25) goto L8 else goto L9
 44: L9:
 45: goto L10
 46: L8:
 47: $t26 := move(t_ref)
 48: destroy($t26)
 49: $t27 := move(r_ref)
 50: $t28 := 0
 51: TestBorrow::test3($t27, $t28)
 52: goto L11
 53: L10:
 54: $t29 := move(r_ref)
 55: destroy($t29)
 56: $t30 := move(t_ref)
 57: $t31 := 0
 58: TestBorrow::test3($t30, $t31)
 59: goto L11
 60: L11:
 61: return ()
}

============ after pipeline `borrow` ================

fun TestBorrow::test1(): TestBorrow::R {
     var r: TestBorrow::R
     var r_ref: &mut TestBorrow::R
     var x_ref: &mut u64
     var $t3: u64
     var $t4: u64
  0: $t3 := 3
  1: r := pack TestBorrow::R($t3)
  2: r_ref := borrow_local(r)
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r)}
  3: x_ref := borrow_field<TestBorrow::R>.x(r_ref)
     // live_refs: x_ref
     // borrowed_by: LocalRoot(r) -> {Reference(x_ref)}, Reference(r_ref) -> {Reference(x_ref)}
     // borrows_from: Reference(x_ref) -> {LocalRoot(r), Reference(r_ref)}
  4: $t4 := 0
     // live_refs: x_ref
     // borrowed_by: LocalRoot(r) -> {Reference(x_ref)}, Reference(r_ref) -> {Reference(x_ref)}
     // borrows_from: Reference(x_ref) -> {LocalRoot(r), Reference(r_ref)}
  5: write_ref(x_ref, $t4)
     // dirty_nodes: LocalRoot(r), Reference(r_ref), Reference(x_ref)
  6: return r
}


fun TestBorrow::test2(x_ref: &mut u64, v: u64) {
     // live_refs: x_ref
     // borrowed_by: LocalRoot(x_ref) -> {Reference(x_ref)}
     // borrows_from: Reference(x_ref) -> {LocalRoot(x_ref)}
  0: write_ref(x_ref, v)
     // dirty_nodes: LocalRoot(x_ref), Reference(x_ref)
  1: return ()
}


pub fun TestBorrow::test3(r_ref: &mut TestBorrow::R, v: u64) {
     var x_ref: &mut u64
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
  0: x_ref := borrow_field<TestBorrow::R>.x(r_ref)
     // live_refs: x_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(x_ref)}, Reference(r_ref) -> {Reference(x_ref)}
     // borrows_from: Reference(x_ref) -> {LocalRoot(r_ref), Reference(r_ref)}
  1: TestBorrow::test2(x_ref, v)
     // dirty_nodes: LocalRoot(r_ref), Reference(r_ref), Reference(x_ref)
  2: return ()
}


fun TestBorrow::test4(): TestBorrow::R {
     var r: TestBorrow::R
     var r_ref: &mut TestBorrow::R
     var $t2: u64
     var $t3: u64
  0: $t2 := 3
  1: r := pack TestBorrow::R($t2)
  2: r_ref := borrow_local(r)
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r)}
  3: $t3 := 0
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r)}
  4: TestBorrow::test3(r_ref, $t3)
     // dirty_nodes: LocalRoot(r), Reference(r_ref)
  5: return r
}


pub fun TestBorrow::test5(r_ref: &mut TestBorrow::R): &mut u64 {
     var $t1: &mut u64
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
  0: $t1 := borrow_field<TestBorrow::R>.x(r_ref)
     // live_refs: $t1
     // borrowed_by: LocalRoot(r_ref) -> {Reference($t1)}, Reference(r_ref) -> {Reference($t1)}
     // borrows_from: Reference($t1) -> {LocalRoot(r_ref), Reference(r_ref)}
  1: return $t1
}


fun TestBorrow::test6(): TestBorrow::R {
     var r: TestBorrow::R
     var r_ref: &mut TestBorrow::R
     var x_ref: &mut u64
     var $t3: u64
     var $t4: u64
  0: $t3 := 3
  1: r := pack TestBorrow::R($t3)
  2: r_ref := borrow_local(r)
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r)}
  3: x_ref := TestBorrow::test5(r_ref)
     // live_refs: x_ref
     // borrowed_by: LocalRoot(r) -> {Reference(x_ref)}, Reference(r_ref) -> {Reference(x_ref)}
     // borrows_from: Reference(x_ref) -> {LocalRoot(r), Reference(r_ref)}
     // dirty_nodes: LocalRoot(r), Reference(r_ref)
  4: $t4 := 0
     // live_refs: x_ref
     // borrowed_by: LocalRoot(r) -> {Reference(x_ref)}, Reference(r_ref) -> {Reference(x_ref)}
     // borrows_from: Reference(x_ref) -> {LocalRoot(r), Reference(r_ref)}
     // dirty_nodes: LocalRoot(r), Reference(r_ref)
  5: TestBorrow::test2(x_ref, $t4)
     // dirty_nodes: LocalRoot(r), Reference(r_ref), Reference(x_ref)
  6: return r
}


fun TestBorrow::test7(b: bool) {
     var r1: TestBorrow::R
     var r2: TestBorrow::R
     var r_ref: &mut TestBorrow::R
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t4 := 3
  1: r1 := pack TestBorrow::R($t4)
  2: $t5 := 4
  3: r2 := pack TestBorrow::R($t5)
  4: r_ref := borrow_local(r1)
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r1) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r1)}
  5: if (b) goto L0 else goto L1
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r1) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r1)}
  6: L1:
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r1) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r1)}
  7: goto L2
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r1) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r1)}
  8: L0:
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r1) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r1)}
  9: destroy(r_ref)
 10: r_ref := borrow_local(r2)
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r2) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r2)}
 11: goto L2
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r1) -> {Reference(r_ref)}, LocalRoot(r2) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 12: L2:
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r1) -> {Reference(r_ref)}, LocalRoot(r2) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 13: $t6 := 0
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r1) -> {Reference(r_ref)}, LocalRoot(r2) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 14: TestBorrow::test3(r_ref, $t6)
     // dirty_nodes: LocalRoot(r1), LocalRoot(r2), Reference(r_ref)
 15: return ()
}


fun TestBorrow::test8(b: bool, n: u64, r_ref: &mut TestBorrow::R) {
     var r1: TestBorrow::R
     var r2: TestBorrow::R
     var t_ref: &mut TestBorrow::R
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: u64
     var $t11: u64
     var $t12: u64
     var $t13: bool
     var $t14: u64
     var $t15: u64
     var $t16: u64
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
  0: $t6 := 3
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
  1: r1 := pack TestBorrow::R($t6)
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
  2: $t7 := 4
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
  3: r2 := pack TestBorrow::R($t7)
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
  4: t_ref := borrow_local(r2)
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r2)}
  5: goto L7
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
  6: L7:
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
  7: $t8 := 0
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
  8: $t9 := <($t8, n)
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
  9: if ($t9) goto L0 else goto L1
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 10: L1:
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 11: goto L2
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 12: L0:
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 13: destroy(t_ref)
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 14: $t10 := 2
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 15: $t11 := /(n, $t10)
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 16: $t12 := 0
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 17: $t13 := ==($t11, $t12)
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 18: if ($t13) goto L3 else goto L4
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 19: L4:
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 20: goto L5
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 21: L3:
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 22: t_ref := borrow_local(r1)
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1)}
 23: goto L6
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 24: L5:
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 25: t_ref := borrow_local(r2)
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r2)}
 26: goto L6
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 27: L6:
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 28: $t14 := 1
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 29: n := -(n, $t14)
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 30: goto L7
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 31: L2:
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 32: if (b) goto L8 else goto L9
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 33: L9:
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 34: goto L10
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 35: L8:
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 36: destroy(t_ref)
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 37: $t15 := 0
     // live_refs: r_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
 38: TestBorrow::test3(r_ref, $t15)
     // dirty_nodes: LocalRoot(r_ref), Reference(r_ref)
 39: goto L11
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 40: L10:
     // live_refs: r_ref, t_ref
     // borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 41: destroy(r_ref)
     // live_refs: t_ref
     // borrowed_by: LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 42: $t16 := 0
     // live_refs: t_ref
     // borrowed_by: LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)}
     // borrows_from: Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
 43: TestBorrow::test3(t_ref, $t16)
     // dirty_nodes: LocalRoot(r1), LocalRoot(r2), Reference(t_ref)
 44: goto L11
     // dirty_nodes: LocalRoot(r_ref), LocalRoot(r1), LocalRoot(r2), Reference(r_ref), Reference(t_ref)
 45: L11:
     // dirty_nodes: LocalRoot(r_ref), LocalRoot(r1), LocalRoot(r2), Reference(r_ref), Reference(t_ref)
 46: return ()
}
