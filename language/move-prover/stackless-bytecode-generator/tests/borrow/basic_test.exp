============ initial translation from Move ================

fun TestBorrow::test1(): TestBorrow::R {
    var r: TestBorrow::R
    var r_ref: &mut TestBorrow::R
    var x_ref: &mut u64
    var $t3: u64
    var $t4: TestBorrow::R
    var $t5: &mut TestBorrow::R
    var $t6: &mut TestBorrow::R
    var $t7: &mut u64
    var $t8: u64
    var $t9: &mut u64
    var $t10: TestBorrow::R
    $t3 := 3
    $t4 := pack TestBorrow::R($t3)
    r := $t4
    $t5 := borrow_local(r)
    r_ref := $t5
    $t6 := move(r_ref)
    $t7 := borrow_field<TestBorrow::R>.x($t6)
    x_ref := $t7
    $t8 := 0
    $t9 := move(x_ref)
    write_ref($t9, $t8)
    $t10 := move(r)
    return $t10
}


fun TestBorrow::test2(x_ref: &mut u64, v: u64) {
    var $t2: u64
    var $t3: &mut u64
    $t2 := copy(v)
    $t3 := move(x_ref)
    write_ref($t3, $t2)
    return ()
}


pub fun TestBorrow::test3(r_ref: &mut TestBorrow::R, v: u64) {
    var x_ref: &mut u64
    var $t3: &mut TestBorrow::R
    var $t4: &mut u64
    var $t5: &mut u64
    var $t6: u64
    $t3 := move(r_ref)
    $t4 := borrow_field<TestBorrow::R>.x($t3)
    x_ref := $t4
    $t5 := move(x_ref)
    $t6 := copy(v)
    TestBorrow::test2($t5, $t6)
    return ()
}


fun TestBorrow::test4(): TestBorrow::R {
    var r: TestBorrow::R
    var r_ref: &mut TestBorrow::R
    var $t2: u64
    var $t3: TestBorrow::R
    var $t4: &mut TestBorrow::R
    var $t5: &mut TestBorrow::R
    var $t6: u64
    var $t7: TestBorrow::R
    $t2 := 3
    $t3 := pack TestBorrow::R($t2)
    r := $t3
    $t4 := borrow_local(r)
    r_ref := $t4
    $t5 := move(r_ref)
    $t6 := 0
    TestBorrow::test3($t5, $t6)
    $t7 := move(r)
    return $t7
}


pub fun TestBorrow::test5(r_ref: &mut TestBorrow::R): &mut u64 {
    var $t1: &mut TestBorrow::R
    var $t2: &mut u64
    $t1 := move(r_ref)
    $t2 := borrow_field<TestBorrow::R>.x($t1)
    return $t2
}


fun TestBorrow::test6(): TestBorrow::R {
    var r: TestBorrow::R
    var r_ref: &mut TestBorrow::R
    var x_ref: &mut u64
    var $t3: u64
    var $t4: TestBorrow::R
    var $t5: &mut TestBorrow::R
    var $t6: &mut TestBorrow::R
    var $t7: &mut u64
    var $t8: &mut u64
    var $t9: u64
    var $t10: TestBorrow::R
    $t3 := 3
    $t4 := pack TestBorrow::R($t3)
    r := $t4
    $t5 := borrow_local(r)
    r_ref := $t5
    $t6 := move(r_ref)
    $t7 := TestBorrow::test5($t6)
    x_ref := $t7
    $t8 := move(x_ref)
    $t9 := 0
    TestBorrow::test2($t8, $t9)
    $t10 := move(r)
    return $t10
}


fun TestBorrow::test7(b: bool) {
    var r1: TestBorrow::R
    var r2: TestBorrow::R
    var r_ref: &mut TestBorrow::R
    var $t4: u64
    var $t5: TestBorrow::R
    var $t6: u64
    var $t7: TestBorrow::R
    var $t8: &mut TestBorrow::R
    var $t9: bool
    var $t10: &mut TestBorrow::R
    var $t11: &mut TestBorrow::R
    var $t12: &mut TestBorrow::R
    var $t13: u64
    $t4 := 3
    $t5 := pack TestBorrow::R($t4)
    r1 := $t5
    $t6 := 4
    $t7 := pack TestBorrow::R($t6)
    r2 := $t7
    $t8 := borrow_local(r1)
    r_ref := $t8
    $t9 := copy(b)
    if ($t9) goto L0 else goto L1
    L1:
    goto L2
    L0:
    $t10 := move(r_ref)
    destroy($t10)
    $t11 := borrow_local(r2)
    r_ref := $t11
    goto L2
    L2:
    $t12 := move(r_ref)
    $t13 := 0
    TestBorrow::test3($t12, $t13)
    return ()
}


fun TestBorrow::test8(b: bool, n: u64, r_ref: &mut TestBorrow::R) {
    var r1: TestBorrow::R
    var r2: TestBorrow::R
    var t_ref: &mut TestBorrow::R
    var $t6: u64
    var $t7: TestBorrow::R
    var $t8: u64
    var $t9: TestBorrow::R
    var $t10: &mut TestBorrow::R
    var $t11: u64
    var $t12: u64
    var $t13: bool
    var $t14: &mut TestBorrow::R
    var $t15: u64
    var $t16: u64
    var $t17: u64
    var $t18: u64
    var $t19: bool
    var $t20: &mut TestBorrow::R
    var $t21: &mut TestBorrow::R
    var $t22: u64
    var $t23: u64
    var $t24: u64
    var $t25: bool
    var $t26: &mut TestBorrow::R
    var $t27: &mut TestBorrow::R
    var $t28: u64
    var $t29: &mut TestBorrow::R
    var $t30: &mut TestBorrow::R
    var $t31: u64
    $t6 := 3
    $t7 := pack TestBorrow::R($t6)
    r1 := $t7
    $t8 := 4
    $t9 := pack TestBorrow::R($t8)
    r2 := $t9
    $t10 := borrow_local(r2)
    t_ref := $t10
    goto L7
    L7:
    $t11 := 0
    $t12 := copy(n)
    $t13 := <($t11, $t12)
    if ($t13) goto L0 else goto L1
    L1:
    goto L2
    L0:
    $t14 := move(t_ref)
    destroy($t14)
    $t15 := copy(n)
    $t16 := 2
    $t17 := /($t15, $t16)
    $t18 := 0
    $t19 := ==($t17, $t18)
    if ($t19) goto L3 else goto L4
    L4:
    goto L5
    L3:
    $t20 := borrow_local(r1)
    t_ref := $t20
    goto L6
    L5:
    $t21 := borrow_local(r2)
    t_ref := $t21
    goto L6
    L6:
    $t22 := copy(n)
    $t23 := 1
    $t24 := -($t22, $t23)
    n := $t24
    goto L7
    L2:
    $t25 := copy(b)
    if ($t25) goto L8 else goto L9
    L9:
    goto L10
    L8:
    $t26 := move(t_ref)
    destroy($t26)
    $t27 := move(r_ref)
    $t28 := 0
    TestBorrow::test3($t27, $t28)
    goto L11
    L10:
    $t29 := move(r_ref)
    destroy($t29)
    $t30 := move(t_ref)
    $t31 := 0
    TestBorrow::test3($t30, $t31)
    goto L11
    L11:
    return ()
}

============ after pipeline `borrow` ================

fun TestBorrow::test1(): TestBorrow::R {
    var r: TestBorrow::R
    var r_ref: &mut TestBorrow::R
    var x_ref: &mut u64
    var $t3: u64
    var $t4: TestBorrow::R
    var $t5: &mut TestBorrow::R
    var $t6: &mut TestBorrow::R
    var $t7: &mut u64
    var $t8: u64
    var $t9: &mut u64
    var $t10: TestBorrow::R
    $t3 := 3
    $t4 := pack TestBorrow::R($t3)
    r := $t4
    $t5 := borrow_local(r)
    // live_refs: $t5 borrowed_by: LocalRoot(r) -> {Reference($t5)} borrows_from: Reference($t5) -> {LocalRoot(r)}
    r_ref := $t5
    // live_refs: r_ref borrowed_by: LocalRoot(r) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r)}
    $t6 := move(r_ref)
    // live_refs: $t6 borrowed_by: LocalRoot(r) -> {Reference($t6)} borrows_from: Reference($t6) -> {LocalRoot(r)}
    $t7 := borrow_field<TestBorrow::R>.x($t6)
    // live_refs: $t7 borrowed_by: LocalRoot(r) -> {Reference($t7)}, Reference($t6) -> {Reference($t7)} borrows_from: Reference($t7) -> {LocalRoot(r), Reference($t6)}
    x_ref := $t7
    // live_refs: x_ref borrowed_by: LocalRoot(r) -> {Reference(x_ref)}, Reference($t6) -> {Reference(x_ref)} borrows_from: Reference(x_ref) -> {LocalRoot(r), Reference($t6)}
    $t8 := 0
    // live_refs: x_ref borrowed_by: LocalRoot(r) -> {Reference(x_ref)}, Reference($t6) -> {Reference(x_ref)} borrows_from: Reference(x_ref) -> {LocalRoot(r), Reference($t6)}
    $t9 := move(x_ref)
    // live_refs: $t9 borrowed_by: LocalRoot(r) -> {Reference($t9)}, Reference($t6) -> {Reference($t9)} borrows_from: Reference($t9) -> {LocalRoot(r), Reference($t6)}
    write_ref($t9, $t8)
    $t10 := move(r)
    return $t10
}


fun TestBorrow::test2(x_ref: &mut u64, v: u64) {
    var $t2: u64
    var $t3: &mut u64
    // live_refs: x_ref borrowed_by: LocalRoot(x_ref) -> {Reference(x_ref)} borrows_from: Reference(x_ref) -> {LocalRoot(x_ref)}
    $t2 := copy(v)
    // live_refs: x_ref borrowed_by: LocalRoot(x_ref) -> {Reference(x_ref)} borrows_from: Reference(x_ref) -> {LocalRoot(x_ref)}
    $t3 := move(x_ref)
    // live_refs: $t3 borrowed_by: LocalRoot(x_ref) -> {Reference($t3)} borrows_from: Reference($t3) -> {LocalRoot(x_ref)}
    write_ref($t3, $t2)
    return ()
}


pub fun TestBorrow::test3(r_ref: &mut TestBorrow::R, v: u64) {
    var x_ref: &mut u64
    var $t3: &mut TestBorrow::R
    var $t4: &mut u64
    var $t5: &mut u64
    var $t6: u64
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t3 := move(r_ref)
    // live_refs: $t3 borrowed_by: LocalRoot(r_ref) -> {Reference($t3)} borrows_from: Reference($t3) -> {LocalRoot(r_ref)}
    $t4 := borrow_field<TestBorrow::R>.x($t3)
    // live_refs: $t4 borrowed_by: LocalRoot(r_ref) -> {Reference($t4)}, Reference($t3) -> {Reference($t4)} borrows_from: Reference($t4) -> {LocalRoot(r_ref), Reference($t3)}
    x_ref := $t4
    // live_refs: x_ref borrowed_by: LocalRoot(r_ref) -> {Reference(x_ref)}, Reference($t3) -> {Reference(x_ref)} borrows_from: Reference(x_ref) -> {LocalRoot(r_ref), Reference($t3)}
    $t5 := move(x_ref)
    // live_refs: $t5 borrowed_by: LocalRoot(r_ref) -> {Reference($t5)}, Reference($t3) -> {Reference($t5)} borrows_from: Reference($t5) -> {LocalRoot(r_ref), Reference($t3)}
    $t6 := copy(v)
    // live_refs: $t5 borrowed_by: LocalRoot(r_ref) -> {Reference($t5)}, Reference($t3) -> {Reference($t5)} borrows_from: Reference($t5) -> {LocalRoot(r_ref), Reference($t3)}
    TestBorrow::test2($t5, $t6)
    return ()
}


fun TestBorrow::test4(): TestBorrow::R {
    var r: TestBorrow::R
    var r_ref: &mut TestBorrow::R
    var $t2: u64
    var $t3: TestBorrow::R
    var $t4: &mut TestBorrow::R
    var $t5: &mut TestBorrow::R
    var $t6: u64
    var $t7: TestBorrow::R
    $t2 := 3
    $t3 := pack TestBorrow::R($t2)
    r := $t3
    $t4 := borrow_local(r)
    // live_refs: $t4 borrowed_by: LocalRoot(r) -> {Reference($t4)} borrows_from: Reference($t4) -> {LocalRoot(r)}
    r_ref := $t4
    // live_refs: r_ref borrowed_by: LocalRoot(r) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r)}
    $t5 := move(r_ref)
    // live_refs: $t5 borrowed_by: LocalRoot(r) -> {Reference($t5)} borrows_from: Reference($t5) -> {LocalRoot(r)}
    $t6 := 0
    // live_refs: $t5 borrowed_by: LocalRoot(r) -> {Reference($t5)} borrows_from: Reference($t5) -> {LocalRoot(r)}
    TestBorrow::test3($t5, $t6)
    $t7 := move(r)
    return $t7
}


pub fun TestBorrow::test5(r_ref: &mut TestBorrow::R): &mut u64 {
    var $t1: &mut TestBorrow::R
    var $t2: &mut u64
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t1 := move(r_ref)
    // live_refs: $t1 borrowed_by: LocalRoot(r_ref) -> {Reference($t1)} borrows_from: Reference($t1) -> {LocalRoot(r_ref)}
    $t2 := borrow_field<TestBorrow::R>.x($t1)
    // live_refs: $t2 borrowed_by: LocalRoot(r_ref) -> {Reference($t2)}, Reference($t1) -> {Reference($t2)} borrows_from: Reference($t2) -> {LocalRoot(r_ref), Reference($t1)}
    return $t2
}


fun TestBorrow::test6(): TestBorrow::R {
    var r: TestBorrow::R
    var r_ref: &mut TestBorrow::R
    var x_ref: &mut u64
    var $t3: u64
    var $t4: TestBorrow::R
    var $t5: &mut TestBorrow::R
    var $t6: &mut TestBorrow::R
    var $t7: &mut u64
    var $t8: &mut u64
    var $t9: u64
    var $t10: TestBorrow::R
    $t3 := 3
    $t4 := pack TestBorrow::R($t3)
    r := $t4
    $t5 := borrow_local(r)
    // live_refs: $t5 borrowed_by: LocalRoot(r) -> {Reference($t5)} borrows_from: Reference($t5) -> {LocalRoot(r)}
    r_ref := $t5
    // live_refs: r_ref borrowed_by: LocalRoot(r) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r)}
    $t6 := move(r_ref)
    // live_refs: $t6 borrowed_by: LocalRoot(r) -> {Reference($t6)} borrows_from: Reference($t6) -> {LocalRoot(r)}
    $t7 := TestBorrow::test5($t6)
    // live_refs: $t7 borrowed_by: LocalRoot(r) -> {Reference($t7)}, Reference($t6) -> {Reference($t7)} borrows_from: Reference($t7) -> {LocalRoot(r), Reference($t6)}
    x_ref := $t7
    // live_refs: x_ref borrowed_by: LocalRoot(r) -> {Reference(x_ref)}, Reference($t6) -> {Reference(x_ref)} borrows_from: Reference(x_ref) -> {LocalRoot(r), Reference($t6)}
    $t8 := move(x_ref)
    // live_refs: $t8 borrowed_by: LocalRoot(r) -> {Reference($t8)}, Reference($t6) -> {Reference($t8)} borrows_from: Reference($t8) -> {LocalRoot(r), Reference($t6)}
    $t9 := 0
    // live_refs: $t8 borrowed_by: LocalRoot(r) -> {Reference($t8)}, Reference($t6) -> {Reference($t8)} borrows_from: Reference($t8) -> {LocalRoot(r), Reference($t6)}
    TestBorrow::test2($t8, $t9)
    $t10 := move(r)
    return $t10
}


fun TestBorrow::test7(b: bool) {
    var r1: TestBorrow::R
    var r2: TestBorrow::R
    var r_ref: &mut TestBorrow::R
    var $t4: u64
    var $t5: TestBorrow::R
    var $t6: u64
    var $t7: TestBorrow::R
    var $t8: &mut TestBorrow::R
    var $t9: bool
    var $t10: &mut TestBorrow::R
    var $t11: &mut TestBorrow::R
    var $t12: &mut TestBorrow::R
    var $t13: u64
    $t4 := 3
    $t5 := pack TestBorrow::R($t4)
    r1 := $t5
    $t6 := 4
    $t7 := pack TestBorrow::R($t6)
    r2 := $t7
    $t8 := borrow_local(r1)
    // live_refs: $t8 borrowed_by: LocalRoot(r1) -> {Reference($t8)} borrows_from: Reference($t8) -> {LocalRoot(r1)}
    r_ref := $t8
    // live_refs: r_ref borrowed_by: LocalRoot(r1) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r1)}
    $t9 := copy(b)
    // live_refs: r_ref borrowed_by: LocalRoot(r1) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r1)}
    if ($t9) goto L0 else goto L1
    // live_refs: r_ref borrowed_by: LocalRoot(r1) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r1)}
    L1:
    // live_refs: r_ref borrowed_by: LocalRoot(r1) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r1)}
    goto L2
    // live_refs: r_ref borrowed_by: LocalRoot(r1) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r1)}
    L0:
    // live_refs: r_ref borrowed_by: LocalRoot(r1) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r1)}
    $t10 := move(r_ref)
    // live_refs: $t10 borrowed_by: LocalRoot(r1) -> {Reference($t10)} borrows_from: Reference($t10) -> {LocalRoot(r1)}
    destroy($t10)
    $t11 := borrow_local(r2)
    // live_refs: $t11 borrowed_by: LocalRoot(r2) -> {Reference($t11)} borrows_from: Reference($t11) -> {LocalRoot(r2)}
    r_ref := $t11
    // live_refs: r_ref borrowed_by: LocalRoot(r2) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r2)}
    goto L2
    // live_refs: r_ref borrowed_by: LocalRoot(r1) -> {Reference(r_ref)}, LocalRoot(r2) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    L2:
    // live_refs: r_ref borrowed_by: LocalRoot(r1) -> {Reference(r_ref)}, LocalRoot(r2) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    $t12 := move(r_ref)
    // live_refs: $t12 borrowed_by: LocalRoot(r1) -> {Reference($t12)}, LocalRoot(r2) -> {Reference($t12)} borrows_from: Reference($t12) -> {LocalRoot(r1), LocalRoot(r2)}
    $t13 := 0
    // live_refs: $t12 borrowed_by: LocalRoot(r1) -> {Reference($t12)}, LocalRoot(r2) -> {Reference($t12)} borrows_from: Reference($t12) -> {LocalRoot(r1), LocalRoot(r2)}
    TestBorrow::test3($t12, $t13)
    return ()
}


fun TestBorrow::test8(b: bool, n: u64, r_ref: &mut TestBorrow::R) {
    var r1: TestBorrow::R
    var r2: TestBorrow::R
    var t_ref: &mut TestBorrow::R
    var $t6: u64
    var $t7: TestBorrow::R
    var $t8: u64
    var $t9: TestBorrow::R
    var $t10: &mut TestBorrow::R
    var $t11: u64
    var $t12: u64
    var $t13: bool
    var $t14: &mut TestBorrow::R
    var $t15: u64
    var $t16: u64
    var $t17: u64
    var $t18: u64
    var $t19: bool
    var $t20: &mut TestBorrow::R
    var $t21: &mut TestBorrow::R
    var $t22: u64
    var $t23: u64
    var $t24: u64
    var $t25: bool
    var $t26: &mut TestBorrow::R
    var $t27: &mut TestBorrow::R
    var $t28: u64
    var $t29: &mut TestBorrow::R
    var $t30: &mut TestBorrow::R
    var $t31: u64
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t6 := 3
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t7 := pack TestBorrow::R($t6)
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    r1 := $t7
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t8 := 4
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t9 := pack TestBorrow::R($t8)
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    r2 := $t9
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t10 := borrow_local(r2)
    // live_refs: r_ref, $t10 borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r2) -> {Reference($t10)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference($t10) -> {LocalRoot(r2)}
    t_ref := $t10
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r2)}
    goto L7
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    L7:
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    $t11 := 0
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    $t12 := copy(n)
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    $t13 := <($t11, $t12)
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    if ($t13) goto L0 else goto L1
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    L1:
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    goto L2
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    L0:
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    $t14 := move(t_ref)
    // live_refs: r_ref, $t14 borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference($t14)}, LocalRoot(r2) -> {Reference($t14)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference($t14) -> {LocalRoot(r1), LocalRoot(r2)}
    destroy($t14)
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t15 := copy(n)
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t16 := 2
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t17 := /($t15, $t16)
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t18 := 0
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t19 := ==($t17, $t18)
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    if ($t19) goto L3 else goto L4
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    L4:
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    goto L5
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    L3:
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t20 := borrow_local(r1)
    // live_refs: r_ref, $t20 borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference($t20)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference($t20) -> {LocalRoot(r1)}
    t_ref := $t20
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1)}
    goto L6
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    L5:
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t21 := borrow_local(r2)
    // live_refs: r_ref, $t21 borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r2) -> {Reference($t21)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference($t21) -> {LocalRoot(r2)}
    t_ref := $t21
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r2)}
    goto L6
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    L6:
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    $t22 := copy(n)
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    $t23 := 1
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    $t24 := -($t22, $t23)
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    n := $t24
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    goto L7
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    L2:
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    $t25 := copy(b)
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    if ($t25) goto L8 else goto L9
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    L9:
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    goto L10
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    L8:
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    $t26 := move(t_ref)
    // live_refs: r_ref, $t26 borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference($t26)}, LocalRoot(r2) -> {Reference($t26)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference($t26) -> {LocalRoot(r1), LocalRoot(r2)}
    destroy($t26)
    // live_refs: r_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}
    $t27 := move(r_ref)
    // live_refs: $t27 borrowed_by: LocalRoot(r_ref) -> {Reference($t27)} borrows_from: Reference($t27) -> {LocalRoot(r_ref)}
    $t28 := 0
    // live_refs: $t27 borrowed_by: LocalRoot(r_ref) -> {Reference($t27)} borrows_from: Reference($t27) -> {LocalRoot(r_ref)}
    TestBorrow::test3($t27, $t28)
    goto L11
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    L10:
    // live_refs: r_ref, t_ref borrowed_by: LocalRoot(r_ref) -> {Reference(r_ref)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(r_ref) -> {LocalRoot(r_ref)}, Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    $t29 := move(r_ref)
    // live_refs: t_ref, $t29 borrowed_by: LocalRoot(r_ref) -> {Reference($t29)}, LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}, Reference($t29) -> {LocalRoot(r_ref)}
    destroy($t29)
    // live_refs: t_ref borrowed_by: LocalRoot(r1) -> {Reference(t_ref)}, LocalRoot(r2) -> {Reference(t_ref)} borrows_from: Reference(t_ref) -> {LocalRoot(r1), LocalRoot(r2)}
    $t30 := move(t_ref)
    // live_refs: $t30 borrowed_by: LocalRoot(r1) -> {Reference($t30)}, LocalRoot(r2) -> {Reference($t30)} borrows_from: Reference($t30) -> {LocalRoot(r1), LocalRoot(r2)}
    $t31 := 0
    // live_refs: $t30 borrowed_by: LocalRoot(r1) -> {Reference($t30)}, LocalRoot(r2) -> {Reference($t30)} borrows_from: Reference($t30) -> {LocalRoot(r1), LocalRoot(r2)}
    TestBorrow::test3($t30, $t31)
    goto L11
    L11:
    return ()
}
