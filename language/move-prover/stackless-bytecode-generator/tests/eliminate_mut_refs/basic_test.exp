============ initial translation from Move ================

fun TestEliminateMutRefs::test1(): TestEliminateMutRefs::R {
     var r: TestEliminateMutRefs::R
     var r_ref: &mut TestEliminateMutRefs::R
     var x_ref: &mut u64
     var $t3: u64
     var $t4: TestEliminateMutRefs::R
     var $t5: &mut TestEliminateMutRefs::R
     var $t6: &mut TestEliminateMutRefs::R
     var $t7: &mut u64
     var $t8: u64
     var $t9: &mut u64
     var $t10: TestEliminateMutRefs::R
  0: $t3 := 3
  1: $t4 := pack TestEliminateMutRefs::R($t3)
  2: r := $t4
  3: $t5 := borrow_local(r)
  4: r_ref := $t5
  5: $t6 := move(r_ref)
  6: $t7 := borrow_field<TestEliminateMutRefs::R>.x($t6)
  7: x_ref := $t7
  8: $t8 := 0
  9: $t9 := move(x_ref)
 10: write_ref($t9, $t8)
 11: $t10 := move(r)
 12: return $t10
}


fun TestEliminateMutRefs::test2(x_ref: &mut u64, v: u64) {
     var $t2: u64
     var $t3: &mut u64
  0: $t2 := copy(v)
  1: $t3 := move(x_ref)
  2: write_ref($t3, $t2)
  3: return ()
}


pub fun TestEliminateMutRefs::test3(r_ref: &mut TestEliminateMutRefs::R, v: u64) {
     var x_ref: &mut u64
     var $t3: &mut TestEliminateMutRefs::R
     var $t4: &mut u64
     var $t5: &mut u64
     var $t6: u64
  0: $t3 := move(r_ref)
  1: $t4 := borrow_field<TestEliminateMutRefs::R>.x($t3)
  2: x_ref := $t4
  3: $t5 := move(x_ref)
  4: $t6 := copy(v)
  5: TestEliminateMutRefs::test2($t5, $t6)
  6: return ()
}


fun TestEliminateMutRefs::test4(): TestEliminateMutRefs::R {
     var r: TestEliminateMutRefs::R
     var r_ref: &mut TestEliminateMutRefs::R
     var $t2: u64
     var $t3: TestEliminateMutRefs::R
     var $t4: &mut TestEliminateMutRefs::R
     var $t5: &mut TestEliminateMutRefs::R
     var $t6: u64
     var $t7: TestEliminateMutRefs::R
  0: $t2 := 3
  1: $t3 := pack TestEliminateMutRefs::R($t2)
  2: r := $t3
  3: $t4 := borrow_local(r)
  4: r_ref := $t4
  5: $t5 := move(r_ref)
  6: $t6 := 0
  7: TestEliminateMutRefs::test3($t5, $t6)
  8: $t7 := move(r)
  9: return $t7
}


pub fun TestEliminateMutRefs::test5(r_ref: &mut TestEliminateMutRefs::R): &mut u64 {
     var $t1: &mut TestEliminateMutRefs::R
     var $t2: &mut u64
  0: $t1 := move(r_ref)
  1: $t2 := borrow_field<TestEliminateMutRefs::R>.x($t1)
  2: return $t2
}


fun TestEliminateMutRefs::test6(): TestEliminateMutRefs::R {
     var r: TestEliminateMutRefs::R
     var r_ref: &mut TestEliminateMutRefs::R
     var x_ref: &mut u64
     var $t3: u64
     var $t4: TestEliminateMutRefs::R
     var $t5: &mut TestEliminateMutRefs::R
     var $t6: &mut TestEliminateMutRefs::R
     var $t7: &mut u64
     var $t8: &mut u64
     var $t9: u64
     var $t10: TestEliminateMutRefs::R
  0: $t3 := 3
  1: $t4 := pack TestEliminateMutRefs::R($t3)
  2: r := $t4
  3: $t5 := borrow_local(r)
  4: r_ref := $t5
  5: $t6 := move(r_ref)
  6: $t7 := TestEliminateMutRefs::test5($t6)
  7: x_ref := $t7
  8: $t8 := move(x_ref)
  9: $t9 := 0
 10: TestEliminateMutRefs::test2($t8, $t9)
 11: $t10 := move(r)
 12: return $t10
}


fun TestEliminateMutRefs::test7(b: bool) {
     var r1: TestEliminateMutRefs::R
     var r2: TestEliminateMutRefs::R
     var r_ref: &mut TestEliminateMutRefs::R
     var $t4: u64
     var $t5: TestEliminateMutRefs::R
     var $t6: u64
     var $t7: TestEliminateMutRefs::R
     var $t8: &mut TestEliminateMutRefs::R
     var $t9: bool
     var $t10: &mut TestEliminateMutRefs::R
     var $t11: &mut TestEliminateMutRefs::R
     var $t12: &mut TestEliminateMutRefs::R
     var $t13: u64
  0: $t4 := 3
  1: $t5 := pack TestEliminateMutRefs::R($t4)
  2: r1 := $t5
  3: $t6 := 4
  4: $t7 := pack TestEliminateMutRefs::R($t6)
  5: r2 := $t7
  6: $t8 := borrow_local(r1)
  7: r_ref := $t8
  8: $t9 := copy(b)
  9: if ($t9) goto L0 else goto L1
 10: L1:
 11: goto L2
 12: L0:
 13: $t10 := move(r_ref)
 14: destroy($t10)
 15: $t11 := borrow_local(r2)
 16: r_ref := $t11
 17: goto L2
 18: L2:
 19: $t12 := move(r_ref)
 20: $t13 := 0
 21: TestEliminateMutRefs::test3($t12, $t13)
 22: return ()
}


fun TestEliminateMutRefs::test8(b: bool, n: u64, r_ref: &mut TestEliminateMutRefs::R) {
     var r1: TestEliminateMutRefs::R
     var r2: TestEliminateMutRefs::R
     var t_ref: &mut TestEliminateMutRefs::R
     var $t6: u64
     var $t7: TestEliminateMutRefs::R
     var $t8: u64
     var $t9: TestEliminateMutRefs::R
     var $t10: &mut TestEliminateMutRefs::R
     var $t11: u64
     var $t12: u64
     var $t13: bool
     var $t14: &mut TestEliminateMutRefs::R
     var $t15: u64
     var $t16: u64
     var $t17: u64
     var $t18: u64
     var $t19: bool
     var $t20: &mut TestEliminateMutRefs::R
     var $t21: &mut TestEliminateMutRefs::R
     var $t22: u64
     var $t23: u64
     var $t24: u64
     var $t25: bool
     var $t26: &mut TestEliminateMutRefs::R
     var $t27: &mut TestEliminateMutRefs::R
     var $t28: u64
     var $t29: &mut TestEliminateMutRefs::R
     var $t30: &mut TestEliminateMutRefs::R
     var $t31: u64
  0: $t6 := 3
  1: $t7 := pack TestEliminateMutRefs::R($t6)
  2: r1 := $t7
  3: $t8 := 4
  4: $t9 := pack TestEliminateMutRefs::R($t8)
  5: r2 := $t9
  6: $t10 := borrow_local(r2)
  7: t_ref := $t10
  8: goto L7
  9: L7:
 10: $t11 := 0
 11: $t12 := copy(n)
 12: $t13 := <($t11, $t12)
 13: if ($t13) goto L0 else goto L1
 14: L1:
 15: goto L2
 16: L0:
 17: $t14 := move(t_ref)
 18: destroy($t14)
 19: $t15 := copy(n)
 20: $t16 := 2
 21: $t17 := /($t15, $t16)
 22: $t18 := 0
 23: $t19 := ==($t17, $t18)
 24: if ($t19) goto L3 else goto L4
 25: L4:
 26: goto L5
 27: L3:
 28: $t20 := borrow_local(r1)
 29: t_ref := $t20
 30: goto L6
 31: L5:
 32: $t21 := borrow_local(r2)
 33: t_ref := $t21
 34: goto L6
 35: L6:
 36: $t22 := copy(n)
 37: $t23 := 1
 38: $t24 := -($t22, $t23)
 39: n := $t24
 40: goto L7
 41: L2:
 42: $t25 := copy(b)
 43: if ($t25) goto L8 else goto L9
 44: L9:
 45: goto L10
 46: L8:
 47: $t26 := move(t_ref)
 48: destroy($t26)
 49: $t27 := move(r_ref)
 50: $t28 := 0
 51: TestEliminateMutRefs::test3($t27, $t28)
 52: goto L11
 53: L10:
 54: $t29 := move(r_ref)
 55: destroy($t29)
 56: $t30 := move(t_ref)
 57: $t31 := 0
 58: TestEliminateMutRefs::test3($t30, $t31)
 59: goto L11
 60: L11:
 61: return ()
}

============ after pipeline `eliminate_mut_refs` ================

fun TestEliminateMutRefs::test1(): TestEliminateMutRefs::R {
     var r: TestEliminateMutRefs::R
     var r_ref: &mut TestEliminateMutRefs::R
     var x_ref: &mut u64
     var $t3: u64
     var $t4: u64
  0: $t3 := 3
  1: r := pack TestEliminateMutRefs::R($t3)
  2: r_ref := borrow_local(r)
  3: UnpackRef(r_ref)
  4: x_ref := borrow_field<TestEliminateMutRefs::R>.x(r_ref)
  5: UnpackRef(x_ref)
  6: $t4 := 0
  7: write_ref(x_ref, $t4)
  8: LocalRoot(r) <- x_ref
  9: Reference(r_ref) <- x_ref
 10: PackRef(r_ref)
 11: PackRef(x_ref)
 12: return r
}


fun TestEliminateMutRefs::test2(x_ref: u64, v: u64): u64 {
     var $t2: u64
     var $t3: &mut u64
     var $t4: u64
  0: $t2 := move(x_ref)
  1: $t4 := move(v)
  2: $t3 := borrow_local($t2)
  3: write_ref($t3, $t4)
  4: LocalRoot($t2) <- $t3
  5: return $t2
}


pub fun TestEliminateMutRefs::test3(r_ref: TestEliminateMutRefs::R, v: u64): TestEliminateMutRefs::R {
     var x_ref: &mut u64
     var $t3: TestEliminateMutRefs::R
     var $t4: &mut TestEliminateMutRefs::R
     var $t5: u64
     var $t6: u64
  0: $t3 := move(r_ref)
  1: $t5 := move(v)
  2: $t4 := borrow_local($t3)
  3: UnpackRef($t4)
  4: x_ref := borrow_field<TestEliminateMutRefs::R>.x($t4)
  5: UnpackRef(x_ref)
  6: $t6 := read_ref(x_ref)
  7: $t6 := TestEliminateMutRefs::test2($t6, $t5)
  8: write_ref(x_ref, $t6)
  9: LocalRoot($t3) <- x_ref
 10: Reference($t4) <- x_ref
 11: PackRef($t4)
 12: PackRef(x_ref)
 13: return $t3
}


fun TestEliminateMutRefs::test4(): TestEliminateMutRefs::R {
     var r: TestEliminateMutRefs::R
     var r_ref: &mut TestEliminateMutRefs::R
     var $t2: u64
     var $t3: u64
     var $t4: TestEliminateMutRefs::R
  0: $t2 := 3
  1: r := pack TestEliminateMutRefs::R($t2)
  2: r_ref := borrow_local(r)
  3: UnpackRef(r_ref)
  4: $t3 := 0
  5: PackRef(r_ref)
  6: $t4 := read_ref(r_ref)
  7: $t4 := TestEliminateMutRefs::test3($t4, $t3)
  8: write_ref(r_ref, $t4)
  9: LocalRoot(r) <- r_ref
 10: UnpackRef(r_ref)
 11: PackRef(r_ref)
 12: return r
}


pub fun TestEliminateMutRefs::test5(r_ref: TestEliminateMutRefs::R): (&mut u64, TestEliminateMutRefs::R) {
     var $t1: &mut u64
     var $t2: TestEliminateMutRefs::R
     var $t3: &mut TestEliminateMutRefs::R
  0: $t2 := move(r_ref)
  1: $t3 := borrow_local($t2)
  2: $t1 := borrow_field<TestEliminateMutRefs::R>.x($t3)
  3: UnpackRef($t1)
  4: return ($t1, $t2)
}


fun TestEliminateMutRefs::test6(): TestEliminateMutRefs::R {
     var r: TestEliminateMutRefs::R
     var r_ref: &mut TestEliminateMutRefs::R
     var x_ref: &mut u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: TestEliminateMutRefs::R
  0: $t3 := 3
  1: r := pack TestEliminateMutRefs::R($t3)
  2: r_ref := borrow_local(r)
  3: UnpackRef(r_ref)
  4: $t6 := read_ref(r_ref)
  5: (x_ref, $t6) := TestEliminateMutRefs::test5($t6)
  6: write_ref(r_ref, $t6)
  7: x_ref ~- [0 -> r_ref]
  8: LocalRoot(r) <- r_ref
  9: $t4 := 0
 10: $t5 := read_ref(x_ref)
 11: $t5 := TestEliminateMutRefs::test2($t5, $t4)
 12: write_ref(x_ref, $t5)
 13: LocalRoot(r) <- x_ref
 14: Reference(r_ref) <- x_ref
 15: PackRef(r_ref)
 16: PackRef(x_ref)
 17: return r
}


fun TestEliminateMutRefs::test7(b: bool) {
     var r1: TestEliminateMutRefs::R
     var r2: TestEliminateMutRefs::R
     var r_ref: &mut TestEliminateMutRefs::R
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: bool
     var $t8: TestEliminateMutRefs::R
  0: $t7 := move(b)
  1: $t4 := 3
  2: r1 := pack TestEliminateMutRefs::R($t4)
  3: $t5 := 4
  4: r2 := pack TestEliminateMutRefs::R($t5)
  5: r_ref := borrow_local(r1)
  6: UnpackRef(r_ref)
  7: if ($t7) goto L0 else goto L1
  8: L1:
  9: goto L2
 10: L0:
 11: destroy(r_ref)
 12: PackRef(r_ref)
 13: r_ref := borrow_local(r2)
 14: UnpackRef(r_ref)
 15: goto L2
 16: L2:
 17: $t6 := 0
 18: PackRef(r_ref)
 19: $t8 := read_ref(r_ref)
 20: $t8 := TestEliminateMutRefs::test3($t8, $t6)
 21: write_ref(r_ref, $t8)
 22: LocalRoot(r1) <- r_ref
 23: LocalRoot(r2) <- r_ref
 24: UnpackRef(r_ref)
 25: PackRef(r_ref)
 26: return ()
}


fun TestEliminateMutRefs::test8(b: bool, n: u64, r_ref: TestEliminateMutRefs::R): TestEliminateMutRefs::R {
     var r1: TestEliminateMutRefs::R
     var r2: TestEliminateMutRefs::R
     var t_ref: &mut TestEliminateMutRefs::R
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: bool
     var $t10: u64
     var $t11: u64
     var $t12: u64
     var $t13: bool
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: bool
     var $t18: u64
     var $t19: TestEliminateMutRefs::R
     var $t20: &mut TestEliminateMutRefs::R
     var $t21: TestEliminateMutRefs::R
  0: $t17 := move(b)
  1: $t18 := move(n)
  2: $t19 := move(r_ref)
  3: $t20 := borrow_local($t19)
  4: $t6 := 3
  5: r1 := pack TestEliminateMutRefs::R($t6)
  6: $t7 := 4
  7: r2 := pack TestEliminateMutRefs::R($t7)
  8: t_ref := borrow_local(r2)
  9: UnpackRef(t_ref)
 10: goto L7
 11: L7:
 12: $t8 := 0
 13: $t9 := <($t8, $t18)
 14: if ($t9) goto L0 else goto L1
 15: L1:
 16: goto L2
 17: L0:
 18: destroy(t_ref)
 19: PackRef(t_ref)
 20: $t10 := 2
 21: $t11 := /($t18, $t10)
 22: $t12 := 0
 23: $t13 := ==($t11, $t12)
 24: if ($t13) goto L3 else goto L4
 25: L4:
 26: goto L5
 27: L3:
 28: t_ref := borrow_local(r1)
 29: UnpackRef(t_ref)
 30: goto L6
 31: L5:
 32: t_ref := borrow_local(r2)
 33: UnpackRef(t_ref)
 34: goto L6
 35: L6:
 36: $t14 := 1
 37: $t18 := -($t18, $t14)
 38: goto L7
 39: L2:
 40: if ($t17) goto L8 else goto L9
 41: L9:
 42: goto L10
 43: L8:
 44: destroy(t_ref)
 45: PackRef(t_ref)
 46: $t15 := 0
 47: PackRef($t20)
 48: $t21 := read_ref($t20)
 49: $t21 := TestEliminateMutRefs::test3($t21, $t15)
 50: write_ref($t20, $t21)
 51: LocalRoot($t19) <- $t20
 52: UnpackRef($t20)
 53: goto L11
 54: L10:
 55: destroy($t20)
 56: $t16 := 0
 57: PackRef(t_ref)
 58: $t21 := read_ref(t_ref)
 59: $t21 := TestEliminateMutRefs::test3($t21, $t16)
 60: write_ref(t_ref, $t21)
 61: LocalRoot(r1) <- t_ref
 62: LocalRoot(r2) <- t_ref
 63: UnpackRef(t_ref)
 64: PackRef(t_ref)
 65: goto L11
 66: L11:
 67: return $t19
}
