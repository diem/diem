============ initial translation from Move ================

pub fun TestMutRefs::data_invariant(_x: &mut TestMutRefs::T) {
  0: return ()
}


pub fun TestMutRefs::decrement_invalid(x: &mut TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var $t2: &mut TestMutRefs::T
     var $t3: &u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: &mut TestMutRefs::T
     var $t8: &mut u64
     var $t9: address
     var $t10: &mut TestMutRefs::TSum
     var $t11: &mut TestMutRefs::TSum
     var $t12: &u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: &mut TestMutRefs::TSum
     var $t17: &mut u64
  0: $t2 := copy(x)
  1: $t3 := borrow_field<TestMutRefs::T>.value($t2)
  2: $t4 := read_ref($t3)
  3: $t5 := 1
  4: $t6 := -($t4, $t5)
  5: $t7 := move(x)
  6: $t8 := borrow_field<TestMutRefs::T>.value($t7)
  7: write_ref($t8, $t6)
  8: $t9 := 0x0
  9: $t10 := borrow_global<TestMutRefs::TSum>($t9)
 10: r := $t10
 11: $t11 := copy(r)
 12: $t12 := borrow_field<TestMutRefs::TSum>.sum($t11)
 13: $t13 := read_ref($t12)
 14: $t14 := 1
 15: $t15 := -($t13, $t14)
 16: $t16 := move(r)
 17: $t17 := borrow_field<TestMutRefs::TSum>.sum($t16)
 18: write_ref($t17, $t15)
 19: return ()
}


pub fun TestMutRefs::delete(x: TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var v: u64
     var $t3: address
     var $t4: &mut TestMutRefs::TSum
     var $t5: TestMutRefs::T
     var $t6: u64
     var $t7: &mut TestMutRefs::TSum
     var $t8: &u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
     var $t12: &mut TestMutRefs::TSum
     var $t13: &mut u64
  0: $t3 := 0x0
  1: $t4 := borrow_global<TestMutRefs::TSum>($t3)
  2: r := $t4
  3: $t5 := move(x)
  4: $t6 := unpack TestMutRefs::T($t5)
  5: v := $t6
  6: $t7 := copy(r)
  7: $t8 := borrow_field<TestMutRefs::TSum>.sum($t7)
  8: $t9 := read_ref($t8)
  9: $t10 := copy(v)
 10: $t11 := -($t9, $t10)
 11: $t12 := move(r)
 12: $t13 := borrow_field<TestMutRefs::TSum>.sum($t12)
 13: write_ref($t13, $t11)
 14: return ()
}


pub fun TestMutRefs::increment(x: &mut TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var $t2: &mut TestMutRefs::T
     var $t3: &u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: &mut TestMutRefs::T
     var $t8: &mut u64
     var $t9: address
     var $t10: &mut TestMutRefs::TSum
     var $t11: &mut TestMutRefs::TSum
     var $t12: &u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: &mut TestMutRefs::TSum
     var $t17: &mut u64
  0: $t2 := copy(x)
  1: $t3 := borrow_field<TestMutRefs::T>.value($t2)
  2: $t4 := read_ref($t3)
  3: $t5 := 1
  4: $t6 := +($t4, $t5)
  5: $t7 := move(x)
  6: $t8 := borrow_field<TestMutRefs::T>.value($t7)
  7: write_ref($t8, $t6)
  8: $t9 := 0x0
  9: $t10 := borrow_global<TestMutRefs::TSum>($t9)
 10: r := $t10
 11: $t11 := copy(r)
 12: $t12 := borrow_field<TestMutRefs::TSum>.sum($t11)
 13: $t13 := read_ref($t12)
 14: $t14 := 1
 15: $t15 := +($t13, $t14)
 16: $t16 := move(r)
 17: $t17 := borrow_field<TestMutRefs::TSum>.sum($t16)
 18: write_ref($t17, $t15)
 19: return ()
}


pub fun TestMutRefs::increment_invalid(x: &mut TestMutRefs::T) {
     var $t1: &mut TestMutRefs::T
     var $t2: &u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: &mut TestMutRefs::T
     var $t7: &mut u64
  0: $t1 := copy(x)
  1: $t2 := borrow_field<TestMutRefs::T>.value($t1)
  2: $t3 := read_ref($t2)
  3: $t4 := 1
  4: $t5 := +($t3, $t4)
  5: $t6 := move(x)
  6: $t7 := borrow_field<TestMutRefs::T>.value($t6)
  7: write_ref($t7, $t5)
  8: return ()
}


pub fun TestMutRefs::new(x: u64): TestMutRefs::T {
     var r: &mut TestMutRefs::TSum
     var $t2: address
     var $t3: &mut TestMutRefs::TSum
     var $t4: &mut TestMutRefs::TSum
     var $t5: &u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: &mut TestMutRefs::TSum
     var $t10: &mut u64
     var $t11: u64
     var $t12: TestMutRefs::T
  0: $t2 := 0x0
  1: $t3 := borrow_global<TestMutRefs::TSum>($t2)
  2: r := $t3
  3: $t4 := copy(r)
  4: $t5 := borrow_field<TestMutRefs::TSum>.sum($t4)
  5: $t6 := read_ref($t5)
  6: $t7 := copy(x)
  7: $t8 := +($t6, $t7)
  8: $t9 := move(r)
  9: $t10 := borrow_field<TestMutRefs::TSum>.sum($t9)
 10: write_ref($t10, $t8)
 11: $t11 := copy(x)
 12: $t12 := pack TestMutRefs::T($t11)
 13: return $t12
}


fun TestMutRefs::private_data_invariant_invalid(_x: &mut TestMutRefs::T) {
  0: return ()
}


fun TestMutRefs::private_decrement(x: &mut TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var $t2: &mut TestMutRefs::T
     var $t3: &u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: &mut TestMutRefs::T
     var $t8: &mut u64
     var $t9: address
     var $t10: &mut TestMutRefs::TSum
     var $t11: &mut TestMutRefs::TSum
     var $t12: &u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: &mut TestMutRefs::TSum
     var $t17: &mut u64
  0: $t2 := copy(x)
  1: $t3 := borrow_field<TestMutRefs::T>.value($t2)
  2: $t4 := read_ref($t3)
  3: $t5 := 1
  4: $t6 := -($t4, $t5)
  5: $t7 := move(x)
  6: $t8 := borrow_field<TestMutRefs::T>.value($t7)
  7: write_ref($t8, $t6)
  8: $t9 := 0x0
  9: $t10 := borrow_global<TestMutRefs::TSum>($t9)
 10: r := $t10
 11: $t11 := copy(r)
 12: $t12 := borrow_field<TestMutRefs::TSum>.sum($t11)
 13: $t13 := read_ref($t12)
 14: $t14 := 1
 15: $t15 := -($t13, $t14)
 16: $t16 := move(r)
 17: $t17 := borrow_field<TestMutRefs::TSum>.sum($t16)
 18: write_ref($t17, $t15)
 19: return ()
}


fun TestMutRefs::private_to_public_caller(r: &mut TestMutRefs::T) {
     var $t1: &mut TestMutRefs::T
  0: $t1 := move(r)
  1: TestMutRefs::increment($t1)
  2: return ()
}


fun TestMutRefs::private_to_public_caller_invalid_data_invariant() {
     var r: &mut TestMutRefs::T
     var x: TestMutRefs::T
     var $t2: u64
     var $t3: TestMutRefs::T
     var $t4: &mut TestMutRefs::T
     var $t5: &mut TestMutRefs::T
     var $t6: &mut TestMutRefs::T
  0: $t2 := 1
  1: $t3 := TestMutRefs::new($t2)
  2: x := $t3
  3: $t4 := borrow_local(x)
  4: r := $t4
  5: $t5 := copy(r)
  6: TestMutRefs::private_decrement($t5)
  7: $t6 := move(r)
  8: TestMutRefs::increment($t6)
  9: return ()
}


pub fun TestMutRefsUser::valid() {
     var x: TestMutRefs::T
     var $t1: u64
     var $t2: TestMutRefs::T
     var $t3: &mut TestMutRefs::T
     var $t4: TestMutRefs::T
  0: $t1 := 4
  1: $t2 := TestMutRefs::new($t1)
  2: x := $t2
  3: $t3 := borrow_local(x)
  4: TestMutRefs::increment($t3)
  5: $t4 := move(x)
  6: TestMutRefs::delete($t4)
  7: return ()
}

============ after pipeline `packref` ================

pub fun TestMutRefs::data_invariant(_x: &mut TestMutRefs::T) {
     // live_refs: _x
     // borrowed_by: LocalRoot(_x) -> {Reference(_x)}
     // borrows_from: Reference(_x) -> {LocalRoot(_x)}
     // before: UnpackRef(_x), PackRef(_x) after:
  0: return ()
}


pub fun TestMutRefs::decrement_invalid(x: &mut TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: &mut u64
     var $t6: address
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: &mut u64
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
     // before: UnpackRef(x) after:
  0: $t2 := get_field<TestMutRefs::T>.value(x)
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
  1: $t3 := 1
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
  2: $t4 := -($t2, $t3)
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
     // before:  after: UnpackRef($t5)
  3: $t5 := borrow_field<TestMutRefs::T>.value(x)
     // live_refs: $t5
     // borrowed_by: LocalRoot(x) -> {Reference($t5)}, Reference(x) -> {Reference($t5)}
     // borrows_from: Reference($t5) -> {LocalRoot(x), Reference(x)}
     // before:  after: PackRef(x), PackRef($t5)
  4: write_ref($t5, $t4)
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
  5: $t6 := 0x0
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
     // before:  after: UnpackRef(r)
  6: r := borrow_global<TestMutRefs::TSum>($t6)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
  7: $t7 := get_field<TestMutRefs::TSum>.sum(r)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
  8: $t8 := 1
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
  9: $t9 := -($t7, $t8)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
     // before:  after: UnpackRef($t10)
 10: $t10 := borrow_field<TestMutRefs::TSum>.sum(r)
     // live_refs: $t10
     // borrowed_by: TestMutRefs::TSum -> {Reference($t10)}, Reference(r) -> {Reference($t10)}
     // borrows_from: Reference($t10) -> {TestMutRefs::TSum, Reference(r)}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
     // before:  after: PackRef(r), PackRef($t10)
 11: write_ref($t10, $t9)
     // dirty_nodes: TestMutRefs::TSum, LocalRoot(x), Reference(x), Reference(r), Reference($t5), Reference($t10)
 12: return ()
}


pub fun TestMutRefs::delete(x: TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var v: u64
     var $t3: address
     var $t4: u64
     var $t5: u64
     var $t6: &mut u64
  0: $t3 := 0x0
     // before:  after: UnpackRef(r)
  1: r := borrow_global<TestMutRefs::TSum>($t3)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
  2: v := unpack TestMutRefs::T(x)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
  3: $t4 := get_field<TestMutRefs::TSum>.sum(r)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
  4: $t5 := -($t4, v)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // before:  after: UnpackRef($t6)
  5: $t6 := borrow_field<TestMutRefs::TSum>.sum(r)
     // live_refs: $t6
     // borrowed_by: TestMutRefs::TSum -> {Reference($t6)}, Reference(r) -> {Reference($t6)}
     // borrows_from: Reference($t6) -> {TestMutRefs::TSum, Reference(r)}
     // before:  after: PackRef(r), PackRef($t6)
  6: write_ref($t6, $t5)
     // dirty_nodes: TestMutRefs::TSum, Reference(r), Reference($t6)
  7: return ()
}


pub fun TestMutRefs::increment(x: &mut TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: &mut u64
     var $t6: address
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: &mut u64
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
     // before: UnpackRef(x) after:
  0: $t2 := get_field<TestMutRefs::T>.value(x)
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
  1: $t3 := 1
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
  2: $t4 := +($t2, $t3)
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
     // before:  after: UnpackRef($t5)
  3: $t5 := borrow_field<TestMutRefs::T>.value(x)
     // live_refs: $t5
     // borrowed_by: LocalRoot(x) -> {Reference($t5)}, Reference(x) -> {Reference($t5)}
     // borrows_from: Reference($t5) -> {LocalRoot(x), Reference(x)}
     // before:  after: PackRef(x), PackRef($t5)
  4: write_ref($t5, $t4)
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
  5: $t6 := 0x0
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
     // before:  after: UnpackRef(r)
  6: r := borrow_global<TestMutRefs::TSum>($t6)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
  7: $t7 := get_field<TestMutRefs::TSum>.sum(r)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
  8: $t8 := 1
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
  9: $t9 := +($t7, $t8)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
     // before:  after: UnpackRef($t10)
 10: $t10 := borrow_field<TestMutRefs::TSum>.sum(r)
     // live_refs: $t10
     // borrowed_by: TestMutRefs::TSum -> {Reference($t10)}, Reference(r) -> {Reference($t10)}
     // borrows_from: Reference($t10) -> {TestMutRefs::TSum, Reference(r)}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
     // before:  after: PackRef(r), PackRef($t10)
 11: write_ref($t10, $t9)
     // dirty_nodes: TestMutRefs::TSum, LocalRoot(x), Reference(x), Reference(r), Reference($t5), Reference($t10)
 12: return ()
}


pub fun TestMutRefs::increment_invalid(x: &mut TestMutRefs::T) {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: &mut u64
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
     // before: UnpackRef(x) after:
  0: $t1 := get_field<TestMutRefs::T>.value(x)
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
  1: $t2 := 1
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
  2: $t3 := +($t1, $t2)
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
     // before:  after: UnpackRef($t4)
  3: $t4 := borrow_field<TestMutRefs::T>.value(x)
     // live_refs: $t4
     // borrowed_by: LocalRoot(x) -> {Reference($t4)}, Reference(x) -> {Reference($t4)}
     // borrows_from: Reference($t4) -> {LocalRoot(x), Reference(x)}
     // before:  after: PackRef(x), PackRef($t4)
  4: write_ref($t4, $t3)
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t4)
  5: return ()
}


pub fun TestMutRefs::new(x: u64): TestMutRefs::T {
     var r: &mut TestMutRefs::TSum
     var $t2: address
     var $t3: u64
     var $t4: u64
     var $t5: &mut u64
     var $t6: TestMutRefs::T
  0: $t2 := 0x0
     // before:  after: UnpackRef(r)
  1: r := borrow_global<TestMutRefs::TSum>($t2)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
  2: $t3 := get_field<TestMutRefs::TSum>.sum(r)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
  3: $t4 := +($t3, x)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // before:  after: UnpackRef($t5)
  4: $t5 := borrow_field<TestMutRefs::TSum>.sum(r)
     // live_refs: $t5
     // borrowed_by: TestMutRefs::TSum -> {Reference($t5)}, Reference(r) -> {Reference($t5)}
     // borrows_from: Reference($t5) -> {TestMutRefs::TSum, Reference(r)}
     // before:  after: PackRef(r), PackRef($t5)
  5: write_ref($t5, $t4)
     // dirty_nodes: TestMutRefs::TSum, Reference(r), Reference($t5)
  6: $t6 := pack TestMutRefs::T(x)
     // dirty_nodes: TestMutRefs::TSum, Reference(r), Reference($t5)
  7: return $t6
}


fun TestMutRefs::private_data_invariant_invalid(_x: &mut TestMutRefs::T) {
     // live_refs: _x
     // borrowed_by: LocalRoot(_x) -> {Reference(_x)}
     // borrows_from: Reference(_x) -> {LocalRoot(_x)}
  0: return ()
}


fun TestMutRefs::private_decrement(x: &mut TestMutRefs::T) {
     var r: &mut TestMutRefs::TSum
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: &mut u64
     var $t6: address
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: &mut u64
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
  0: $t2 := get_field<TestMutRefs::T>.value(x)
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
  1: $t3 := 1
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
  2: $t4 := -($t2, $t3)
     // live_refs: x
     // borrowed_by: LocalRoot(x) -> {Reference(x)}
     // borrows_from: Reference(x) -> {LocalRoot(x)}
     // before:  after: UnpackRef($t5)
  3: $t5 := borrow_field<TestMutRefs::T>.value(x)
     // live_refs: $t5
     // borrowed_by: LocalRoot(x) -> {Reference($t5)}, Reference(x) -> {Reference($t5)}
     // borrows_from: Reference($t5) -> {LocalRoot(x), Reference(x)}
     // before:  after: PackRef($t5)
  4: write_ref($t5, $t4)
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
  5: $t6 := 0x0
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
     // before:  after: UnpackRef(r)
  6: r := borrow_global<TestMutRefs::TSum>($t6)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
  7: $t7 := get_field<TestMutRefs::TSum>.sum(r)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
  8: $t8 := 1
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
  9: $t9 := -($t7, $t8)
     // live_refs: r
     // borrowed_by: TestMutRefs::TSum -> {Reference(r)}
     // borrows_from: Reference(r) -> {TestMutRefs::TSum}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
     // before:  after: UnpackRef($t10)
 10: $t10 := borrow_field<TestMutRefs::TSum>.sum(r)
     // live_refs: $t10
     // borrowed_by: TestMutRefs::TSum -> {Reference($t10)}, Reference(r) -> {Reference($t10)}
     // borrows_from: Reference($t10) -> {TestMutRefs::TSum, Reference(r)}
     // dirty_nodes: LocalRoot(x), Reference(x), Reference($t5)
     // before:  after: PackRef(r), PackRef($t10)
 11: write_ref($t10, $t9)
     // dirty_nodes: TestMutRefs::TSum, LocalRoot(x), Reference(x), Reference(r), Reference($t5), Reference($t10)
 12: return ()
}


fun TestMutRefs::private_to_public_caller(r: &mut TestMutRefs::T) {
     // live_refs: r
     // borrowed_by: LocalRoot(r) -> {Reference(r)}
     // borrows_from: Reference(r) -> {LocalRoot(r)}
     // before: PackRef(r) after: UnpackRef(r)
  0: TestMutRefs::increment(r)
     // dirty_nodes: LocalRoot(r), Reference(r)
  1: return ()
}


fun TestMutRefs::private_to_public_caller_invalid_data_invariant() {
     var r: &mut TestMutRefs::T
     var x: TestMutRefs::T
     var $t2: u64
  0: $t2 := 1
  1: x := TestMutRefs::new($t2)
     // before:  after: UnpackRef(r)
  2: r := borrow_local(x)
     // live_refs: r
     // borrowed_by: LocalRoot(x) -> {Reference(r)}
     // borrows_from: Reference(r) -> {LocalRoot(x)}
  3: TestMutRefs::private_decrement(r)
     // live_refs: r
     // borrowed_by: LocalRoot(x) -> {Reference(r)}
     // borrows_from: Reference(r) -> {LocalRoot(x)}
     // dirty_nodes: LocalRoot(x), Reference(r)
     // before: PackRef(r) after: UnpackRef(r), PackRef(r)
  4: TestMutRefs::increment(r)
     // dirty_nodes: LocalRoot(x), Reference(r)
  5: return ()
}


pub fun TestMutRefsUser::valid() {
     var x: TestMutRefs::T
     var $t1: u64
     var $t2: &mut TestMutRefs::T
  0: $t1 := 4
  1: x := TestMutRefs::new($t1)
     // before:  after: UnpackRef($t2)
  2: $t2 := borrow_local(x)
     // live_refs: $t2
     // borrowed_by: LocalRoot(x) -> {Reference($t2)}
     // borrows_from: Reference($t2) -> {LocalRoot(x)}
     // before: PackRef($t2) after: UnpackRef($t2), PackRef($t2)
  3: TestMutRefs::increment($t2)
     // dirty_nodes: LocalRoot(x), Reference($t2)
  4: TestMutRefs::delete(x)
     // dirty_nodes: LocalRoot(x), Reference($t2)
  5: return ()
}
