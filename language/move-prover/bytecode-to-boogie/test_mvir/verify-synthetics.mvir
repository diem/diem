// Tests basic invariant functionality.

module TestInvariants {

    synthetic syn: u64;

    struct T {
      i: u64,

      // When we update via a reference, the new value must be greater than the old one.
      // Expecting two errors from `invalid_T_update` and `invalid_T_update_indirectly` test.
      invariant {pack} syn = syn + i,
      invariant {unpack} syn = syn - i,
      invariant {update} syn = syn - old(i) + i

    }

    public valid()
    ensures syn == old(syn) + 2 + 3 - 3 + 4 - 2
    {
      let t: Self.T;
      let r: Self.T;
      let s: &mut Self.T;
      let x: u64;

      t = T{i:2};
      r = T{i:3};
      s = &mut r;
      *&mut move(s).i = 4;
      T{x} = move(t);
      return;
    }

    public invalid()
    ensures syn == old(syn) + 2 //! A postcondition might not hold
    {
      let t: Self.T;
      let r: Self.T;
      let s: &mut Self.T;
      let x: u64;

      t = T{i:2};
      r = T{i:3};
      s = &mut r;
      *&mut move(s).i = 4;
      T{x} = move(t);
      return;
    }
}
