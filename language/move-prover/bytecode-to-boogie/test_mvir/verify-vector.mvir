module VerifyVector {
    import 0x0.Vector;

    // succeeds. [] == [].
    public test_empty1() : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        return (move(ev1), move(ev2));
    }

    //succeeds. [] == [].
    public test_empty2() : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        let x: u64;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        x = Vector.pop_back<u64>(&mut ev1);
        return (move(ev1), move(ev2));
    }

    // succeeds. [1] == [1]
    public test_empty3() : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev2, 1);
        return (move(ev1), move(ev2));
    }

    //succeeds. [1,2] != [1].
    public test_empty4() : vector<u64> * vector<u64>
    ensures RET(0) != RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev1, 2);
        Vector.push_back<u64>(&mut ev2, 1);
        return (move(ev1), move(ev2));
    }

    //succeeds. [1] != [0].
    public test_empty5() : vector<u64> * vector<u64>
    ensures RET(0) != RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev2, 0);
        return (move(ev1), move(ev2));
    }

    // succeeds. reverse([]) == [].
    public test_reverse1() : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.reverse<u64>(&mut ev1);
        return (move(ev1), move(ev2));
    }

    // succeeds. reverse([1,2]) == [2,1].
    public test_reverse2() : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev1, 2);
        Vector.push_back<u64>(&mut ev2, 2);
        Vector.push_back<u64>(&mut ev2, 1);
        Vector.reverse<u64>(&mut ev1);
        return (move(ev1), move(ev2));
    }

    // succeeds. Always aborts because the first index argument of `swap` is out-of-bounds.
    public test_swap1()
    aborts_if true
    {
        let ev1: vector<u64>;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 0);
        Vector.swap<u64>(&mut ev1, 1, 0);
        return;
    }

    // succeeds. Always aborts because the second index argument of `swap` is out-of-bounds.
    public test_swap2()
    aborts_if true
    {
        let ev1: vector<u64>;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 0);
        Vector.swap<u64>(&mut ev1, 0, 1);
        return;
    }

    // succeeds. swap([1,2],0,1) == [2,1].
    public test_swap3() : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev1, 2);
        Vector.push_back<u64>(&mut ev2, 2);
        Vector.push_back<u64>(&mut ev2, 1);
        Vector.swap<u64>(&mut ev1, 0, 0);
        Vector.swap<u64>(&mut ev1, 0, 1);
        return (move(ev1), move(ev2));
    }

    // succeeds. length([1]) = length([]) + 1.
    public test_length1() : u64 * u64
    ensures RET(0) == RET(1) + 1
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        return (Vector.length<u64>(& ev1), Vector.length<u64>(& ev2));
    }

    // succeeds. length(v) + 3 == length(v^[1]^[2]^[3]).
    public test_length2(v: vector<u64>) : u64 * u64
    ensures RET(0) + 3 == RET(1)
    {
        let x: u64;
        let y: u64;
        x = Vector.length<u64>(& v);
        Vector.push_back<u64>(&mut v, 1);
        Vector.push_back<u64>(&mut v, 2);
        Vector.push_back<u64>(&mut v, 3);
        y = Vector.length<u64>(& v);
        return (move(x), move(y));
    }

    // succeeds. v == v.
    public test_id1(v: vector<u64>) : vector<u64>
    ensures RET(0) == old(v)
    {
        return (move(v));
    }

    // succeeds. reverse(reverse(v)) == v.
    public test_id2(v: vector<u64>) : vector<u64>
    ensures RET(0) == old(v)
    {
        Vector.reverse<u64>(&mut v);
        Vector.reverse<u64>(&mut v);
        return (move(v));
    }

    // succeeds. reverse(some_obscure_reverse_routine(v)) == v.
    public test_id3(v: vector<u64>) : vector<u64>
    ensures RET(0) == old(v)
    {
        let l: u64;
        l = Vector.length<u64>(& v);
        if(copy(l) <= 1) {
        }
        else {
            if (copy(l) <= 3) {
                Vector.swap<u64>(&mut v, 0, copy(l)-1);
            }
            else {
                Vector.reverse<u64>(&mut v);
            }
        }
        Vector.reverse<u64>(&mut v);
        return (move(v));
    }

    // succeeds. If the input vector is empty, destroy it, and return a new empty vector.
    public test_destroy_empty1(v: vector<u64>) : vector<u64>
    ensures RET(0) == old(v)
    {
        if (Vector.is_empty<u64>(& v)) {
            Vector.destroy_empty<u64>(move(v));
            return Vector.empty<u64>();
        }
        else {
            return move(v);
        }
    }

    // succeeds. Always aborts. If v is empty, attempt to access out-of-bounds. Otherwise, attempt to destroy the non-empty vector.
    public test_destroy_empty2(v: vector<u64>)
    aborts_if true
    {
        if (Vector.is_empty<u64>(& v)) {
            Vector.set<u64>(&mut v, 0, 0);
        }
        else {
            Vector.destroy_empty<u64>(move(v));
        }
        return;
    }

    // succeeds. [x] == [x].
    public test_get_set1(x: u64) : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev2, 2);
        Vector.set<u64>(&mut ev1, 0, move(x));
        Vector.set<u64>(&mut ev2, 0, Vector.get<u64>(& ev1, 0));
        return (move(ev1), move(ev2));
    }

    // succeeds.
    public test_get1() : u64
    ensures RET(0) == 7
    {
        let ev1: vector<u64>;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 7);
        return Vector.get<u64>(&ev1, 0);
    }

    // succeeds. Always aborts due to the out-of-bounds index used.
    public test_get2()
    aborts_if true
    {
        let x : u64;
        let ev1: vector<u64>;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        x = Vector.get<u64>(& ev1, 1);
        return;
    }

    // succeeds. 7 == 7.
    public test_borrow1() : u64 * u64
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let y : &u64;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 7);
        y = Vector.borrow<u64>(&ev1, 0);
        return (7, *move(y));
    }

    // succeeds. Always aborts due to the out-of-bounds index used.
    public test_borrow2() : u64 * u64
    aborts_if true
    ensures false
    {
        let ev1: vector<u64>;
        let y : &u64;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 7);
        y = Vector.borrow<u64>(&ev1, 1);
        return (7, *move(y));
    }

    // succeeds. 0 != 7
    public test_borrow3() : u64 * u64
    ensures RET(0) != RET(1)
    {
        let ev1: vector<u64>;
        let y : &u64;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 7);
        y = Vector.borrow<u64>(&ev1, 0);
        return (0, *move(y));
    }

    // succeeds. standard vector method.
    public my_empty<Element>() : vector<Element>
    ensures len(RET(0)) == 0
    {
        return Vector.empty<Element>();
    }

    // succeeds. with a vector as a value
    public my_length1(v: vector< u64>): u64
    ensures len(v) == RET(0)
    // TODO: spec_translator cannot handle the following post-conditions
        // error: unknown result type of helper function; cannot use in operation
        // error: incompatible types: expected `tv65534`, found `IntegerType()`
        // ensures len(v) + 1 == RET(0)
        // ensures len(v) < RET(0) + 1
    {
        return Vector.length<u64>(&v);
    }

    // succeeds. standard vector method (without type parameter).
    public my_length2(v: &vector<u64>): u64
    ensures len(*v) == RET(0)
    {
        return Vector.length<u64>(copy(v));
    }


    // succeeds. standard vector method.
    public my_length3<Element>(v: &vector<Element>): u64
    ensures len(*v) == RET(0)
    {
        return Vector.length<Element>(copy(v));
    }

    // succeeds.
    public my_get1(v: vector<u64>, i: u64): u64
    aborts_if i >= len(v)
    //ensures RET(0) == vector_get(v, i)
    ensures RET(0) == v[i]
    {
        return *Vector.borrow<u64>(&v, move(i));
    }

    // succeeds. standard vector method (without type parameter).
    public my_get2(v: &vector<u64>, i: u64): u64
    aborts_if i >= len(*v)
    //ensures RET(0) == vector_get(*v, i)
    ensures RET(0) == v[i]
    {
        return *Vector.borrow<u64>(move(v), move(i));
    }

    // succeeds.
    public my_get3(v: &vector<u64>, i: u64): u64
    aborts_if i >= len(*v)
    //aborts_if vector_get(*v, i) == 0
    aborts_if v[i] == 0
    ensures RET(0) + 1 == v[i]
    {
        return *Vector.borrow<u64>(move(v), move(i)) - 1;
    }

    // succeeds. standard vector method.
    public my_get4<Element: unrestricted>(v: &vector<Element>, i: u64): Element
    aborts_if i >= len(*v)
    //ensures RET(0) == vector_get(*v, i)
    ensures RET(0) == v[i]
    {
        return *Vector.borrow<Element>(move(v), move(i));
    }

    // succeeds.
    public my_set1(v: vector<u64>, i: u64, e: u64) : vector<u64>
    aborts_if i >= len(v)
    ensures RET(0) == v[i := e]
    {
        *(Vector.borrow_mut<u64>(&mut v, move(i))) = move(e);
        return move(v);
    }

    // succeeds. standard vector method (without type parameter).
    public my_set2(v: &mut vector<u64>, i: u64, e: u64)
    aborts_if i >= len(*v)
    ensures *v == old(v[i:=e])
    {
        *(Vector.borrow_mut<u64>(move(v), move(i))) = move(e);
        return;
    }

    // succeeds. standard vector method.
    public my_set3<Element: unrestricted>(v: &mut vector<Element>, i: u64, e: Element)
    aborts_if i >= len(*v)
    ensures *v == old(v[i:=e])
    //ensures *v == old(*v)[i:=e] // mvir parsing errors: ParserError: Invalid token at 11189
    {
        *(Vector.borrow_mut<Element>(move(v), move(i))) = move(e);
        return;
    }

    // standard vector method (without type parameter).
    public my_is_empty(v: &vector<u64>): bool
    // TODO: the following post-condition is not parsed.
    // ensures RET(0) == (vector_length(*v) == 0) // mvir parsing errors: ParserError: Invalid token at 10411
    {
        return Vector.length<u64>(move(v)) == 0;
    }

    public test_slice1() : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)[1..3]
    ensures RET(0) != RET(1)[0..2]
    ensures RET(0) == RET(1)[4..6]
    ensures RET(0)[0..2] == RET(1)[4..6]
    ensures RET(0)[1..2] == RET(1)[2..3]
    ensures RET(1)[1..3] == RET(1)[4..6]
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev1, 2);

        Vector.push_back<u64>(&mut ev2, 0);
        Vector.push_back<u64>(&mut ev2, 1);
        Vector.push_back<u64>(&mut ev2, 2);
        Vector.push_back<u64>(&mut ev2, 3);
        Vector.push_back<u64>(&mut ev2, 1);
        Vector.push_back<u64>(&mut ev2, 2);
        return (move(ev1), move(ev2)); // return ([1,2], [1,2,3,1,2])
    }

    // succeeds.
    public my_push_back1(v: &mut vector<u64>, e: u64)
    aborts_if e == 9223372036854775807
    ensures len(*v) == len(old(*v)) + 1
    ensures v[len(*v)-1] == e + 1
    {
        let x : u64;
        x = move(e) + 1;
        Vector.push_back<u64>(move(v), move(x));
        return;
    }

    // succeeds.
    public my_push_back2(v: &mut vector<u64>, e: u64)
    aborts_if e == 9223372036854775807
    ensures len(*v) == len(old(*v)) + 2
    ensures v[len(*v)-1] == e
    ensures v[len(*v)-2] == e+1
    ensures old(*v) == v[0..len(*v)-2]
    {
        Vector.push_back<u64>(copy(v), copy(e)+1);
        Vector.push_back<u64>(move(v), move(e));
        return;
    }

    // succeeds. standard vector method (without type parameter).
    public my_push_back3(v: &mut vector<u64>, e: u64)
    ensures len(*v) == len(old(*v)) + 1
    ensures v[len(*v)-1] == e
    ensures old(*v) == v[0..len(*v)-1]
    {
        Vector.push_back<u64>(move(v), move(e));
        return;
    }

    // succeeds. standard vector method.
    public my_push_back4<Element>(v: &mut vector<Element>, e: Element)
    ensures len(*v) == len(old(*v)) + 1
    ensures v[len(*v)-1] == e
    ensures old(*v) == v[0..len(*v)-1]
    {
        Vector.push_back<Element>(move(v), move(e));
        return;
    }

    // succeeds. standard vector method (without type parameter).
    public pop_back1(v: &mut vector<u64>): u64
    aborts_if len(*v) == 0
    ensures len(*v) == old(len(*v)) - 1
    ensures old(v[len(*v)-1]) == RET(0)
    ensures *v == old(v[0..len(*v)-1])
    {
        return Vector.pop_back<u64>(move(v));
    }

    // succeeds. standard vector method.
    public pop_back2<Element>(v: &mut vector<Element>): Element
    aborts_if len(*v) == 0
    ensures len(*v) == old(len(*v)) - 1
    ensures RET(0) == old(v[len(*v)-1])
    ensures *v == old(v[0..len(*v)-1])
    {
        return Vector.pop_back<Element>(move(v));
    }

    // succeeds. standard vector method (without type parameter).
    public my_swap1(v: &mut vector<u64>, i: u64, j: u64)
    aborts_if i >= len(*v)
    aborts_if j >= len(*v)
    ensures *v == old(v[i:=v[j]][j:=v[i]])
    {
        Vector.swap<u64>(move(v), move(i), move(j));
        return;
    }

    // succeeds. standard vector method.
    public my_swap2<Element>(v: &mut vector<Element>, i: u64, j: u64)
    aborts_if i >= len(*v)
    aborts_if j >= len(*v)
    ensures *v == old(v[i:=v[j]][j:=v[i]])
    {
        Vector.swap<Element>(move(v), move(i), move(j));
        return;
    }

    // succeeds. custom vector method.
    public my_swap3<Element: unrestricted>(v: &mut vector<Element>, i: u64, j: u64)
    aborts_if i >= len(*v)
    aborts_if j >= len(*v)
    ensures *v == old(v[i:=v[j]][j:=v[i]])
    {
        let x : Element;
        let y : Element;
        x = Vector.get<Element>(freeze(copy(v)), copy(i));
        y = Vector.get<Element>(freeze(copy(v)), copy(j));
        Vector.set<Element>(copy(v), move(i), move(y));
        Vector.set<Element>(move(v), move(j), move(x));
        return;
    }

    // TODO: define the boogie procedure Vector_remove_unstable
    public my_remove_unstable1(v : &mut vector<u64>, i: u64) : u64
    {
        // return Vector.remove_unstable<u64>(move(v), move(i)); // Error: call to undeclared procedure: Vector_remove_unstable
        return 0; // temporary placeholder
    }

    // succeeds. standard vector method.
    public my_remove_unstable2<Element>(v: &mut vector<Element>, i: u64): Element
    aborts_if i >= len(*v)
    ensures len(*v) == old(len(*v)) - 1
    ensures old(v[i]) == RET(0)
    ensures *v == old(v[i := v[len(*v)-1]][0..len(*v)-1]) // or equal upto permutation?
    {
        let last_index: u64;

        if (Vector.is_empty<Element>(freeze(copy(v)))) {
            // i out of bounds; abort
            abort(10);
        }

        last_index = Vector.length<Element>(freeze(copy(v))) - 1;
        if (copy(i) != copy(last_index)) {
            Vector.swap<Element>(copy(v), move(i), move(last_index));
        } // else, no need for swap, since i is already the last index
        return Vector.pop_back<Element>(move(v));
    }

    // succeeds. standard vector method (without type parameter).
    public my_append1(lhs: &mut vector<u64>, other: vector<u64>)
    ensures len(*lhs) == old(len(*lhs) + len(other))
    ensures lhs[0..old(len(*lhs))] == old(*lhs)
    ensures lhs[old(len(*lhs))..len(*lhs)] == old(other)
    {
        Vector.append<u64>(move(lhs), move(other));
        return;
    }

    // succeeds. standard vector method.
    public my_append2<Element>(lhs: &mut vector<Element>, other: vector<Element>)
    ensures len(*lhs) == old(len(*lhs) + len(other))
    ensures lhs[0..old(len(*lhs))] == old(*lhs)
    ensures lhs[old(len(*lhs))..len(*lhs)] == old(other)
    {
        Vector.append<Element>(move(lhs), move(other));
        return;
    }

    // TODO. actual Vector.append implementation with loop
    public my_append3(lhs: &mut vector<u64>, other: vector<u64>)
    //ensures len(*lhs) == old(len(*lhs) + len(other))
    //ensures lhs[0..old(len(*lhs))] == old(*lhs)
    //ensures lhs[old(len(*lhs))..len(*lhs)] == old(other)
    {
        Vector.reverse<u64>(&mut other);

        while (!Vector.is_empty<u64>(&other)) {
            Vector.push_back<u64>(
                copy(lhs),
                Vector.pop_back<u64>(&mut other)
            );
        }

        Vector.destroy_empty<u64>(move(other));
        return;
    }

    // NOTE: the current spec language cannot specify the following vector methods: reverse, contains
    // JP: I am not sure what could be the specs for Vector.borrow, Vector.borrow_mut and Vector.destroy.
}
