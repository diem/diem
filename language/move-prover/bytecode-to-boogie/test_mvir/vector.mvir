module Option {
    import 0x0.Vector;

    struct T<E> {
        v: Vector.T<E>
    }

    public none<E>(): Self.T<E> {
        return T<E> { v: Vector.empty<E>() };
    }

    public some<E>(e: E): Self.T<E> {
        let v: Vector.T<E>;
        v = Vector.empty<E>();
        Vector.push_back<E>(&mut v, move(e));
        return T<E> { v: move(v) };
    }

    public unwrap_or<E: unrestricted>(x: Self.T<E>, e: E): E {
        let v: Vector.T<E>;
        T<E> { v: v } = move(x);
        if (Vector.is_empty<E>(&v)) {
            return move(e);
        }
        return Vector.pop_back<E>(&mut v);
    }

    public test_u64() {
        let n: Self.T<u64>;
        let s: Self.T<u64>;
        n = Self.none<u64>();
        s = Self.some<u64>(42);
        assert(Self.unwrap_or<u64>(move(n), 0) == 0, 10);
        assert(Self.unwrap_or<u64>(move(s), 0) == 42, 10);
        return;
    }

    public test_append_reverse() {
        let vec: Vector.T<u64>;
        let other_vec: Vector.T<u64>;

        vec = Vector.empty<u64>();
        other_vec = Vector.empty<u64>();

        Vector.append<u64>(&mut vec, move(other_vec));
        assert(Vector.is_empty<u64>(&vec), 3);

        other_vec = Vector.empty<u64>();


        Vector.push_back<u64>(&mut other_vec, 1);
        // assert(*Vector.borrow<u64>(&vec, 0) == 1, 7);
        Vector.push_back<u64>(&mut other_vec, 2);
        Vector.reverse<u64>(&mut other_vec);
        Vector.push_back<u64>(&mut other_vec, 3);
        Vector.push_back<u64>(&mut vec, 4);
        Vector.append<u64>(&mut vec, move(other_vec));
        assert(!Vector.is_empty<u64>(&vec), 4);
        assert(Vector.length<u64>(&vec) == 4, 5);
        assert(*Vector.borrow<u64>(&vec, 0) == 4, 7);
        assert(*Vector.borrow<u64>(&vec, 1) == 2, 7);
        assert(*Vector.borrow<u64>(&vec, 2) == 1, 8);
        assert(*Vector.borrow<u64>(&vec, 3) == 3, 9);

        return;
    }

    public test_get_set_swap() {
        let emp_vec: Vector.T<u64>;
        let vec: Vector.T<u64>;

        emp_vec = Vector.empty<u64>();
        Vector.destroy_empty<u64>(move(emp_vec));

        vec = Vector.empty<u64>();
        Vector.push_back<u64>(&mut vec, 1);
        Vector.push_back<u64>(&mut vec, 2);

        Vector.set<u64>(&mut vec, 1, 22);
        assert(Vector.get<u64>(&vec, 1) == 22, 42);

        Vector.push_back<u64>(&mut vec, 3);
        Vector.swap<u64>(&mut vec, 1, 2);
        assert(Vector.get<u64>(&vec, 1) == 3, 43);
        assert(Vector.get<u64>(&vec, 2) == 22, 44);

        Vector.swap<u64>(&mut vec, 2, 1);
        assert(Vector.get<u64>(&vec, 1) == 22, 45);
        assert(Vector.get<u64>(&vec, 2) == 3, 46);

        assert(Vector.pop_back<u64>(&mut vec) == 3, 47);
        assert(Vector.pop_back<u64>(&mut vec) == 22, 48);
        assert(Vector.pop_back<u64>(&mut vec) == 1, 49);
        assert(Vector.is_empty<u64>(&vec), 50);

        Vector.destroy_empty<u64>(move(vec));
        return;
    }
}
