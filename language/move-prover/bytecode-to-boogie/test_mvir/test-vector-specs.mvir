// To run from bytecode-to-boogie dir:
// cargo run test_mvir/verify-stdlib/vector.mvir  test_mvir/test-vector-specs.mvir
// Delete this comment when it is integrated into tests.

module VerifyVector {
    import 0x0.Vector;

    struct T {
        x: u128,
        y: u64,
    }

    // succeeds. [] == [].
    public test_empty1() : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        return (move(ev1), move(ev2));
    }

    //succeeds. [] == [].
    public test_empty2() : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        let x: u64;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        x = Vector.pop_back<u64>(&mut ev1);
        return (move(ev1), move(ev2));
    }

    // succeeds. [1] == [1]
    public test_empty3(v : &vector<u64>) : vector<u64> * vector<u64>
    // TODO: next spec crashes because vec indices don't generate boogie yet.
    // spec should succeed
    // ensures RET(0)[0] == RET(1)[0] // working!
    // ensures RET(0)[0] + 1 == 2 // type error!
    // ensures t.x + 1 == 0 // Struct(1, StructDefinitionIndex(0), [])
//    ensures RET(0)[0] + 1 == 1 + 1 // Struct(0, StructDefinitionIndex(0), [U64])
//    ensures v[0] == 0
    ensures v[1:=7][1] - 1 == 6
    ensures v[1..2] == v[1..2]
    //ensures v == v[1 := 3]
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev2, 1);
        return (move(ev1), move(ev2));
    }

    //succeeds. [1,2] != [1].
    public test_empty4() : vector<u64> * vector<u64>
    // TODO: next spec crashes because vec indices don't generate boogie yet.
    // spec should succeed
    // ensures RET(0)[0..1] == RET(0)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev1, 2);
        Vector.push_back<u64>(&mut ev2, 1);
        return (move(ev1), move(ev2));
    }

    //succeeds. [1] != [0].
    public test_empty5() : vector<u64> * vector<u64>
    ensures RET(0) != RET(1)
    // ensures RET(0)[0 := 0] != RET(1)  // will cause nonsense in boogie file.
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev2, 0);
        return (move(ev1), move(ev2));
    }

    // succeeds. reverse([]) == [].
    public test_reverse1() : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.reverse<u64>(&mut ev1);
        return (move(ev1), move(ev2));
    }

    // succeeds. reverse([1,2]) == [2,1].
    public test_reverse2() : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev1, 2);
        Vector.push_back<u64>(&mut ev2, 2);
        Vector.push_back<u64>(&mut ev2, 1);
        Vector.reverse<u64>(&mut ev1);
        return (move(ev1), move(ev2));
    }

    // succeeds. Always aborts because the first index argument of `swap` is out-of-bounds.
    public test_swap1()
    aborts_if true
    {
        let ev1: vector<u64>;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 0);
        Vector.swap<u64>(&mut ev1, 1, 0);
        return;
    }

    // succeeds. Always aborts because the second index argument of `swap` is out-of-bounds.
    public test_swap2()
    aborts_if true
    {
        let ev1: vector<u64>;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 0);
        Vector.swap<u64>(&mut ev1, 0, 1);
        return;
    }

    // succeeds. swap([1,2],0,1) == [2,1].
    public test_swap3() : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev1, 2);
        Vector.push_back<u64>(&mut ev2, 2);
        Vector.push_back<u64>(&mut ev2, 1);
        Vector.swap<u64>(&mut ev1, 0, 0);
        Vector.swap<u64>(&mut ev1, 0, 1);
        return (move(ev1), move(ev2));
    }

    // succeeds. length([1]) = length([]) + 1.
    public test_length1() : u64 * u64
    ensures RET(0) == RET(1) + 1
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        return (Vector.length<u64>(& ev1), Vector.length<u64>(& ev2));
    }

    // succeeds. length(v) + 3 == length(v^[1]^[2]^[3]).
    public test_length2(v: vector<u64>) : u64 * u64
    ensures RET(0) + 3 == RET(1)
    {
        let x: u64;
        let y: u64;
        x = Vector.length<u64>(& v);
        Vector.push_back<u64>(&mut v, 1);
        Vector.push_back<u64>(&mut v, 2);
        Vector.push_back<u64>(&mut v, 3);
        y = Vector.length<u64>(& v);
        return (move(x), move(y));
    }

    // succeeds. v == v.
    public test_id1(v: vector<u64>) : vector<u64>
    ensures RET(0) == old(v)
    {
        return (move(v));
    }

    // succeeds. reverse(reverse(v)) == v.
    public test_id2(v: vector<u64>) : vector<u64>
    ensures RET(0) == old(v)
    {
        Vector.reverse<u64>(&mut v);
        Vector.reverse<u64>(&mut v);
        return (move(v));
    }

    // succeeds. reverse(some_obscure_reverse_routine(v)) == v.
    public test_id3(v: vector<u64>) : vector<u64>
    ensures RET(0) == old(v)
    {
        let l: u64;
        l = Vector.length<u64>(& v);
        if(copy(l) <= 1) {
        }
        else {
            if (copy(l) <= 3) {
                Vector.swap<u64>(&mut v, 0, copy(l)-1);
            }
            else {
                Vector.reverse<u64>(&mut v);
            }
        }
        Vector.reverse<u64>(&mut v);
        return (move(v));
    }

    // succeeds. If the input vector is empty, destroy it, and return a new empty vector.
    public test_destroy_empty1(v: vector<u64>) : vector<u64>
    ensures RET(0) == old(v)
    {
        if (Vector.is_empty<u64>(& v)) {
            Vector.destroy_empty<u64>(move(v));
            return Vector.empty<u64>();
        }
        else {
            return move(v);
        }
    }

    // succeeds. Always aborts. If v is empty, attempt to access out-of-bounds. Otherwise, attempt to destroy the non-empty vector.
    public test_destroy_empty2(v: vector<u64>)
    aborts_if true
    {
        if (Vector.is_empty<u64>(& v)) {
            Vector.set<u64>(&mut v, 0, 0);
        }
        else {
            Vector.destroy_empty<u64>(move(v));
        }
        return;
    }

    // succeeds. [x] == [x].
    public test_get_set1(x: u64) : vector<u64> * vector<u64>
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let ev2: vector<u64>;
        ev1 = Vector.empty<u64>();
        ev2 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        Vector.push_back<u64>(&mut ev2, 2);
        Vector.set<u64>(&mut ev1, 0, move(x));
        Vector.set<u64>(&mut ev2, 0, Vector.get<u64>(& ev1, 0));
        return (move(ev1), move(ev2));
    }

    // succeeds.
    public test_get1() : u64
    ensures RET(0) == 7
    {
        let ev1: vector<u64>;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 7);
        return Vector.get<u64>(&ev1, 0);
    }

    // succeeds. Always aborts due to the out-of-bounds index used.
    public test_get2()
    aborts_if true
    {
        let x : u64;
        let ev1: vector<u64>;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 1);
        x = Vector.get<u64>(& ev1, 1);
        return;
    }

    // succeeds. 7 == 7.
    public test_borrow1() : u64 * u64
    ensures RET(0) == RET(1)
    {
        let ev1: vector<u64>;
        let y : &u64;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 7);
        y = Vector.borrow<u64>(&ev1, 0);
        return (7, *move(y));
    }

    // succeeds. Always aborts due to the out-of-bounds index used.
    public test_borrow2() : u64 * u64
    aborts_if true
    ensures false
    {
        let ev1: vector<u64>;
        let y : &u64;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 7);
        y = Vector.borrow<u64>(&ev1, 1);
        return (7, *move(y));
    }

    // success. 0 != 7
    public test_borrow3() : u64 * u64
    ensures RET(0) != RET(1)
    {
        let ev1: vector<u64>;
        let y : &u64;
        ev1 = Vector.empty<u64>();
        Vector.push_back<u64>(&mut ev1, 7);
        y = Vector.borrow<u64>(&ev1, 0);
        return (0, *move(y));
    }
}
