// The module for the account resource that governs every Libra account
module LibraAccount {
    import 0x0.LibraCoin;
    import 0x0.Hash;
    import 0x0.U64Util;
    import 0x0.Vector;
    import 0x0.AddressUtil;

    // Every Libra account has a LibraAccount.T resource
    resource T {
        // The current authentication key.
        // This can be different than the key used to create the account
        authentication_key: vector<u8>,
        // The coins stored in this account
        balance: LibraCoin.T,
        // If true, the authority to rotate the authentication key of this account resides elsewhere
        delegated_key_rotation_capability: bool,
        // If true, the authority to withdraw funds from this account resides elsewhere
        delegated_withdrawal_capability: bool,
        // Event handle for received event
        received_events: Self.EventHandle<Self.ReceivedPaymentEvent>,
        // Event handle for sent event
        sent_events: Self.EventHandle<Self.SentPaymentEvent>,
        // The current sequence number.
        // Incremented by one each time a transaction is submitted
        sequence_number: u64,
        // Generator for event handles
        event_generator: Self.EventHandleGenerator,
    }

    // The holder of WithdrawalCapability for account_address can withdraw Libra from
    // account_address/LibraAccount.T/balance.
    // There is at most one WithdrawalCapability in existence for a given address.
    resource WithdrawalCapability {
        account_address: address,
    }

    // The holder of KeyRotationCapability for account_address can rotate the authentication key for
    // account_address (i.e., write to account_address/LibraAccount.T/authentication_key).
    // There is at most one KeyRotationCapability in existence for a given address.
    resource KeyRotationCapability {
        account_address: address,
    }

    // Message for sent events
    struct SentPaymentEvent {
        // The amount of LibraCoin.T sent
        amount: u64,
        // The address that was paid
        payee: address,
        // Metadata associated with the payment
        metadata: vector<u8>,
    }

    // Message for received events
    struct ReceivedPaymentEvent {
        // The amount of LibraCoin.T received
        amount: u64,
        // The address that sent the coin
        payer: address,
        // Metadata associated with the payment
        metadata: vector<u8>,
    }

    /// Events
    // A resource representing the counter used to generate uniqueness under each account. There won't be destructor for
    // this resource to guarantee the uniqueness of the generated handle.
    resource EventHandleGenerator {
        // A monotonically increasing counter
        counter: u64,
    }

    // A handle for a event such that:
    // 1. Other modules can emit event to this handle.
    // 2. Storage can use this handle to prove the total number of events that happened in the past.
    resource EventHandle<T: copyable> {
        // Total number of events emitted to this event stream.
        counter: u64,
        // A globally unique ID for this event stream.
        guid: vector<u8>,
    }

    // Creates a new LibraAccount.T
    // Invoked by the `create_account` builtin
    make(fresh_address: address): Self.T
        ensures RET.balance.value == 0
        ensures !RET.delegated_key_rotation_capability && !RET.delegated_withdrawal_capability
        ensures RET.received_events.counter == 0 && RET.sent_events.counter == 0
    {
        let zero_balance: LibraCoin.T;
        let generator: Self.EventHandleGenerator;
        let sent_handle: Self.EventHandle<Self.SentPaymentEvent>;
        let received_handle: Self.EventHandle<Self.ReceivedPaymentEvent>;
        let auth_key: vector<u8>;

        auth_key = AddressUtil.address_to_bytes(copy(fresh_address));
        generator = EventHandleGenerator {counter: 0};
        sent_handle = Self.new_event_handle_impl<Self.SentPaymentEvent>(&mut generator, copy(fresh_address));
        received_handle = Self.new_event_handle_impl<Self.ReceivedPaymentEvent>(&mut generator, move(fresh_address));
        zero_balance = LibraCoin.zero();

        return T {
            authentication_key: move(auth_key),
            balance: move(zero_balance),
            delegated_key_rotation_capability: false,
            delegated_withdrawal_capability: false,
            received_events: move(received_handle),
            sent_events: move(sent_handle),
            sequence_number: 0,
            event_generator: move(generator),
        };
    }

    // Deposits the `to_deposit` coin into the `payee`'s account
    public deposit(payee: address, to_deposit: LibraCoin.T)
        acquires T
        aborts_if !global_exists<Self.T>(txn_sender)
        aborts_if !global_exists<Self.T>(payee)
        aborts_if to_deposit.value == 0
        aborts_if global<Self.T>(payee).balance.value + to_deposit.value > max_u64()
        aborts_if global<Self.T>(txn_sender).sent_events.counter + 1 > max_u64()
        aborts_if global<Self.T>(payee).received_events.counter + 1 > max_u64()
        ensures global<Self.T>(payee).balance.value == old(global<Self.T>(payee).balance.value) + to_deposit.value
    {
        Self.deposit_with_metadata(move(payee), move(to_deposit), h"");
        return;
    }

    // Deposits the `to_deposit` coin into the `payee`'s account with the attached `metadata`
    public deposit_with_metadata(
        payee: address,
        to_deposit: LibraCoin.T,
        metadata: vector<u8>
    )
        acquires T
        aborts_if !global_exists<Self.T>(txn_sender)
        aborts_if !global_exists<Self.T>(payee)
        aborts_if to_deposit.value == 0
        aborts_if global<Self.T>(payee).balance.value + to_deposit.value > max_u64()
        aborts_if global<Self.T>(txn_sender).sent_events.counter + 1 > max_u64()
        aborts_if global<Self.T>(payee).received_events.counter + 1 > max_u64()
        ensures global<Self.T>(payee).balance.value == old(global<Self.T>(payee).balance.value) + to_deposit.value
    {
        Self.deposit_with_sender_and_metadata(
            move(payee),
            get_txn_sender(),
            move(to_deposit),
            move(metadata)
        );
        return;
    }

    // Deposits the `to_deposit` coin into the `payee`'s account with the attached `metadata` and
    // sender address
    deposit_with_sender_and_metadata(
        payee: address,
        sender: address,
        to_deposit: LibraCoin.T,
        metadata: vector<u8>
    )
        acquires T
        aborts_if !global_exists<Self.T>(payee)
        aborts_if !global_exists<Self.T>(sender)
        aborts_if to_deposit.value == 0
        aborts_if global<Self.T>(payee).balance.value + to_deposit.value > max_u64()
        aborts_if global<Self.T>(sender).sent_events.counter + 1 > max_u64()
        aborts_if global<Self.T>(payee).received_events.counter + 1 > max_u64()
        ensures global<Self.T>(payee).balance.value == old(global<Self.T>(payee).balance.value) + to_deposit.value
    {
        let deposit_value: u64;
        let payee_account_ref: &mut Self.T;
        let sender_account_ref: &mut Self.T;

        // Check that the `to_deposit` coin is non-zero
        deposit_value = LibraCoin.value(&to_deposit);
        assert(copy(deposit_value) > 0, 7);

        // Load the sender's account
        sender_account_ref = borrow_global_mut<T>(copy(sender));
        // Log a sent event
        Self.emit_event<Self.SentPaymentEvent>(
            &mut move(sender_account_ref).sent_events,
            SentPaymentEvent {
                amount: copy(deposit_value),
                payee: copy(payee),
                metadata: copy(metadata)
            },
        );

        // Load the payee's account
        payee_account_ref = borrow_global_mut<T>(move(payee));
        // Deposit the `to_deposit` coin
        LibraCoin.deposit(&mut copy(payee_account_ref).balance, move(to_deposit));
        // Log a received event
        Self.emit_event<Self.ReceivedPaymentEvent>(
            &mut move(payee_account_ref).received_events,
            ReceivedPaymentEvent {
                amount: move(deposit_value),
                payer: move(sender),
                metadata: move(metadata)
            }
        );
        return;
    }

    // mint_to_address can only be called by accounts with MintCapability (see LibraCoin)
    // and those account will be charged for gas. If those account don't have enough gas to pay
    // for the transaction cost they will fail minting.
    // However those account can also mint to themselves so that is a decent workaround
    public mint_to_address(payee: address, amount: u64) acquires T
        aborts_if !global_exists<LibraCoin.MintCapability>(txn_sender)
        aborts_if !global_exists<LibraCoin.MarketCap>(0xA550C18)
        // Over mint-able amount
        aborts_if amount > 1000000000000000
        aborts_if amount == 0
        aborts_if global_exists<Self.T>(payee) && global<Self.T>(payee).balance.value + amount > max_u64()
        aborts_if global<Self.T>(txn_sender).sent_events.counter + 1 > max_u64()
        aborts_if global_exists<Self.T>(payee) && global<Self.T>(payee).received_events.counter + 1 > max_u64()
        // MarketCap overflow
        aborts_if amount + global<LibraCoin.MarketCap>(0xA550C18).total_value > max_u64()
        ensures global_exists<Self.T>(payee)
        ensures !old(global_exists<Self.T>(payee)) ==> global<Self.T>(payee).balance.value == amount
        ensures old(global_exists<Self.T>(payee)) ==> global<Self.T>(payee).balance.value == old(global<Self.T>(payee).balance.value) + amount
        ensures global<LibraCoin.MarketCap>(0xA550C18).total_value == old(global<LibraCoin.MarketCap>(0xA550C18).total_value) + amount
    {
        // Create an account if it does not exist
        if (!exists<T>(copy(payee))) {
            Self.create_account(copy(payee));
        }

        // Mint and deposit the coin
        Self.deposit(move(payee), LibraCoin.mint_with_default_capability(move(amount)));
        return;
    }

    // Helper to withdraw `amount` from the given `account` and return the resulting LibraCoin.T
    withdraw_from_account(account: &mut Self.T, amount: u64): LibraCoin.T
        aborts_if account.balance.value < amount
        ensures RET.value == amount
        ensures account.balance.value == old(account.balance.value) - amount
    {
        let to_withdraw: LibraCoin.T;

        to_withdraw = LibraCoin.withdraw(&mut move(account).balance, copy(amount));
        return move(to_withdraw);
    }

    // Withdraw `amount` LibraCoin.T from the transaction sender's account
    public withdraw_from_sender(amount: u64): LibraCoin.T acquires T
        aborts_if global<Self.T>(txn_sender).delegated_withdrawal_capability
        aborts_if global<Self.T>(txn_sender).balance.value < amount
        ensures RET.value == amount
        ensures global<Self.T>(txn_sender).balance.value == old(global<Self.T>(txn_sender).balance.value) - amount
    {
        let sender_account: &mut Self.T;

        sender_account = borrow_global_mut<T>(get_txn_sender());
        if (*&copy(sender_account).delegated_withdrawal_capability) {
            // The sender has delegated the privilege to withdraw from her account elsewhere--abort.
            abort(11);
        } else {
            // The sender has retained her withdrawal privileges--proceed.
            return Self.withdraw_from_account(move(sender_account), move(amount));
        }
    }

    // Withdraw `amount` LibraCoin.T from account under cap.account_address
    public withdraw_with_capability(
        cap: &Self.WithdrawalCapability, amount: u64
    ): LibraCoin.T acquires T
        aborts_if !global_exists<Self.T>(cap.account_address)
        aborts_if global<Self.T>(cap.account_address).balance.value < amount
        ensures RET.value == amount
        ensures global<Self.T>(cap.account_address).balance.value == old(global<Self.T>(cap.account_address).balance.value) - amount
    {
        let account: &mut Self.T;

        account = borrow_global_mut<T>(*&move(cap).account_address);
        return Self.withdraw_from_account(move(account), move(amount));
    }

    // Return a unique capability granting permission to withdraw from the sender's account balance.
    public extract_sender_withdrawal_capability(): Self.WithdrawalCapability
        acquires T
        aborts_if !global_exists<Self.T>(txn_sender)
        aborts_if global<Self.T>(txn_sender).delegated_withdrawal_capability
        ensures global<Self.T>(txn_sender).delegated_withdrawal_capability
        ensures RET.account_address == txn_sender
    {
        let sender: address;
        let sender_account: &mut Self.T;
        let delegated_ref: &mut bool;

        sender = get_txn_sender();
        sender_account = borrow_global_mut<T>(copy(sender));
        delegated_ref = &mut move(sender_account).delegated_withdrawal_capability;
        if (*copy(delegated_ref)) {
            // We already extracted the unique withdrawal capability for this account.
            abort(11);
        } else {
            *move(delegated_ref) = true; // ensure uniqueness of the capability
            return WithdrawalCapability { account_address: move(sender) };
        }
    }

    // Return the withdrawal capability to the account it originally came from
    public restore_withdrawal_capability(cap: Self.WithdrawalCapability)
        acquires T
        aborts_if !global_exists<Self.T>(cap.account_address)
        ensures !global<Self.T>(cap.account_address).delegated_withdrawal_capability
    {
        let account_address: address;
        let account: &mut Self.T;

        // Destroy the capability
        WithdrawalCapability { account_address } = move(cap);
        account = borrow_global_mut<T>(move(account_address));
        // Update the flag for `account_address` to indicate that the capability has been restored.
        // The account owner will now be able to call pay_from_sender, withdraw_from_sender, and
        // extract_sender_withdrawal_capability again.
        *(&mut move(account).delegated_withdrawal_capability) = false;

        return;
    }

    // Withdraws `amount` LibraCoin.T using the passed in WithdrawalCapability, and deposits it
    // into the `payee`'s account. Creates the `payee` account if it doesn't exist.
    public pay_from_capability(
        payee: address,
        cap: &Self.WithdrawalCapability,
        amount: u64,
        metadata: vector<u8>
    ) acquires T
        // aborts_if amount == 0
        // aborts_if global_exists<Self.T>(payee) && global<Self.T>(payee).balance.value + amount > max_u64()
        // aborts_if global<Self.T>(cap.account_address).sent_events.counter + 1 > max_u64()
        // aborts_if global_exists<Self.T>(payee) && global<Self.T>(payee).received_events.counter + 1 > max_u64()
        // aborts_if !global_exists<Self.T>(cap.account_address)
        // aborts_if global<Self.T>(cap.account_address).balance.value < amount
        ensures global_exists<Self.T>(payee)
        ensures !old(global_exists<Self.T>(payee)) ==> global<Self.T>(payee).balance.value == amount
        // ensures old(global_exists<Self.T>(payee)) ==> global<Self.T>(payee).balance.value == old(global<Self.T>(payee).balance.value) + amount
        // ensures global<Self.T>(cap.account_address).balance.value == old(global<Self.T>(cap.account_address).balance.value) - amount
    {
        if (!exists<T>(copy(payee))) {
            Self.create_account(copy(payee));
        }
        Self.deposit_with_sender_and_metadata(
            move(payee),
            *&copy(cap).account_address,
            Self.withdraw_with_capability(move(cap), move(amount)),
            h""
        );
        return;
    }

    // Withdraw `amount` LibraCoin.T from the transaction sender's account and send the coin
    // to the `payee` address with the attached `metadata`
    // Creates the `payee` account if it does not exist
    public pay_from_sender_with_metadata(
        payee: address,
        amount: u64,
        metadata: vector<u8>
    )
        acquires T
        aborts_if global<Self.T>(txn_sender).delegated_withdrawal_capability
        aborts_if txn_sender == payee
        aborts_if amount == 0
        aborts_if global_exists<Self.T>(payee) && global<Self.T>(payee).balance.value + amount > max_u64()
        aborts_if global<Self.T>(txn_sender).balance.value < amount
        aborts_if global<Self.T>(txn_sender).sent_events.counter + 1 > max_u64()
        aborts_if global<Self.T>(payee).received_events.counter + 1 > max_u64()
        ensures global_exists<Self.T>(payee)
        ensures old(global_exists<Self.T>(payee)) ==>
                    global<Self.T>(payee).balance.value == old(global<Self.T>(payee).balance.value) + amount
        ensures !old(global_exists<Self.T>(payee)) ==> global<Self.T>(payee).balance.value == amount
        ensures global<Self.T>(txn_sender).balance.value == old(global<Self.T>(txn_sender).balance.value) - amount
    {
        // note we added this assertion. Is it a bug?
        assert(copy(payee) != get_txn_sender(), 12);

        if (!exists<T>(copy(payee))) {
            Self.create_account(copy(payee));
        }
        Self.deposit_with_metadata(
            move(payee),
            Self.withdraw_from_sender(move(amount)),
            move(metadata)
        );
        return;
    }

    // Withdraw `amount` LibraCoin.T from the transaction sender's account and send the coin
    // to the `payee` address
    // Creates the `payee` account if it does not exist
    public pay_from_sender(payee: address, amount: u64)
        acquires T
        aborts_if global<Self.T>(txn_sender).delegated_withdrawal_capability
        aborts_if txn_sender == payee
        aborts_if amount == 0
        aborts_if global_exists<Self.T>(payee) && global<Self.T>(payee).balance.value + amount > max_u64()
        aborts_if global<Self.T>(txn_sender).balance.value < amount
        aborts_if global<Self.T>(txn_sender).sent_events.counter + 1 > max_u64()
        aborts_if global<Self.T>(payee).received_events.counter + 1 > max_u64()
        ensures global_exists<Self.T>(payee)
        ensures old(global_exists<Self.T>(payee)) ==>
            global<Self.T>(payee).balance.value == old(global<Self.T>(payee).balance.value) + amount
        ensures !old(global_exists<Self.T>(payee)) ==> global<Self.T>(payee).balance.value == amount
        ensures global<Self.T>(txn_sender).balance.value == old(global<Self.T>(txn_sender).balance.value) - amount
    {
        // note we added this assertion. Is it a bug?
        assert(copy(payee) != get_txn_sender(), 12);

        Self.pay_from_sender_with_metadata(move(payee), move(amount), h"");
        return;
    }

    rotate_authentication_key_for_account(account: &mut Self.T, new_authentication_key: vector<u8>)
        ensures account.authentication_key == new_authentication_key
    {
        *(&mut move(account).authentication_key) = move(new_authentication_key);
        return;
    }

    // Rotate the transaction sender's authentication key
    // The new key will be used for signing future transactions
    public rotate_authentication_key(new_authentication_key: vector<u8>)
        acquires T
        aborts_if !global_exists<Self.T>(txn_sender)
        aborts_if global<Self.T>(txn_sender).delegated_key_rotation_capability
        ensures global<Self.T>(txn_sender).authentication_key == new_authentication_key
    {
        let sender_account: &mut Self.T;

        sender_account = borrow_global_mut<T>(get_txn_sender());
        if (*&copy(sender_account).delegated_key_rotation_capability) {
            // The sender has delegated the privilege to rotate her key elsewhere--abort
            abort(11);
        } else {
            // The sender has retained her key rotation privileges--proceed.
            Self.rotate_authentication_key_for_account(
                move(sender_account),
                move(new_authentication_key)
            );
            return;
        }
    }

    // Rotate the authentication key for the account under cap.account_address
    public rotate_authentication_key_with_capability(
        cap: &Self.KeyRotationCapability,
        new_authentication_key: vector<u8>,
    )
        acquires T
        aborts_if !global_exists<Self.T>(cap.account_address)
        // ensures global<Self.T>(cap.account_address).authentication_key == new_authentication_key
    {
        Self.rotate_authentication_key_for_account(
            borrow_global_mut<T>(*&move(cap).account_address),
            move(new_authentication_key)
        );
        return;
    }

    // Return a unique capability granting permission to rotate the sender's authentication key
    public extract_sender_key_rotation_capability(): Self.KeyRotationCapability
        acquires T
        aborts_if !global_exists<Self.T>(txn_sender)
        aborts_if global<Self.T>(txn_sender).delegated_key_rotation_capability
        ensures RET.account_address == txn_sender
    {
        let sender: address;
        let delegated_ref: &mut bool;

        sender = get_txn_sender();
        delegated_ref = &mut borrow_global_mut<T>(copy(sender)).delegated_key_rotation_capability;
        if (*copy(delegated_ref)) {
            // We already extracted the unique key rotation capability for this account.
            abort(11);
        } else {
            *move(delegated_ref) = true; // ensure uniqueness of the capability
            return KeyRotationCapability { account_address: move(sender) };
        }
    }

    // Return the key rotation capability to the account it originally came from
    public restore_key_rotation_capability(cap: Self.KeyRotationCapability)
        acquires T
        aborts_if !global_exists<Self.T>(cap.account_address)
        ensures !global<Self.T>(cap.account_address).delegated_key_rotation_capability
    {
        let account_address: address;
        let account: &mut Self.T;

        // Destroy the capability
        KeyRotationCapability { account_address } = move(cap);
        account = borrow_global_mut<T>(move(account_address));
        // Update the flag for `account_address` to indicate that the capability has been restored.
        // The account owner will now be able to call rotate_authentication_key and
        // extract_sender_key_rotation_capability again
        *(&mut move(account).delegated_key_rotation_capability) = false;

        return;
    }

    // Creates a new account at `fresh_address` with an initial balance of zero
    public create_account(fresh_address: address)
        aborts_if global_exists<Self.T>(fresh_address)
        ensures global_exists<Self.T>(fresh_address)
        ensures global<Self.T>(fresh_address).balance.value == 0
        ensures !global<Self.T>(fresh_address).delegated_withdrawal_capability
    {
        let generator: Self.EventHandleGenerator;

        generator = EventHandleGenerator {counter: 0};
        Self.save_account(
            copy(fresh_address),
            T {
                authentication_key: AddressUtil.address_to_bytes(copy(fresh_address)),
                balance: LibraCoin.zero(),
                delegated_key_rotation_capability: false,
                delegated_withdrawal_capability: false,
                received_events: Self.new_event_handle_impl<Self.ReceivedPaymentEvent>(&mut generator, copy(fresh_address)),
                sent_events: Self.new_event_handle_impl<Self.SentPaymentEvent>(&mut generator, move(fresh_address)),
                sequence_number: 0,
                event_generator: move(generator),
            }
        );
        return;
    }

    // Creates a new account at `fresh_address` with the `initial_balance` deducted from the
    // transaction sender's account
    public create_new_account(fresh_address: address, initial_balance: u64)
        acquires T
        aborts_if global_exists<Self.T>(fresh_address)
        aborts_if global<Self.T>(txn_sender).delegated_withdrawal_capability
        aborts_if global<Self.T>(txn_sender).balance.value < initial_balance
        aborts_if initial_balance > max_u64()
        ensures global_exists<Self.T>(fresh_address)
        ensures global<Self.T>(fresh_address).balance.value == initial_balance
        ensures !global<Self.T>(fresh_address).delegated_withdrawal_capability
        ensures global<Self.T>(txn_sender).balance.value == old(global<Self.T>(txn_sender).balance.value) - initial_balance
    {
        Self.create_account(copy(fresh_address));
        if (copy(initial_balance) > 0) {
            Self.pay_from_sender(move(fresh_address), move(initial_balance));
        }
        return;
    }

    // Save an account to a given address if the address does not have an account resource yet
    native save_account(addr: address, account: Self.T)
        aborts_if global_exists<Self.T>(addr)
        ensures global_exists<Self.T>(addr)
        ensures global<Self.T>(addr) == account;

    // Helper to return u64 value of the `balance` field for given `account`
    balance_for_account(account: &Self.T): u64
        ensures RET == account.balance.value
    {
        let balance_value: u64;
        balance_value = LibraCoin.value(&move(account).balance);
        return move(balance_value);
    }

    // Return the current balance of the LibraCoin.T in LibraAccount.T at `addr`
    public balance(addr: address): u64
        acquires T
        aborts_if !global_exists<Self.T>(addr)
        ensures RET == global<Self.T>(addr).balance.value
    {
        return Self.balance_for_account(borrow_global<T>(move(addr)));
    }

    // Helper to return the sequence number field for given `account`
    sequence_number_for_account(account: &Self.T): u64
        ensures RET == account.sequence_number
    {
        return *(&move(account).sequence_number);
    }

    // Return the current sequence number at `addr`
    public sequence_number(addr: address): u64
        acquires T
        aborts_if !global_exists<Self.T>(addr)
        ensures RET == global<Self.T>(addr).sequence_number
    {
        return Self.sequence_number_for_account(borrow_global<T>(move(addr)));
    }

   // Return true if the account at `addr` has delegated its key rotation capability
    public delegated_key_rotation_capability(addr: address): bool
        acquires T
        aborts_if !global_exists<Self.T>(addr)
        ensures RET == global<Self.T>(addr).delegated_key_rotation_capability
    {
        return *&(borrow_global<T>(move(addr))).delegated_key_rotation_capability;
    }

    // Return true if the account at `addr` has delegated its withdrawal capability
    public delegated_withdrawal_capability(addr: address): bool
        acquires T
        aborts_if !global_exists<Self.T>(addr)
        ensures RET == global<Self.T>(addr).delegated_withdrawal_capability
    {
        return *&(borrow_global<T>(move(addr))).delegated_withdrawal_capability;
    }


    // Return a reference to the address associated with the given withdrawal capability
    public withdrawal_capability_address(cap: &Self.WithdrawalCapability): &address

        ensures RET == &cap.account_address
    {
        return &move(cap).account_address;
    }

    // Return a reference to the address associated with the given key rotation capability
    public key_rotation_capability_address(cap: &Self.KeyRotationCapability): &address
        ensures RET == &cap.account_address
    {
        return &move(cap).account_address;
    }

    // Checks if an account exists at `check_addr`
    public exists(check_addr: address): bool
        ensures RET == global_exists<Self.T>(check_addr)
    {
        return exists<T>(move(check_addr));
    }

    // The prologue is invoked at the beginning of every transaction
    // It verifies:
    // - The account's auth key matches the transaction's public key
    // - That the account has enough balance to pay for all of the gas
    // - That the sequence number matches the transaction's sequence key
    prologue(
        txn_sequence_number: u64,
        txn_public_key: vector<u8>,
        txn_gas_price: u64,
        txn_max_gas_units: u64,
    ) acquires T {
        let transaction_sender: address;
        let sender_account: &mut Self.T;
        let imm_sender_account: &Self.T;
        let max_transaction_fee: u64;
        let balance_amount: u64;
        let sequence_number_value: u64;

        transaction_sender = get_txn_sender();

        // FUTURE: Make these error codes sequential
        // Verify that the transaction sender's account exists
        assert(exists<T>(copy(transaction_sender)), 5);

        // Load the transaction sender's account
        sender_account = borrow_global_mut<T>(copy(transaction_sender));

        // Check that the hash of the transaction's public key matches the account's auth key
        assert(
            Hash.sha3_256(move(txn_public_key)) == *(&copy(sender_account).authentication_key),
            2
        );

        // Check that the account has enough balance for all of the gas
        max_transaction_fee = move(txn_gas_price) * move(txn_max_gas_units);
        imm_sender_account = freeze(copy(sender_account));
        balance_amount = Self.balance_for_account(move(imm_sender_account));
        assert(move(balance_amount) >= move(max_transaction_fee), 6);

        // Check that the transaction sequence number matches the sequence number of the account
        sequence_number_value = *(&mut move(sender_account).sequence_number);
        assert(copy(txn_sequence_number) >= copy(sequence_number_value), 3);
        assert(move(txn_sequence_number) == move(sequence_number_value), 4);
        return;
    }

    // The epilogue is invoked at the end of transactions.
    // It collects gas and bumps the sequence number
    epilogue(
        txn_sequence_number: u64,
        txn_gas_price: u64,
        txn_max_gas_units: u64,
        gas_units_remaining: u64
    ) acquires T {
        let sender_account: &mut Self.T;
        let transaction_fee_account: &mut Self.T;
        let imm_sender_account: &Self.T;
        let transaction_fee_amount: u64;
        let transaction_fee: LibraCoin.T;

        // Load the transaction sender's account
        sender_account = borrow_global_mut<T>(get_txn_sender());

        // Charge for gas
        transaction_fee_amount =
            move(txn_gas_price) * (move(txn_max_gas_units) - move(gas_units_remaining));
        imm_sender_account = freeze(copy(sender_account));
        assert(
            Self.balance_for_account(move(imm_sender_account)) >= copy(transaction_fee_amount),
            6
        );
        transaction_fee =
            Self.withdraw_from_account(
                copy(sender_account),
                move(transaction_fee_amount)
            );

        // Bump the sequence number
        *(&mut move(sender_account).sequence_number) = move(txn_sequence_number) + 1;
        // Pay the transaction fee into the transaction fee pot
        transaction_fee_account = borrow_global_mut<T>(0xFEE);
        LibraCoin.deposit(&mut move(transaction_fee_account).balance, move(transaction_fee));
        return;
    }

    /// Events
    //
    // Derive a fresh unique id by using sender's EventHandleGenerator. The generated vector<u8> is indeed unique because it
    // was derived from the hash(sender's EventHandleGenerator || sender_address). This module guarantees that the
    // EventHandleGenerator is only going to be monotonically increased and there's no way to revert it or destroy it. Thus
    // such counter is going to give distinct value for each of the new event stream under each sender. And since we
    // hash it with the sender's address, the result is guaranteed to be globally unique.
    fresh_guid(counter: &mut Self.EventHandleGenerator, sender: address): vector<u8>
        aborts_if counter.counter + 1 > max_u64()
    {
        let count: &mut u64;
        let count_bytes: vector<u8>;
        let preimage: vector<u8>;
        let sender_bytes: vector<u8>;

        count = &mut move(counter).counter;
        sender_bytes = AddressUtil.address_to_bytes(move(sender));

        count_bytes = U64Util.u64_to_bytes(*copy(count));
        *move(count) = *copy(count) + 1;

        // EventHandleGenerator goes first just in case we want to extend address in the future.
        preimage = move(count_bytes);
        Vector.append<u8>(&mut preimage, move(sender_bytes));
        return move(preimage);
    }

    // Use EventHandleGenerator to generate a unique event handle that one can emit an event to.
    new_event_handle_impl<T: copyable>(counter: &mut Self.EventHandleGenerator, sender: address): Self.EventHandle<T>
        aborts_if counter.counter + 1 > max_u64()
    {
        return EventHandle<T> {counter: 0, guid: Self.fresh_guid(move(counter), move(sender))};
    }

    // Use sender's EventHandleGenerator to generate a unique event handle that one can emit an event to.
    public new_event_handle<T: copyable>(): Self.EventHandle<T> acquires T
        aborts_if global<Self.T>(txn_sender).event_generator.counter + 1 > max_u64()
    {
        let sender_account_ref: &mut Self.T;
        let sender_bytes: vector<u8>;
        sender_account_ref = borrow_global_mut<T>(get_txn_sender());
        return Self.new_event_handle_impl<T>(&mut (move(sender_account_ref)).event_generator, get_txn_sender());
    }

    // Emit an event with payload `msg` by using handle's key and counter. Will change the payload from vector<u8> to a
    // generic type parameter once we have generics.
    public emit_event<T: copyable>(handle_ref: &mut Self.EventHandle<T>, msg: T)
        aborts_if handle_ref.counter + 1 > max_u64()
    {
        let count: &mut u64;
        let guid: vector<u8>;

        guid = *&copy(handle_ref).guid;
        count = &mut move(handle_ref).counter;

        Self.write_to_event_store<T>(move(guid), *copy(count), move(msg));
        *move(count) = *copy(count) + 1;
        return;
    }

    // Native procedure that writes to the actual event stream in Event store
    // This will replace the "native" portion of EmitEvent bytecode
    native write_to_event_store<T: copyable>(guid: vector<u8>, count: u64, msg: T)
        aborts_if false;

    // Destroy a unique handle.
    public destroy_handle<T: copyable>(handle: Self.EventHandle<T>)
        aborts_if false
    {
        let guid: vector<u8>;
        let count: u64;
        EventHandle<T> { count, guid } = move(handle);
        return;
    }
}
