module TestLifetime {
    resource S {
        x: u64,
        invariant {data} x > 1, //! This assertion might not hold.
    }

    resource T {
        x: u64,
        invariant {data} x > 1, //! This assertion might not hold.
    }

    public invalid_S() : Self.S {
        let s: Self.S;
        let s_ref: &mut Self.S;
        let x_ref: &mut u64;

        s = S{x:3};
        s_ref = &mut s;
        x_ref = &mut move(s_ref).x;
        *move(x_ref) = 0; // s_ref goes out of scope here

        s_ref = &mut s;
        x_ref = &mut move(s_ref).x;
        *move(x_ref) = 2;

        return move(s);
    }

    public invalid_bool(cond: bool) : Self.S * Self.T {
        let s_ref: &mut Self.S;
        let s: Self.S;
        let t_ref: &mut Self.T;
        let t: Self.T;
        let x_ref: &mut u64;

        s = S{x:3};
        t = T{x:4};
        s_ref = &mut s;
        t_ref = &mut t;

        if (copy(cond)) {
            x_ref = &mut move(s_ref).x;
        } else {
            x_ref = &mut move(t_ref).x;
        }

        if (move(cond)) {
            *move(x_ref) = 10;
        } else {
            *move(x_ref) = 0; // only T's invariant should fail
        }
        return move(s), move(t);
    }
}
