module LibraSystem {
    import 0x0.LibraCoin;
    import 0x0.LibraAccount;
    import 0x0.ValidatorConfig;
    import 0x0.Vector;

    struct ValidatorInfo {
        addr: address,
        consensus_pubkey: bytearray,
        consensus_voting_power: u64,
        network_signing_pubkey: bytearray,
        network_identity_pubkey: bytearray,
    }

    struct ValidatorSetChangeEvent {
        new_validator_set: Vector.T<Self.ValidatorInfo>,
    }

    resource ValidatorSet {
        // The current validator set. Updated only at epoch boundaries via reconfiguration.
        validators: Vector.T<Self.ValidatorInfo>,
        // List of validators to add at the next reconfiguration.
        additions: Vector.T<address>,
        // List of validators to removal at the next reconfiguration. Disjoint with additions.
        removals: Vector.T<address>,
        // Handle where validator set change events are emitted
        change_events: LibraAccount.EventHandle<Self.ValidatorSetChangeEvent>,
    }

    struct DiscoveryInfo {
        addr: address,
        validator_network_identity_pubkey: bytearray,
        validator_network_address: bytearray,
        fullnodes_network_identity_pubkey: bytearray,
        fullnodes_network_address: bytearray,
    }

    struct DiscoverySetChangeEvent {
        new_discovery_set: Vector.T<Self.DiscoveryInfo>,
    }

    resource DiscoverySet {
        // The current discovery set. Updated only at epoch boundaries via reconfiguration.
        discovery_set: Vector.T<Self.DiscoveryInfo>,
        // Handle where discovery set change events are emitted
        change_events: LibraAccount.EventHandle<Self.DiscoverySetChangeEvent>,
    }

    resource BlockMetadata {
      // Height of the current block
      // TODO: Should we keep the height?
      height: u64,

      // Unix Timestamp for the current block.
      // TODO: Use a better wrapper for timestamp.
      timestamp: u64,

      // Hash of the current block of transactions.
      id: bytearray,

      // Proposer of the current block.
      proposer: address,
    }

    resource TransactionFees {
        fee_withdrawal_capability: LibraAccount.WithdrawalCapability,
    }

    // This can only be invoked by the Association address, and only a single time.
    // Currently, it is invoked in the genesis transaction
    public initialize_validator_set() {
      // Only callable by the validator set address
      assert(get_txn_sender() == 0x1D8, 1);

      move_to_sender<ValidatorSet>(ValidatorSet {
          validators: Vector.empty<Self.ValidatorInfo>(),
          additions: Vector.empty<address>(),
          removals: Vector.empty<address>(),
          change_events: LibraAccount.new_event_handle<Self.ValidatorSetChangeEvent>(),
      });
      return;
    }

    public initialize_discovery_set() {
        // Only callable by the discovery set address
        assert(get_txn_sender() == 0xD15C0, 1);

        move_to_sender<DiscoverySet>(DiscoverySet {
            discovery_set: Vector.empty<Self.DiscoveryInfo>(),
            change_events: LibraAccount.new_event_handle<Self.DiscoverySetChangeEvent>(),
        });
        return;
    }

    // This can only be invoked by the Association address, and only a single time.
    // Currently, it is invoked in the genesis transaction
    public initialize_block_metadata() {
      // Only callable by the Association address
      assert(get_txn_sender() == 0xA550C18, 1);

      // TODO: How should we get the default block metadata? Should it be set in the first block prologue transaction or
      //       in the genesis?
      move_to_sender<BlockMetadata>(BlockMetadata {
        height: 0,
        timestamp: 0,
        id: h"",
        proposer: 0xA550C18,
      });
      return;
    }

    // ValidatorInfo public accessors

    public get_validator_address(v: &Self.ValidatorInfo): &address {
      return &move(v).addr;
    }

    public get_consensus_pubkey(v: &Self.ValidatorInfo): &bytearray {
      return &move(v).consensus_pubkey;
    }

    public get_consensus_voting_power(v: &Self.ValidatorInfo): &u64 {
      return &move(v).consensus_voting_power;
    }

    public get_network_signing_pubkey(v: &Self.ValidatorInfo): &bytearray {
      return &move(v).network_signing_pubkey;
    }

    public get_network_identity_pubkey(v: &Self.ValidatorInfo): &bytearray {
      return &move(v).network_identity_pubkey;
    }

    // DiscoveryInfo public accessors

    public get_discovery_address(d: &Self.DiscoveryInfo): &address {
        return &move(d).addr;
    }

    public get_validator_network_identity_pubkey(d: &Self.DiscoveryInfo): &bytearray {
        return &move(d).validator_network_identity_pubkey;
    }

    public get_validator_network_address(d: &Self.DiscoveryInfo): &bytearray {
        return &move(d).validator_network_address;
    }

    public get_fullnodes_network_identity_pubkey(d: &Self.DiscoveryInfo): &bytearray {
        return &move(d).fullnodes_network_identity_pubkey;
    }

    public get_fullnodes_network_address(d: &Self.DiscoveryInfo): &bytearray {
        return &move(d).fullnodes_network_address;
    }

    // Set the metadata for the current block.
    // The runtime always runs this before executing the transactions in a block.
    // TODO: 1. Make this private, support other metadata
    //       2. Should the previous block votes be provided from BlockMetadata or should it come from the ValidatorSet
    //          Resource?
    public block_prologue(
        timestamp: u64,
        new_block_hash: bytearray,
        previous_block_votes: bytearray,
        proposer: address
    ) acquires BlockMetadata, ValidatorSet, DiscoverySet, TransactionFees {
      Self.process_block_prologue(move(timestamp), move(new_block_hash), move(previous_block_votes), move(proposer));

      // Currently distribute once per-block.
      // TODO: Once we have a better on-chain representation of epochs we will make this per-epoch.
      Self.distribute_transaction_fees();

      // triggers a reconfiguration if the validator keys or validator set has changed
      Self.reconfigure();
      return;
    }

    // Update the BlockMetadata resource with the new blockmetada coming from the consensus.
    process_block_prologue(
        timestamp: u64,
        new_block_hash: bytearray,
        previous_block_votes: bytearray,
        proposer: address
    ) acquires BlockMetadata, ValidatorSet {
        let block_metadata_ref: &mut Self.BlockMetadata;

        block_metadata_ref = borrow_global_mut<BlockMetadata>(0xA550C18);

        // TODO: Figure out a story for errors in the system transactions.
        if (copy(proposer) == 0x0) {
          // NIL block with null address as proposer. Timestamp must be equal.
          assert(copy(timestamp) == *(&copy(block_metadata_ref).timestamp), 5001);
        } else {
          // Normal block. Time must advance
          assert(copy(timestamp) > *(&copy(block_metadata_ref).timestamp), 5001);
          assert(Self.is_validator(copy(proposer)), 5002);
        }

        *(&mut copy(block_metadata_ref).id) = move(new_block_hash);
        *(&mut copy(block_metadata_ref).timestamp) = move(timestamp);
        *(&mut copy(block_metadata_ref).proposer) = move(proposer);
        *(&mut move(block_metadata_ref).height) = *(&copy(block_metadata_ref).height) + 1;
        return;
    }

    // Get the current block height
    public get_current_block_height(): u64 acquires BlockMetadata {
      return *&(borrow_global<BlockMetadata>(0xA550C18)).height;
    }

    // Get the current block id
    public get_current_block_id(): bytearray acquires BlockMetadata {
      return *&(borrow_global<BlockMetadata>(0xA550C18)).id;
    }

    // Get the current time
    public get_current_timestamp(): u64 acquires BlockMetadata {
      return *&(borrow_global<BlockMetadata>(0xA550C18)).timestamp;
    }

    // Gets the address of the proposer of the current block
    public get_current_proposer(): address acquires BlockMetadata {
      return *&(borrow_global<BlockMetadata>(0xA550C18)).proposer;
    }

    // Return the size of the current validator set
    public validator_set_size(): u64 acquires ValidatorSet {
        let validator_set_ref: &Self.ValidatorSet;

        validator_set_ref = borrow_global<ValidatorSet>(0x1D8);
        return Vector.length<Self.ValidatorInfo>(&move(validator_set_ref).validators);
    }

   is_validator_(addr: &address, validators_vec_ref: &Vector.T<Self.ValidatorInfo>): bool {
        let size: u64;
        let i: u64;
        let validator_info_ref: &Self.ValidatorInfo;

        size = Vector.length<Self.ValidatorInfo>(copy(validators_vec_ref));
        if (copy(size) == 0) {
            return false;
        }

        i = 0;
        // this is only needed to make the bytecode verifier happy
        validator_info_ref = Vector.borrow<Self.ValidatorInfo>(copy(validators_vec_ref), copy(i));
        loop {
            if (&copy(validator_info_ref).addr == copy(addr)) {
                return true;
            }
            i = copy(i) + 1;
            if (copy(i) >= copy(size)) {
                break;
            }
            validator_info_ref = Vector.borrow<Self.ValidatorInfo>(copy(validators_vec_ref), copy(i));
        }

        return false;
    }

    // Return true if addr is a current validator
    public is_validator(addr: address): bool acquires ValidatorSet {
        return Self.is_validator_(&addr, &borrow_global<ValidatorSet>(0x1D8).validators);
    }

    // Adds a validator to the addition buffer, which will cause it to be added to the validator
    // set in the next epoch.
    // Fails if `account_address` is already a validator or has already been added to the addition
    // buffer.
    // Only callable by the Association address
    public add_validator(account_address: address) acquires ValidatorSet {
        let validator_set_ref: &mut Self.ValidatorSet;
        let validator_set_additions: &mut Vector.T<address>;

        // Only the Association can add new validators
        assert(get_txn_sender() == 0xA550C18, 1);
        // A prospective validator must have a validator config resource
        assert(ValidatorConfig.has(copy(account_address)), 17);

        validator_set_ref = borrow_global_mut<ValidatorSet>(0x1D8);
        validator_set_additions = &mut copy(validator_set_ref).additions;
        // Ensure that this address is not already a validator
        assert(
            !Self.is_validator_(&account_address, &copy(validator_set_ref).validators),
            18
        );
        // Ensure that this is not already an addition
        assert(
            !Vector.contains<address>(
                freeze(copy(validator_set_additions)),
                &account_address,
            ),
            19
        );

        // Add to candidates
        Vector.push_back<address>(
            move(validator_set_additions),
            copy(account_address),
        );

        return;
    }

    public remove_validator(account_address: address) acquires ValidatorSet {
        let validator_set_ref: &mut Self.ValidatorSet;

        // Only the Association can remove validators
        assert(get_txn_sender() == 0xA550C18, 1);

        validator_set_ref = borrow_global_mut<ValidatorSet>(0x1D8);
        // Ensure that this address is already a validator
        assert(
            Self.is_validator_(&account_address, &copy(validator_set_ref).validators),
            21
        );
        // Ensure that this is not already a removal
        assert(
            !Vector.contains<address>(
                &copy(validator_set_ref).removals,
                &account_address,
            ),
            22
        );

        // Add to removals
        Vector.push_back<address>(
            &mut move(validator_set_ref).removals,
            copy(account_address),
        );

        return;
    }

    // Return true if the ValidatorInfo given as input is different than the one
    // derived from the ValidatorConfig published at validator_info.addr + copies
    // the differing fields. Aborts if there is no ValidatorConfig at
    // validator_info.addr
    public copy_validator_info(validator_info: &mut Self.ValidatorInfo): bool {
        let consensus_pubkey: bytearray;
        let network_signing_pubkey: bytearray;
        let network_identity_pubkey: bytearray;
        let config: ValidatorConfig.Config;
        let changed: bool;

        config = ValidatorConfig.config(*&copy(validator_info).addr);
        consensus_pubkey = ValidatorConfig.consensus_pubkey(&config);
        network_signing_pubkey = ValidatorConfig.validator_network_signing_pubkey(&config);
        network_identity_pubkey = ValidatorConfig.validator_network_identity_pubkey(&config);

        changed = false;
        if (&consensus_pubkey != &copy(validator_info).consensus_pubkey) {
            *&mut copy(validator_info).consensus_pubkey = move(consensus_pubkey);
            changed = true;
        }
        if (&network_signing_pubkey != &copy(validator_info).network_signing_pubkey) {
            *&mut copy(validator_info).network_signing_pubkey = move(network_signing_pubkey);
            changed = true;
        }
        if (&network_identity_pubkey != &copy(validator_info).network_identity_pubkey) {
            *&mut copy(validator_info).network_identity_pubkey = move(network_identity_pubkey);
            changed = true;
        }

        return move(changed);
    }

    // Create a ValidatorInfo from the ValidatorConfig stored at addr.
    // Aborts if addr does not have a ValidatorConfig
    make_validator_info(addr: address): Self.ValidatorInfo {
        let config: ValidatorConfig.Config;
        config = ValidatorConfig.config(copy(addr));

       return ValidatorInfo {
           addr: move(addr),
           consensus_pubkey: ValidatorConfig.consensus_pubkey(&config),
           consensus_voting_power: 1,
           network_signing_pubkey: ValidatorConfig.validator_network_signing_pubkey(&config),
           network_identity_pubkey: ValidatorConfig.validator_network_identity_pubkey(&config),
       };
    }

    // Return true if the DiscoveryInfo given as input is different than the one
    // derived from the ValidatorConfig published at discovery_info.addr + copies
    // the differing fields. Aborts if there is no ValidatorConfig at
    // discovery_info.addr
    public copy_discovery_info(discovery_info: &mut Self.DiscoveryInfo): bool {
        let validator_network_identity_pubkey: bytearray;
        let validator_network_address: bytearray;
        let fullnodes_network_identity_pubkey: bytearray;
        let fullnodes_network_address: bytearray;
        let config: ValidatorConfig.Config;
        let changed: bool;

        config = ValidatorConfig.config(*&copy(discovery_info).addr);
        validator_network_identity_pubkey = ValidatorConfig.validator_network_identity_pubkey(&config);
        validator_network_address = ValidatorConfig.validator_network_address(&config);
        fullnodes_network_identity_pubkey = ValidatorConfig.fullnodes_network_identity_pubkey(&config);
        fullnodes_network_address = ValidatorConfig.fullnodes_network_address(&config);

        changed = false;
        if (&validator_network_identity_pubkey != &copy(discovery_info).validator_network_identity_pubkey) {
            *&mut copy(discovery_info).validator_network_identity_pubkey = move(validator_network_identity_pubkey);
            changed = true;
        }
        if (&validator_network_address != &copy(discovery_info).validator_network_address) {
            *&mut copy(discovery_info).validator_network_address = move(validator_network_address);
            changed = true;
        }
        if (&fullnodes_network_identity_pubkey != &copy(discovery_info).fullnodes_network_identity_pubkey) {
            *&mut copy(discovery_info).fullnodes_network_identity_pubkey = move(fullnodes_network_identity_pubkey);
            changed = true;
        }
        if (&fullnodes_network_address != &copy(discovery_info).fullnodes_network_address) {
            *&mut copy(discovery_info).fullnodes_network_address = move(fullnodes_network_address);
            changed = true;
        }

        return move(changed);
    }

    // Create a DiscoveryInfo from the ValidatorConfig stored at addr.
    // Aborts if addr does not have a ValidatorConfig
    make_discovery_info(addr: address): Self.DiscoveryInfo {
        let config: ValidatorConfig.Config;
        config = ValidatorConfig.config(copy(addr));

       return DiscoveryInfo {
           addr: move(addr),
           validator_network_identity_pubkey:
               ValidatorConfig.validator_network_identity_pubkey(&config),
           validator_network_address:
               ValidatorConfig.validator_network_address(&config),
           fullnodes_network_identity_pubkey:
               ValidatorConfig.fullnodes_network_identity_pubkey(&config),
           fullnodes_network_address:
               ValidatorConfig.fullnodes_network_address(&config),
       };
    }

    // Trigger a reconfiguation the Libra system by:
    // (1) Checking if there have been any additions since the last reconfiguration (and adding
    //     the validator's config if so)
    // (2) Checking if there have been any removals since the last reconfiguration (and removing
    //     the validator if so)
    // (3) Checking if there have been any key rotations since the last reconfiguration (and
    //     updating the key info if so)
    // (4) Emitting an event containing new validator set or discovery set, which will be
    //     passed to the executor
    reconfigure() acquires ValidatorSet, DiscoverySet {
        let validator_set_ref: &mut Self.ValidatorSet;
        let additions_ref: &mut Vector.T<address>;
        let removals_ref: &mut Vector.T<address>;
        let validators_vec_ref: &mut Vector.T<Self.ValidatorInfo>;
        let validator_info_ref: &mut Self.ValidatorInfo;
        let discovery_set_ref: &mut Self.DiscoverySet;
        let discovery_vec_ref: &mut Vector.T<Self.DiscoveryInfo>;
        let discovery_info_ref: &mut Self.DiscoveryInfo;
        let addr: address;
        let to_remove_index: u64;
        let i: u64;
        let len: u64;
        let validator_set_changed: bool;
        let discovery_set_changed: bool;

        // For now, this only supports a simple form of reconfiguration: allowing a fixed set of
        // validators to rotate their keys.
        // TODO: support adding and removing validators. Eventually, we will do this by computing
        // the new validator set from a larger list of candidate validators sorted by stake.
        validator_set_ref = borrow_global_mut<ValidatorSet>(0x1D8);
        additions_ref = &mut copy(validator_set_ref).additions;
        removals_ref = &mut copy(validator_set_ref).removals;
        validators_vec_ref = &mut copy(validator_set_ref).validators;
        discovery_set_ref = borrow_global_mut<DiscoverySet>(0xD15C0);
        discovery_vec_ref = &mut copy(discovery_set_ref).discovery_set;
        validator_set_changed = false;
        discovery_set_changed = false;

        // (1) Check for additions
        i = 0;
        len = Vector.length<address>(freeze(copy(additions_ref)));
        // if additions is nonempty, we have an addition to process
        if (copy(len) > 0) {
            loop {
                // remove validator address from additions and add corresponding ValidatorInfo to
                // the validator set and DiscoveryInfo to discovery set
                addr = Vector.pop_back<address>(copy(additions_ref));
                Vector.push_back<Self.ValidatorInfo>(
                    copy(validators_vec_ref),
                    Self.make_validator_info(copy(addr))
                );
                Vector.push_back<Self.DiscoveryInfo>(
                    copy(discovery_vec_ref),
                    Self.make_discovery_info(move(addr))
                );
                i = move(i) + 1;
                if (copy(i) >= copy(len)) {
                    break;
                }
            }
            // ensures additions.length == 0
            // ensures validators.length == old(validators).length + old(additions).length
            // ensures discovery_set.length == old(discovery_set).length + old(additions).length
            validator_set_changed = true;
            discovery_set_changed = true;
        }

        // (2) Check for removals
        i = 0;
        len = Vector.length<address>(freeze(copy(removals_ref)));
        if (copy(len) > 0) {
            loop {
                // remove validator address from removals
                to_remove_index = Self.get_validator_index(
                    freeze(copy(validators_vec_ref)),
                    Vector.pop_back<address>(copy(removals_ref))
                );
                // remove corresponding ValidatorInfo from the validator set
                _  = Vector.remove_unstable<Self.ValidatorInfo>(
                    copy(validators_vec_ref),
                    copy(to_remove_index)
                );
                // remove corresponding DiscoveryInfo from the discovery set
                _ = Vector.remove_unstable<Self.DiscoveryInfo>(
                    copy(discovery_vec_ref),
                    move(to_remove_index),
                );
                i = move(i) + 1;
                if (copy(i) >= copy(len)) {
                    break;
                }
            }
            // ensures removals.length == 0
            // ensures validators.length == old(validators).length - old(removals).length
            // ensures discovery_set.length == old(discovery_set).length - old(removals).length
            validator_set_changed = true;
            discovery_set_changed = true;
        }

        // (3) Check for key rotations in the validator set
        i = 0;
        len = Vector.length<Self.ValidatorInfo>(freeze(copy(validators_vec_ref)));
        // assume(len > 0), since an empty validator set is nonsensical
        validator_info_ref = Vector.borrow_mut<Self.ValidatorInfo>(copy(validators_vec_ref), copy(i));
        // check if each validator has rotated their keys, copy their new info and note the change
        // if so.
        loop {
            if (Self.copy_validator_info(move(validator_info_ref))) {
                validator_set_changed = true;
            }

            i = move(i) + 1;
            if (copy(i) >= copy(len)) {
                break;
            }
            validator_info_ref = Vector.borrow_mut<Self.ValidatorInfo>(copy(validators_vec_ref), copy(i));
        }

        // (4) Check for changes in the discovery set
        i = 0;
        len = Vector.length<Self.DiscoveryInfo>(freeze(copy(discovery_vec_ref)));
        // assume(len > 0), since an empty validator set is nonsensical
        discovery_info_ref = Vector.borrow_mut<Self.DiscoveryInfo>(copy(discovery_vec_ref), copy(i));
        // check if each validator has changed their discovery info, copy their new info, and
        // note the change if so.
        loop {
            if (Self.copy_discovery_info(move(discovery_info_ref))) {
                discovery_set_changed = true;
            }

            i = move(i) + 1;
            if (copy(i) >= copy(len)) {
                break;
            }
            discovery_info_ref = Vector.borrow_mut<Self.DiscoveryInfo>(copy(discovery_vec_ref), copy(i));
        }

        // (5) Emit validator set changed event if appropriate
        if (move(validator_set_changed)) {
            LibraAccount.emit_event<Self.ValidatorSetChangeEvent>(
                &mut copy(validator_set_ref).change_events,
                ValidatorSetChangeEvent {
                    new_validator_set: *copy(validators_vec_ref),
                },
            );
        }

        // (6) Emit discovery set changed event if appropriate
        if (move(discovery_set_changed)) {
            LibraAccount.emit_event<Self.DiscoverySetChangeEvent>(
                &mut copy(discovery_set_ref).change_events,
                DiscoverySetChangeEvent {
                    new_discovery_set: *copy(discovery_vec_ref),
                },
            );
        }

        return;
    }

    // Get the ValidatorInfo for the ith validator
    public get_ith_validator_info(i: u64): Self.ValidatorInfo acquires ValidatorSet {
      let validators_vec_ref: &Vector.T<Self.ValidatorInfo>;

      validators_vec_ref = &borrow_global<ValidatorSet>(0x1D8).validators;
      assert(copy(i) < Vector.length<Self.ValidatorInfo>(copy(validators_vec_ref)), 3);
      return *Vector.borrow<Self.ValidatorInfo>(move(validators_vec_ref), move(i));
    }

    // Get the address of the i'th validator.
    public get_ith_validator_address(i: u64): address acquires ValidatorSet {
      let len: u64;
      let validator_set: &Self.ValidatorSet;
      let addr: address;
      let peer: &Self.ValidatorInfo;

      validator_set = borrow_global<ValidatorSet>(0x1D8);
      len = Vector.length<Self.ValidatorInfo>(&copy(validator_set).validators);
      assert(copy(i) < move(len), 3);
      peer = Vector.borrow<Self.ValidatorInfo>(&move(validator_set).validators, move(i));
      addr = *(&move(peer).addr);

      return move(addr);
    }

    // Get the DiscoveryInfo for the ith validator
    public get_ith_discovery_info(i: u64): Self.DiscoveryInfo acquires DiscoverySet {
        let discovery_vec_ref: &Vector.T<Self.DiscoveryInfo>;

        discovery_vec_ref = &borrow_global<DiscoverySet>(0xD15C0).discovery_set;
        assert(copy(i) < Vector.length<Self.DiscoveryInfo>(copy(discovery_vec_ref)), 4);
        return *Vector.borrow<Self.DiscoveryInfo>(move(discovery_vec_ref), move(i));
    }

    ///////////////////////////////////////////////////////////////////////////
    // Transaction Fee Distribution
    ///////////////////////////////////////////////////////////////////////////
    // Implements a basic transaction fee distribution logic.
    //
    // We have made a couple design decisions here that are worth noting:
    //  * We pay out once per-block for now.
    //    TODO: Once we have a better on-chain representation of
    //          epochs this should be changed over to be once per-epoch.
    //  * Sometimes the number of validators does not evenly divide the transaction fees to be
    //    distributed. In such cases the remainder ("dust") is left in the transaction fees pot and
    //    these remaining fees will be included in the calculations for the transaction fee
    //    distribution in the next epoch. This distribution strategy is meant to in part minimize the
    //    benefit of being the first validator in the validator set.

     // Initialize the transaction fee distribution module. We keep track of the last paid block
     // height in order to ensure that we don't try to pay more than once per-block. We also
     // encapsulate the withdrawal capability to the transaction fee account so that we can withdraw
     // the fees from this account from block metadata transactions.
     initialize_transaction_fees() {
         assert(get_txn_sender() == 0xFEE, 0);
         move_to_sender<TransactionFees>(TransactionFees {
             fee_withdrawal_capability: LibraAccount.extract_sender_withdrawal_capability(),
         });
         return;
     }

     distribute_transaction_fees() acquires TransactionFees, ValidatorSet {
       let num_validators: u64;
       let amount_to_distribute_per_validator: u64;
       let amount_collected: u64;

       num_validators = Self.validator_set_size();
       amount_collected = LibraAccount.balance(0xFEE);

       // If amount_collected == 0, this will also return early
       if (copy(amount_collected) < copy(num_validators)) {
           return;
       }

       // Calculate the amount of money to be dispursed, along with the remainder.
       amount_to_distribute_per_validator = Self.per_validator_distribution_amount(
           copy(amount_collected),
           copy(num_validators)
       );

       // Iterate through the validators distributing fees equally
       Self.distribute_transaction_fees_internal(
           move(amount_to_distribute_per_validator),
           move(num_validators),
       );

       return;
     }

     // After the book keeping has been performed, this then distributes the
     // transaction fees equally to all validators with the exception that
     // any remainder (in the case that the number of validators does not
     // evenly divide the transaction fee pot) is distributed to the first
     // validator.
     distribute_transaction_fees_internal(
         amount_to_distribute_per_validator: u64,
         num_validators: u64
     ) acquires ValidatorSet, TransactionFees {
         let index: u64;
         let addr: address;
         let distribution_resource: &Self.TransactionFees;

         distribution_resource = borrow_global<TransactionFees>(0xFEE);
         index = 0;

         while (copy(index) < copy(num_validators)) {

             addr = Self.get_ith_validator_address(copy(index));
             // Increment the index into the validator set.
             index = copy(index) + 1;

             LibraAccount.pay_from_capability(
                 move(addr),
                 &copy(distribution_resource).fee_withdrawal_capability,
                 copy(amount_to_distribute_per_validator),
                 h"0FEE",
             );
         }

         return;
     }

     // This calculates the amount to be distributed to each validator equally. We do this by calculating
     // the integer division of the transaction fees collected by the number of validators. In
     // particular, this means that if the number of validators does not evenly divide the
     // transaction fees collected, then there will be a remainder that is left in the transaction
     // fees pot to be distributed later.
     per_validator_distribution_amount(amount_collected: u64, num_validators: u64): u64 {
         let validator_payout: u64;
         assert(copy(num_validators) != 0, 0);
         validator_payout = copy(amount_collected) / copy(num_validators);
         assert(copy(validator_payout) * move(num_validators) <= move(amount_collected), 1);
         return move(validator_payout);
     }

    // Get the index of the validator with address `addr` in `validators`.
    // Aborts if `addr` is not the address of any validator
    public get_validator_index(validators: &Vector.T<Self.ValidatorInfo>, addr: address): u64 {
        let i: u64;
        let len: u64;

        len = Vector.length<Self.ValidatorInfo>(copy(validators));
        i = 0;
        loop {
            if (Self.get_validator_address(Vector.borrow<Self.ValidatorInfo>(copy(validators), copy(i)))
                ==
                &addr
            ) {
                return move(i);
            }

            i = move(i) + 1;
            if (copy(i) >= copy(len)) {
                break;
            }

        }
        abort(99);
    }
}
