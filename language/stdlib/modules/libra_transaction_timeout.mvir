module LibraTransactionTimeout {
    import 0x0.LibraTimestamp;

    resource TTL {
        // Only transactions with timestamp in between block time and block time + duration would be accepted.
        duration_microseconds: u64,
    }

    public initialize() {
        let timeout: Self.TTL;

        // Only callable by the Association address
        assert(get_txn_sender() == 0xA550C18, 1);

        // Currently set to 1day.
        timeout = TTL {duration_microseconds: 86400000000};
        move_to_sender<TTL>(move(timeout));
        return;
    }

    public set_timeout(new_duration: u64) acquires TTL {
        let timeout: &mut Self.TTL;

        // Only callable by the Association address
        assert(get_txn_sender() == 0xA550C18, 1);

        timeout = borrow_global_mut<TTL>(0xA550C18);
        *(&mut move(timeout).duration_microseconds) = move(new_duration);
        return;
    }

    public is_valid_transaction_timestamp(timestamp: u64): bool acquires TTL {
        let current_block_time: u64;
        let max_txn_time: u64;
        let timeout: u64;
        let txn_time_microseconds: u64;

        // Reject timestamp greater than u64::MAX / 1_000_000;
        if(copy(timestamp) > 9223372036854) {
            return false;
        }

        current_block_time = LibraTimestamp.now_microseconds();
        timeout = *&borrow_global<TTL>(0xA550C18).duration_microseconds;
        max_txn_time = copy(current_block_time) + move(timeout);

        txn_time_microseconds = move(timestamp) * 1000000;
        // TODO: Add LibraTimestamp.is_before_exclusive(&txn_time_microseconds, &max_txn_time)
        //       This is causing flaky test right now. The reason is that we will use this logic for AC, where its wall
        //       clock time might be out of sync with the real block time stored in StateStore.
        //       See details in issue #2346.
        return copy(current_block_time) < move(txn_time_microseconds);
    }
}
