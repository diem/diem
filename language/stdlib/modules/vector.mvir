// A variable-sized container that can hold both unrestricted types and resources.

module Vector {

  // Vector containing data of type Item.
  native struct T<Element>;

  native public empty<Element>(): Self.T<Element>;

  // Return the length of the vector.
  native public length<Element>(v: &Self.T<Element>): u64;

  // Acquire an immutable reference to the ith element of the vector.
  native public borrow<Element>(v: &Self.T<Element>, i: u64): &Element;

  // Add an element to the end of the vector.
  native public push_back<Element>(v: &mut Self.T<Element>, e: Element);

  // Get mutable reference to the ith element in the vector, abort if out of bound.
  native public borrow_mut<Element>(v: &mut Self.T<Element>, idx: u64): &mut Element;

  // Pop an element from the end of vector, abort if the vector is empty.
  native public pop_back<Element>(v: &mut Self.T<Element>): Element;

  // Destroy the vector, abort if not empty.
  native public destroy_empty<Element>(v: Self.T<Element>);

  // Return true if the vector has no elements.
  public is_empty<Element>(v: &Self.T<Element>): bool {
    return Self.length<Element>(move(v)) == 0;
  }
}
