//! account: alice, 10000000
//! account: bob, 10000000
//! channel: ch1, alice|bob

//! new-transaction
module Token {
    import 0x0.ChannelUtil;
    import 0x0.ChannelTransaction;
    resource T {
        value: u64
    }

    public new(value:u64): Self.T {
        return T{ value: move(value) };
    }

    public value(token_ref: &Self.T):u64 {
        return *&move(token_ref).value;
    }

    public destroy(token: Self.T){
        let value:u64;
        T{value} = move(token);
        return;
    }

    public move_to_channel_sender(value:u64) {
        let t: Self.T;
        let sender: address;

        t = Self.new(move(value));
        sender = get_txn_sender();
        ChannelUtil.move_to_participant<Self.T>(move(sender), move(t));
        return;
    }

    public move_to_channel_receiver(receiver:address, value:u64) {
        let t: Self.T;

        t = Self.new(move(value));
        ChannelUtil.move_to_participant<Self.T>(move(receiver), move(t));
        return;
    }

    public move_to_channel_shared(value:u64) {
        let t: Self.T;

        t = Self.new(move(value));
        ChannelUtil.move_to_shared<Self.T>(move(t));
        return;
    }

    public exist_channel_sender(): bool {
        let sender: address;
        sender = get_txn_sender();
        return ChannelUtil.exist_channel_participant<Self.T>(move(sender));
    }

    public exist_channel_receiver(receiver:address): bool {
        return ChannelUtil.exist_channel_participant<Self.T>(move(receiver));
    }

    public exist_channel_shared(): bool {
        return ChannelUtil.exist_channel_shared<Self.T>();
    }

    public move_from_channel_sender(): Self.T {
        let t: Self.T;
        let sender: address;
        sender = get_txn_sender();
        t = ChannelUtil.move_from_participant<Self.T>(move(sender));
        return move(t);
    }

    public move_from_channel_receiver(receiver:address): Self.T {
        let t: Self.T;
        t = ChannelUtil.move_from_participant<Self.T>(move(receiver));
        return move(t);
    }

    public sender_channel_value():u64{
        let ref: &mut Self.T;
        let sender: address;
        sender = get_txn_sender();
        ref = ChannelUtil.borrow_from_participant_mut<Self.T>(move(sender));
        return *&move(ref).value;
    }

    public receiver_channel_value(receiver:address):u64{
        let ref: &mut Self.T;
        ref = ChannelUtil.borrow_from_participant_mut<Self.T>(move(receiver));
        return *&move(ref).value;
    }

    challenge_succeed(lock_owner: address) {
        let bob_token: Self.T;
        let bob_value: u64;

        bob_token = Self.move_from_channel_receiver(copy(lock_owner));
        bob_value = Self.value(&bob_token);

        Self.destroy(move(bob_token));
        return;
    }

}

//! new-transaction
//! sender: alice
import 0x0.LibraAccount;
main(){
    LibraAccount.enable_channel();
    return;
}

//! new-transaction
//! sender: bob
import 0x0.LibraAccount;
main(){
    LibraAccount.enable_channel();
    return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}},50000,50000

0x0.LibraAccount.open_channel

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
import 0x0.ChannelTransaction;
main() {
   assert(ChannelTransaction.is_channel_txn(), 111);
   return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}}
import 0x0.ChannelTransaction;
import {{default}}.Token;
main(receiver:address) {

     assert(ChannelTransaction.is_channel_txn() == true, 11);
     assert(Token.exist_channel_sender() == false, 11);
     assert(Token.exist_channel_receiver(copy(receiver)) == false, 11);

     Token.move_to_channel_sender(1);

     assert(Token.exist_channel_sender() == true, 11);
     assert(Token.exist_channel_receiver(move(receiver)) == false, 11);

     return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}}
import 0x0.ChannelTransaction;
import {{default}}.Token;
main(receiver:address) {
    assert(Token.exist_channel_sender() == true, 7);
    assert(Token.exist_channel_receiver(copy(receiver)) == false, 6);

    Token.move_to_channel_receiver(copy(receiver), 1);

    assert(Token.exist_channel_sender() == true, 9);
    assert(Token.exist_channel_receiver(move(receiver)) == true, 8);

    return;
}
//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}}
import 0x0.ChannelTransaction;
import {{default}}.Token;
main(receiver:address) {
    let alice_value: u64;
    let bob_value: u64;

    assert(ChannelTransaction.is_channel_txn() == true, 42);

    assert(Token.exist_channel_sender() == true, 9);
    assert(Token.exist_channel_receiver(copy(receiver)) == true, 8);

    alice_value = Token.sender_channel_value();
    bob_value = Token.receiver_channel_value(move(receiver));

    assert(move(alice_value) == 1, 42);
    assert(move(bob_value) == 1, 42);

    return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}}
import 0x0.ChannelTransaction;
import {{default}}.Token;
main(receiver:address) {
    let alice_token: Token.T;
    let alice_value: u64;
    let bob_token: Token.T;
    let bob_value: u64;

    assert(ChannelTransaction.is_channel_txn() == true, 42);

    alice_token = Token.move_from_channel_sender();
    alice_value = Token.value(&alice_token);

    assert(move(alice_value) == 1, 42);
    Token.destroy(move(alice_token));

    assert(Token.exist_channel_sender() == false, 42);
    assert(Token.exist_channel_receiver(copy(receiver)) == true, 42);

    bob_token = Token.move_from_channel_receiver(copy(receiver));
    bob_value = Token.value(&bob_token);

    assert(move(bob_value) == 1, 42);
    Token.destroy(move(bob_token));

    assert(Token.exist_channel_sender() == false, 42);
    assert(Token.exist_channel_receiver(move(receiver)) == false, 42);

    return;

}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}}
import 0x0.ChannelTransaction;
import {{default}}.Token;
main(receiver:address) {
     assert(Token.exist_channel_shared() == false, 11);
     Token.move_to_channel_shared(1);
     assert(Token.exist_channel_shared() == true, 11);
     return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}}
import 0x0.LibraAccount;
import {{default}}.Token;
main(lock_owner: address) {
    Token.move_to_channel_receiver(copy(lock_owner), 1);
    assert(Token.exist_channel_sender() == false, 11);
    assert(Token.exist_channel_receiver(copy(lock_owner)) == true, 11);
    assert(LibraAccount.channel_balance({{alice}}) == 50000, 1016);
    assert(LibraAccount.channel_balance({{bob}}) == 50000, 1016);

    LibraAccount.test(copy(lock_owner));

    assert(Token.exist_channel_sender() == false, 11);
    assert(Token.exist_channel_receiver(copy(lock_owner)) == false, 11);
    assert(LibraAccount.channel_balance({{alice}}) == 0, 1016);
    assert(LibraAccount.channel_balance({{bob}}) == 0, 1016);
    return;
}
