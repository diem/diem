//! account: vivian, 1000000, 0, validator
//! account: alice, 10000000
//! account: bob, 10000000
//! channel: ch1, alice|bob

//! new-transaction
module TheFive {
    import 0x0.ChannelUtil;
    import 0x0.Vector;
    import 0x0.LibraSystem;

    resource T {
        grid: Vector.T<Vector.T<bool>>,  // 22x22, include borders
    }

    resource Shared {
        whose_turn: address,  // Alternate between black and white
        height: u64,
        status: u64,  // 0 newed, 1 joined, 2 closed
    }

    resource Score {
        total: u64,
    }

    status(): u64 {
        let s_ref: &Self.Shared;
        let status_ref: &u64;

        s_ref = ChannelUtil.borrow_from_shared<Self.Shared>();
        status_ref = &copy(s_ref).status;
        return *copy(status_ref);
    }

    public new(receiver: address): u64 {
        let t: Self.T;
        let grid: Vector.T<Vector.T<bool>>;
        let s: Self.Shared;
        let whose_turn: address;
        let row: Vector.T<bool>;
        let x: u64;
        let y: u64;
        let is_black: bool;
        let t1: Self.Score;
        let sender: address;
        let status: u64;

        sender = get_txn_sender();
        if (!ChannelUtil.exist_channel_participant<Self.Score>(copy(sender))) {
            t1 = Score {
                total: 0,
            };
            ChannelUtil.move_to_participant<Self.Score>(copy(sender),move(t1));
        }

        if (ChannelUtil.exist_channel_shared<Self.Shared>()) {
            status = Self.status();
            if (copy(status) == 2) { //closed
                Self.clean_grid();
                Self.clean_shared();
                is_black = true;
            } else {
                is_black = false;
            }
        } else {
            is_black = true;
        }

        if (move(is_black)) {
            grid = Vector.empty<Vector.T<bool>>();
            y = 0;
            while (copy(y) < 22) {
                row = Vector.empty<bool>();
                x = 0;
                while (copy(x) < 22) {
                    Vector.push_back<bool>(&mut row, false);
                    x = copy(x) + 1;
                }

                Vector.push_back<Vector.T<bool>>(&mut grid, move(row));
                y = copy(y) + 1;
            }

            t = T {
                grid: move(grid),
            };
            ChannelUtil.move_to_participant<Self.T>(copy(sender), move(t));

            s = Shared {
                whose_turn: copy(sender),
                height: LibraSystem.get_current_block_height(),
                status: 0,
            };
            ChannelUtil.move_to_shared<Self.Shared>(move(s));

            return 0;
        } else {
            return 1;
        }
    }

    public join(): u64 {
        let t: Self.T;
        let grid: Vector.T<Vector.T<bool>>;
        let row: Vector.T<bool>;
        let x: u64;
        let y: u64;
        let t1: Self.Score;
        let sender: address;
        let status: u64;
        let s_ref: &mut Self.Shared;
        let status_ref: &mut u64;
        let is_black: bool;

        sender = get_txn_sender();
        if (!ChannelUtil.exist_channel_participant<Self.Score>(copy(sender))) {
            t1 = Score {
                total: 0,
            };
            ChannelUtil.move_to_participant<Self.Score>(copy(sender), move(t1));
        }

        if (ChannelUtil.exist_channel_shared<Self.Shared>()) {
            status = Self.status();
            if (copy(status) == 0) { //newed
                Self.clean_grid();
                is_black = false;
            } else {
                is_black = true;
            }
        } else {
            is_black = true;
        }

        if (!move(is_black)) {
            grid = Vector.empty<Vector.T<bool>>();
            y = 0;
            while (copy(y) < 22) {
                row = Vector.empty<bool>();
                x = 0;
                while (copy(x) < 22) {
                    Vector.push_back<bool>(&mut row, false);
                    x = copy(x) + 1;
                }

                Vector.push_back<Vector.T<bool>>(&mut grid, move(row));
                y = copy(y) + 1;
            }

            t = T {
                grid: move(grid),
            };
            ChannelUtil.move_to_participant<Self.T>(copy(sender), move(t));

            s_ref = ChannelUtil.borrow_from_shared_mut<Self.Shared>();
            status_ref = &mut copy(s_ref).status;
            *copy(status_ref) = 1; //joined

            return 0;
        } else {
            return 1;
        }
    }

    is_blank_internal(t_ref: &Self.T, x: u64, y: u64): bool {
        let grid_ref: &Vector.T<Vector.T<bool>>;
        let row_ref: &Vector.T<bool>;
        let value_ref: &bool;

        grid_ref = &copy(t_ref).grid;
        row_ref = Vector.borrow<Vector.T<bool>>(move(grid_ref), move(y));
        value_ref = Vector.borrow<bool>(move(row_ref), move(x));

        return !*copy(value_ref);
    }

    is_blank(x: u64, y: u64, receiver: address): bool {
        let t_ref_sender: &Self.T;
        let t_ref_receiver: &Self.T;
        let is_blank_1: bool;
        let is_blank_2: bool;
        let sender: address;

        sender = get_txn_sender();
        if ((copy(x) < 1) || (copy(x) > 20) || (copy(y) < 1) || (copy(y) > 20)) {
            return false;
        }

        t_ref_sender = ChannelUtil.borrow_from_participant<Self.T>(copy(sender));
        is_blank_1 = Self.is_blank_internal(move(t_ref_sender), copy(x), copy(y));

        t_ref_receiver = ChannelUtil.borrow_from_participant<Self.T>(copy(receiver));
        is_blank_2 = Self.is_blank_internal(move(t_ref_receiver), copy(x), copy(y));

        return move(is_blank_1) && move(is_blank_2);
    }

    let_receiver_play(receiver: address) {
        let s_ref: &mut Self.Shared;
        let whose_turn: &mut address;

        s_ref = ChannelUtil.borrow_from_shared_mut<Self.Shared>();
        whose_turn = &mut copy(s_ref).whose_turn;
        *copy(whose_turn) = move(receiver);

        return;
    }


    set_value(x: u64, y: u64, receiver: address) {
        let t_ref: &mut Self.T;
        let grid_ref: &mut Vector.T<Vector.T<bool>>;
        let row_ref: &mut Vector.T<bool>;
        let value_ref: &mut bool;
        let is_my_turn_ref: &mut bool;
        let sender: address;

        sender = get_txn_sender();
        t_ref = ChannelUtil.borrow_from_participant_mut<Self.T>(copy(sender));
        grid_ref = &mut copy(t_ref).grid;
        row_ref = Vector.borrow_mut<Vector.T<bool>>(move(grid_ref), move(y));
        value_ref = Vector.borrow_mut<bool>(move(row_ref), move(x));
        *copy(value_ref) = true;

        Self.let_receiver_play(copy(receiver));

        return;
    }

    public is_my_turn(): bool {
        let s_ref: &Self.Shared;
        let whose_turn: &address;
        let sender: address;

        sender = get_txn_sender();
        s_ref = ChannelUtil.borrow_from_shared<Self.Shared>();
        whose_turn = &copy(s_ref).whose_turn;

        if (*copy(whose_turn) == copy(sender)) {
            return true;
        } else {
            return false;
        }

    }

    //  directions:
    //  0: horizontal right
    //  1: vertical down
    //  2: diagonal(\) down-right
    //  3: diagonal(/) up-right
    next_x(x: u64, direction: u64, opposite: bool): u64 {
        let i: u64;

        i = copy(x);

        if (!move(opposite)) {
            if (copy(direction) == 0) {
                i = copy(x) + 1;
            }
            if (copy(direction) == 1) {
                i = copy(x);
            }
            if (copy(direction) == 2) {
                i = copy(x) + 1;
            }
            if (copy(direction) == 3) {
                i = copy(x) + 1;
            }
        } else {
            if (copy(direction) == 0) {
                i = copy(x) - 1;
            }
            if (copy(direction) == 1) {
                i = copy(x);
            }
            if (copy(direction) == 2) {
                i = copy(x) - 1;
            }
            if (copy(direction) == 3) {
                i = copy(x) - 1;
            }
        }
        return move(i);
    }

    next_y(y: u64, direction: u64, opposite: bool): u64 {
        let i: u64;

        i = copy(y);

        if (!move(opposite)) {
            if (copy(direction) == 0) {
                i = copy(y);
            }
            if (copy(direction) == 1) {
                i = copy(y) + 1;
            }
            if (copy(direction) == 2) {
                i = copy(y) + 1;
            }
            if (copy(direction) == 3) {
                i = copy(y) - 1;
            }
        } else {
            if (copy(direction) == 0) {
                i = copy(y);
            }
            if (copy(direction) == 1) {
                i = copy(y) - 1;
            }
            if (copy(direction) == 2) {
                i = copy(y) - 1;
            }
            if (copy(direction) == 3) {
                i = copy(y) + 1;
            }
        }
        return move(i);
    }

    logic(t_ref: &mut Self.T, x: u64, y: u64, direction: u64): bool {
        let grid_ref: &Vector.T<Vector.T<bool>>;
        let row_ref: &Vector.T<bool>;
        let value_ref: &bool;
        let i: u64;
        let j: u64;
        let num: u64;

        grid_ref = &copy(t_ref).grid;
        num = 1;

        i = Self.next_x(copy(x), copy(direction), false);
        j = Self.next_y(copy(y), copy(direction), false);
        row_ref = Vector.borrow<Vector.T<bool>>(copy(grid_ref), copy(j));
        value_ref = Vector.borrow<bool>(copy(row_ref), copy(i));
        while (*copy(value_ref)) {
            num = copy(num) + 1;
            i = Self.next_x(copy(i), copy(direction), false);
            j = Self.next_y(copy(j), copy(direction), false);
            row_ref = Vector.borrow<Vector.T<bool>>(copy(grid_ref), copy(j));
            value_ref = Vector.borrow<bool>(copy(row_ref), copy(i));
        }

        i = Self.next_x(copy(x), copy(direction), true);
        j = Self.next_y(copy(y), copy(direction), true);
        row_ref = Vector.borrow<Vector.T<bool>>(copy(grid_ref), copy(j));
        value_ref = Vector.borrow<bool>(copy(row_ref), copy(i));
        while (*copy(value_ref)) {
            num = copy(num) + 1;
            i = Self.next_x(copy(i), copy(direction), true);
            j = Self.next_y(copy(j), copy(direction), true);
            row_ref = Vector.borrow<Vector.T<bool>>(copy(grid_ref), copy(j));
            value_ref = Vector.borrow<bool>(copy(row_ref), copy(i));
        }

        if (copy(num) >= 5) {
            return true;
        } else {
            return false;
        }
    }

    is_five(x: u64, y: u64): bool {
        let t_ref: &mut Self.T;
        let result: bool;
        let direction: u64;
        let sender: address;

        sender = get_txn_sender();
        t_ref = ChannelUtil.borrow_from_participant_mut<Self.T>(copy(sender));
        direction = 0;
        while (copy(direction) < 4) {
            result = Self.logic(copy(t_ref), copy(x), copy(y), copy(direction));
            if (copy(result)) {
                return true;
            }
            direction = copy(direction) + 1;
        }

        return false;
    }

    unwrap_T(t: Self.T) {
        let grid: Vector.T<Vector.T<bool>>;

        T { grid } = move(t);
        return;
    }

    unwrap_Shared(s: Self.Shared) {
        let whose_turn: address;
        let height: u64;
        let status: u64;

        Shared { whose_turn, height, status } = move(s);
        return;
    }

    clean_grid() {
        let t: Self.T;
        let sender: address;

        sender = get_txn_sender();
        if (ChannelUtil.exist_channel_participant<Self.T>(copy(sender))) {
            t = ChannelUtil.move_from_participant<Self.T>(copy(sender));
            Self.unwrap_T(move(t));
        }
        return;
    }

    clean_shared() {
        let s: Self.Shared;

        if (ChannelUtil.exist_channel_shared<Self.Shared>()) {
            s = ChannelUtil.move_from_shared<Self.Shared>();
            Self.unwrap_Shared(move(s));
        }
        return;
    }

    end_game() {
        let s_ref: &mut Self.Shared;
        let status: &mut u64;

        s_ref = ChannelUtil.borrow_from_shared_mut<Self.Shared>();
        status = &mut copy(s_ref).status;
        *copy(status) = 2;

        Self.update_score();
        return;
    }


    update_score() {
        let score_ref: &mut Self.Score;
        let total_ref: &mut u64;
        let sender: address;

        sender = get_txn_sender();
        score_ref = ChannelUtil.borrow_from_participant_mut<Self.Score>(copy(sender));
        total_ref = &mut copy(score_ref).total;
        *copy(total_ref) = *copy(total_ref) + 1;
        return;
    }

    public play(receiver: address, x: u64, y: u64): u64 {
        let win: bool;

        if (!Self.is_my_turn()) {
            return 1;
        }

        if (!Self.is_blank(copy(x), copy(y), copy(receiver))) {
            return 2;
        }

        Self.set_value(copy(x), copy(y), copy(receiver));
        win = Self.is_five(move(x), move(y));

        if (move(win)) {
            //Self.end_game(copy(receiver));
            Self.end_game();
        }
        return 0;
    }

    public get_score(): u64 {
        let score_ref: &mut Self.Score;
        let total_ref: &mut u64;
        let sender: address;

        sender = get_txn_sender();
        score_ref = ChannelUtil.borrow_from_participant_mut<Self.Score>(copy(sender));
        total_ref = &mut copy(score_ref).total;
        return *copy(total_ref);
    }

    public clean_score() {
        let score: Self.Score;
        let total: u64;
        let sender: address;

        sender = get_txn_sender();
        score = ChannelUtil.move_from_participant<Self.Score>(copy(sender));
        Score { total } = move(score);
        return;
    }

    public timeout(receiver: address) {
        let s_ref: &Self.Shared;
        let sender: address;
        let height_ref: &u64;
        let current_height: u64;

        assert(!Self.is_my_turn(), 101);
        sender = get_txn_sender();
        s_ref = ChannelUtil.borrow_from_shared<Self.Shared>();
        height_ref = &copy(s_ref).height;
        current_height = LibraSystem.get_current_block_height();
        assert(move(current_height) > *copy(height_ref), 102);

        //Self.end_game(copy(receiver));
        Self.end_game();
        return;
    }
}

//! new-transaction
//! sender: alice
import 0x0.LibraAccount;
main(){
    LibraAccount.enable_channel();
    return;
}

//! new-transaction
//! sender: bob
import 0x0.LibraAccount;
main(){
    LibraAccount.enable_channel();
    return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}},10,10

0x0.LibraAccount.open_channel


//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}}
import {{default}}.TheFive;

main(receiver: address){
    let result: u64;
    result = TheFive.new(move(receiver));
    assert(move(result) == 0, 61);
    return;
}

//! new-transaction
//! sender: bob
//! txn-channel: ch1,bob
import {{default}}.TheFive;

main(){
    let result: u64;
    result = TheFive.join();
    assert(move(result) == 0, 61);
    return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}},2,2
import {{default}}.TheFive;

main(receiver: address, x: u64, y: u64) {
    let result: u64;

    result = TheFive.play(move(receiver), move(x), move(y));
    assert(move(result) == 0, 66);
    return;
}


//! new-transaction
//! sender: bob
//! txn-channel: ch1,bob
//! args: {{alice}},3,2
import {{default}}.TheFive;

main(receiver: address, x: u64, y: u64) {
    let result: u64;

    result = TheFive.play(move(receiver), move(x), move(y));
    assert(move(result) == 0, 66);
    return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}},2,3
import {{default}}.TheFive;

main(receiver: address, x: u64, y: u64) {
    let result: u64;

    result = TheFive.play(move(receiver), move(x), move(y));
    assert(move(result) == 0, 66);
    return;
}

//! new-transaction
//! sender: bob
//! txn-channel: ch1,bob
//! args: {{alice}},3,3
import {{default}}.TheFive;

main(receiver: address, x: u64, y: u64) {
    let result: u64;

    result = TheFive.play(move(receiver), move(x), move(y));
    assert(move(result) == 0, 66);
    return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}},2,4
import {{default}}.TheFive;

main(receiver: address, x: u64, y: u64) {
    let result: u64;

    result = TheFive.play(move(receiver), move(x), move(y));
    assert(move(result) == 0, 66);
    return;
}

//! new-transaction
//! sender: bob
//! txn-channel: ch1,alice
//! args: {{alice}},3,4
import {{default}}.TheFive;

main(receiver: address, x: u64, y: u64) {
    let result: u64;

    result = TheFive.play(move(receiver), move(x), move(y));
    assert(move(result) == 0, 66);
    return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}},2,5
import {{default}}.TheFive;

main(receiver: address, x: u64, y: u64) {
    let result: u64;

    result = TheFive.play(move(receiver), move(x), move(y));
    assert(move(result) == 0, 66);
    return;
}

//! new-transaction
//! sender: bob
//! txn-channel: ch1,alice
//! args: {{alice}},3,5
import {{default}}.TheFive;

main(receiver: address, x: u64, y: u64) {
    let result: u64;

    result = TheFive.play(move(receiver), move(x), move(y));
    assert(move(result) == 0, 66);
    return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}},2,6
import {{default}}.TheFive;

main(receiver: address, x: u64, y: u64) {
    let result: u64;
    let win: bool;

    result = TheFive.play(move(receiver), copy(x), copy(y));
    assert(move(result) == 0, 55);

    return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
import {{default}}.TheFive;

main() {
    let result: u64;

    result = TheFive.get_score();
    assert(move(result) == 1, 55);

    return;
}

//! new-transaction
//! sender: bob
//! txn-channel: ch1,bob
import {{default}}.TheFive;

main() {
    let result: u64;

    result = TheFive.get_score();
    assert(move(result) == 0, 55);

    return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}}
import {{default}}.TheFive;

main(receiver: address){
    let result: u64;
    result = TheFive.new(move(receiver));
    assert(move(result) == 0, 61);
    return;
}

//! new-transaction
//! sender: bob
//! txn-channel: ch1,bob

import {{default}}.TheFive;

main(){
    let result: u64;
    result = TheFive.join();
    assert(move(result) == 0, 61);
    return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}},2,2

import {{default}}.TheFive;

main(receiver: address, x: u64, y: u64) {
    let result: u64;

    result = TheFive.play(move(receiver), move(x), move(y));
    assert(move(result) == 0, 66);
    return;
}

//! new-transaction
//! sender: alice
//! txn-channel: ch1,alice
//! args: {{bob}}

import {{default}}.TheFive;
import 0x0.LibraSystem;
main(receiver: address) {
    LibraSystem.block_prologue(100, h"aa", h"bb", {{vivian}});
    TheFive.timeout(move(receiver));
    return;
}