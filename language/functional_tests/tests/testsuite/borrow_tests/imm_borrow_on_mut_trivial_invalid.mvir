
module Tester {
    struct X { f: u64 }

    bump_and_give(x_ref: &mut Self.X): &u64 {
        *(&mut copy(x_ref).f) = *&mut copy(x_ref).f + 1;
        return &move(x_ref).f;
    }

    contrived_example_no(x_ref: &mut Self.X): &u64 {
        let returned_ref: &u64;

        returned_ref = Self.bump_and_give(copy(x_ref));
        // ERROR Cannot mutably borrow from `x_ref` it is being borrowed by `returned_ref`
        assert(*copy(returned_ref) == *freeze(&mut move(x_ref).f) + 1, 42);
        return move(returned_ref);
    }

    contrived_example_valid(x_ref: &mut Self.X): &u64 {
        let returned_ref: &u64;

        returned_ref = Self.bump_and_give(copy(x_ref));
        // This is still valid, but might not be in other cases. See other Imm Borrow tests
        // i.e. you might hit FreezeRefExistsMutableBorrowError
        assert(*copy(returned_ref) == *(&freeze(move(x_ref)).f) + 1, 42);
        return move(returned_ref);
    }
}

// check: BORROWFIELD_EXISTS_MUTABLE_BORROW_ERROR
