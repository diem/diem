module M {
    struct S { g: u64 }

    t1(root: &mut Self.S, cond: bool) {
        let x1: u64;
        let x2: u64;
        let eps: &u64;
        let g: &u64;
        x1 = 0;
        x2 = 1;
        if (move(cond)) {
            eps = Self.bar(copy(root));
        } else {
            eps = &x1;
        }
        g = &move(root).g;
        return;
    }

    t2() {
        let x1: u64;
        let x2: u64;
        let eps: &u64;
        x1 = 0;
        x2 = 1;
        eps = Self.foo(&x1, &x2);
        Self.baz(&x1, move(eps));
        return;
    }

    t3() {
        let x1: u64;
        let x2: u64;
        let eps: &u64;
        x1 = 0;
        x2 = 1;
        eps = Self.foo(&x1, &x2);
        Self.baz(freeze(&mut x1), move(eps));
        return;
    }

    foo(a: &u64, b: &u64): &u64 {
        let ret: &u64;
        if (*copy(a) > *copy(b)) {
            ret = move(a);
            _ = move(b);
        } else {
            ret = move(b);
            _ = move(a);
        }
        return move(ret);
    }

    bar(a: &mut Self.S): &u64 {
        return &move(a).g;
    }

    baz(a: &u64, b: &u64) {
        return;
    }
}
