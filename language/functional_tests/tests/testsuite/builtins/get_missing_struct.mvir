module Token {
    resource T { }

    public new(): R#Self.T {
        return T{ };
    }

    public has(addr: address): bool {
        let yes: bool;
        yes = exists<T>(move(addr));
        return move(yes);
    }

    public publish(t: R#Self.T) {
        move_to_sender<T>(move(t));
        return;
    }

    public test() {
        let addr1: address;
        let struct1: &mut R#Self.T;

        addr1 = 0x0111111111111111111111111111111111111111111111111111111111111110;
        struct1 = borrow_global<T>(move(addr1));
        release(move(struct1));

        return;
    }

}

//! new-transaction

import {{default}}.Token;

main() {
    Token.test();
    return;
}

// check: Execution(MissingData)
