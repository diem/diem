module M {
    struct Box<T> { x: T }

    unbox<T>(b: Self.Box<T>): T {
        let x: T;
        Box<T> { x: x } = move(b);
        return move(x);
    }

    f<T>(n: u64, x: T): T {
        if (copy(n) == 0) {
            return move(x);
        }
        return Self.unbox<T>(Self.f<Self.Box<T>>(copy(n) - 1, Box<T> { x: move(x) }));
    }
}

// Function f calls an instance of itself instantiated with a boxed type, but it does
// terminate properly if we allow new types to be created on the fly.
//
// As reference, the equivalent Haskell code compiles & terminates:
//
//   data Boxed a = Box a
//
//   unbox (Box a) = a
//
//   f :: Integer -> a -> a
//   f 0 x = x
//   f n x = unbox (f (n-1) (Box x))
//
//    main = do
//      let x = 42
//      putStrLn (show (f 5 x))
//
// Without the annotation f :: Integer -> a -> a GHC complains about not being able to
// construct the infinite type a ~ Boxed a.
//
// We are taking a conservative approach and forbids such construction in move.

// check: LOOP_IN_INSTANTIATION_GRAPH
