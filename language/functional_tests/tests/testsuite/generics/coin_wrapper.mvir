module M {
    import 0x0.LibraCoin;
    resource Foo<T: resource> { x: T }
    resource CoinWrapper { f: Self.Foo<LibraCoin.T> }
    resource InnerWrapper { f: Self.Foo<Self.Inner>}
    resource Inner { b: bytearray }

    public coin_wrapper(c: LibraCoin.T) {
        let foo: Self.Foo<LibraCoin.T>;
        let coin_wrapper: Self.CoinWrapper;

        foo = Foo<LibraCoin.T> {x: move(c)};
        coin_wrapper = CoinWrapper {f: move(foo)};
        move_to_sender<CoinWrapper>(move(coin_wrapper));
        return;
    }

    public inner_wrapper(b: bytearray) {
        let foo: Self.Foo<Self.Inner>;
        let inner_wrapper: Self.InnerWrapper;
        let inner: Self.Inner;

        inner = Inner { b: move(b) };
        foo = Foo<Self.Inner> {x: move(inner)};
        inner_wrapper = InnerWrapper {f: move(foo)};
        move_to_sender<InnerWrapper>(move(inner_wrapper));
        return;
    }

    public get_coin_value(): u64 acquires CoinWrapper {
        let coin_wrapper_ref: &Self.CoinWrapper;
        let foo_ref: &Self.Foo<LibraCoin.T>;
        let coin_ref: &LibraCoin.T;

        coin_wrapper_ref = borrow_global<CoinWrapper>(get_txn_sender());
        foo_ref = &move(coin_wrapper_ref).f;
        coin_ref = &move(foo_ref).x;

        return LibraCoin.value(move(coin_ref));
    }

    public get_inner(): bytearray acquires InnerWrapper {
        let inner_wrapper_ref: &Self.InnerWrapper;
        let foo_ref: &Self.Foo<Self.Inner>;
        let inner_ref: &Self.Inner;

        inner_wrapper_ref = borrow_global<InnerWrapper>(get_txn_sender());
        foo_ref = &move(inner_wrapper_ref).f;
        inner_ref = &move(foo_ref).x;

        return *(&move(inner_ref).b);
    }


    public destroy(): LibraCoin.T acquires CoinWrapper {
        let coin_wrapper: Self.CoinWrapper;
        let f: Self.Foo<LibraCoin.T>;
        let x: LibraCoin.T;

        coin_wrapper = move_from<CoinWrapper>(get_txn_sender());
        CoinWrapper {f} = move(coin_wrapper);
        Foo<LibraCoin.T> {x} = move(f);
        return move(x);
    }
}

//! new-transaction
import {{default}}.M;
import 0x0.LibraAccount;
import 0x0.LibraCoin;

main() {
  let coin: LibraCoin.T;
  let byte: bytearray;

  byte = h"bac1ac";
  coin = LibraAccount.withdraw_from_sender(1000);

  M.coin_wrapper(move(coin));
  M.inner_wrapper(move(byte));

  return;
}

//! new-transaction
import {{default}}.M;
import 0x0.LibraCoin;

main() {
  let coin: LibraCoin.T;
  let byte: bytearray;

  byte = h"bac1ac";
  assert(M.get_coin_value() == 1000, 4);
  assert(M.get_inner() == move(byte), 4);
  return;
}

//! new-transaction
import {{default}}.M;
import 0x0.LibraCoin;
import 0x0.LibraAccount;

main() {
  let coin: LibraCoin.T;
  coin = M.destroy();
  LibraAccount.deposit(get_txn_sender(), move(coin));
  return;
}
