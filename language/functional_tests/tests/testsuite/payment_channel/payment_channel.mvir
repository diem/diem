modules:
module PaymentChannel {
    import 0x0.Signature;
    import 0x0.LibraCoin;
    import 0x0.U64Util;
    import 0x0.BytearrayUtil;

    resource T {
        funder_capacity: R#LibraCoin.T,
        counterparty_capacity: R#LibraCoin.T,
        seq_id: u64,
        multi_sig: bytearray,
        funder: address,
        counterparty: address,
    }

    counterparty_balance(this: &R#Self.T): u64 {
        let counterparty_balance: u64;
        let counterparty_capacity_ref: &R#LibraCoin.T;
        counterparty_capacity_ref = &move(this).counterparty_capacity;
        counterparty_balance = LibraCoin.value(move(counterparty_capacity_ref));
        return move(counterparty_balance);
    }

    funder_balance(this: &R#Self.T): u64 {
        let funder_balance: u64;
        let funder_capacity_ref: &R#LibraCoin.T;
        funder_capacity_ref = &move(this).funder_capacity;
        funder_balance = LibraCoin.value(move(funder_capacity_ref));
        return move(funder_balance);
    }

    seq_id(this: &R#Self.T): u64 {
        let seq_id: u64;
        seq_id = *&move(this).seq_id;
        return move(seq_id);
    }

    multi_sig(this: &R#Self.T): bytearray {
        let multi_sig: bytearray;
        multi_sig = *&move(this).multi_sig;
        return move(multi_sig);
    }

    funder(this: &R#Self.T): address {
        let funder: address;
        funder = *&move(this).funder;
        return move(funder);
    }

    counterparty(this: &R#Self.T): address {
        let counterparty: address;
        counterparty = *&move(this).counterparty;
        return move(counterparty);
    }

    is_permitted_sender(sender: address, funder: address, counterparty: address): bool {
        let is_funder: bool;
        let is_counterparty: bool;
        let out: bool;

        is_funder = (move(funder) == copy(sender));
        is_counterparty = (move(counterparty) == copy(sender));

        out = move(is_funder) || move(is_counterparty);
        return move(out);
    }

    public new_payment_channel(funding: R#LibraCoin.T, multi_sig_pubkey: bytearray, other: address): R#Self.T {
	let sender: address;
        let counterparty_capacity: R#LibraCoin.T;
	sender = get_txn_sender();
        counterparty_capacity = LibraCoin.zero();

        return T{
            funder_capacity: move(funding),
            counterparty_capacity: move(counterparty_capacity),
            seq_id: 0,
            multi_sig: move(multi_sig_pubkey),
	    funder: move(sender),
	    counterparty: move(other),
        };
    }

   ver(this: &R#Self.T, amt_to_transfer: u64, new_seq_id: u64, signature: bytearray): bool {
        let seq_id: u64;
        let ver: bool;
        let multi_sig: bytearray;
        let message: bytearray;
	let amt_to_transfer_bytes: bytearray;
	let new_seq_id_bytes: bytearray;

        seq_id = Self.seq_id(copy(this));
        multi_sig = Self.multi_sig(move(this));

        if (copy(seq_id) >= copy(new_seq_id)) {
            return false;
	}

        amt_to_transfer_bytes = U64Util.u64_to_bytes(move(amt_to_transfer));
        new_seq_id_bytes = U64Util.u64_to_bytes(move(new_seq_id));

        message = BytearrayUtil.bytearray_concat(move(amt_to_transfer_bytes), move(new_seq_id_bytes));
        ver = Signature.ed25519_verify(move(signature), move(multi_sig), move(message));
        return move(ver);
    } 

    public update(this: &mut R#Self.T, amt_to_transfer: u64, new_seq_id: u64, signature: bytearray) {
        let ver: bool;
        let ref: &R#Self.T;
        let transfer_amt: R#LibraCoin.T;

        ref = freeze(copy(this));
        ver = Self.ver(move(ref), copy(amt_to_transfer), copy(new_seq_id), move(signature));
        assert(move(ver) == true, 42);

        transfer_amt = LibraCoin.withdraw(&mut copy(this).funder_capacity, copy(amt_to_transfer));
        LibraCoin.deposit(&mut copy(this).counterparty_capacity, move(transfer_amt));

        *(&mut move(this).seq_id) = move(new_seq_id);

        return;
    }

    public close(this: &mut R#Self.T): R#LibraCoin.T {
        let check: bool;
        let sender: address;
        let funder: address;
        let counterparty: address;
        let capacity_ref: &mut R#LibraCoin.T;
        let capacity_ref_freeze: &R#LibraCoin.T;
        let counterparty_balance: u64;
        let amt_to_withdraw: u64;
        let to_withdraw: R#LibraCoin.T;
        let funder_balance: u64;
        let ver: bool;
        let ref: &R#Self.T;

        sender = get_txn_sender();
        ref = freeze(copy(this));

        counterparty = Self.counterparty(copy(ref));
        funder = Self.funder(copy(ref));

        check = Self.is_permitted_sender(copy(sender), copy(funder), copy(counterparty));
        assert(move(check) == true, 42);

        counterparty_balance = Self.counterparty_balance(copy(ref));
        funder_balance = Self.funder_balance(move(ref));

        if (move(sender) == move(counterparty)) {
	    capacity_ref = &mut move(this).counterparty_capacity;
        } else {
	    capacity_ref = &mut move(this).funder_capacity;
        };

        capacity_ref_freeze = freeze(copy(capacity_ref));
        amt_to_withdraw = LibraCoin.value(move(capacity_ref_freeze));

        to_withdraw = LibraCoin.withdraw(move(capacity_ref), move(amt_to_withdraw));

        return move(to_withdraw);
    }
}
script:

import Transaction.PaymentChannel;

main() {
    return;
}
