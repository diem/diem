error: 

    ┌── tests/move_check/typing/neq_invalid.move:13:20 ───
    │
 13 │         (0: u8) != (1: u128);
    │                    ^^^^^^^^^ Incompatible arguments to '!='
    ·
 13 │         (0: u8) != (1: u128);
    │             -- The type: 'u8'
    ·
 13 │         (0: u8) != (1: u128);
    │                        ---- Is not compatible with: 'u128'
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:14:14 ───
    │
 14 │         0 != false;
    │              ^^^^^ Incompatible arguments to '!='
    ·
 14 │         0 != false;
    │         - The type: integer
    ·
 14 │         0 != false;
    │              ----- Is not compatible with: 'bool'
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:15:15 ───
    │
 15 │         &0 != 1;
    │               ^ Incompatible arguments to '!='
    ·
 15 │         &0 != 1;
    │               - The type: integer
    ·
 15 │         &0 != 1;
    │         -- Is not compatible with: '&{integer}'
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:16:14 ───
    │
 16 │         1 != &0;
    │              ^^ Incompatible arguments to '!='
    ·
 16 │         1 != &0;
    │         - The type: integer
    ·
 16 │         1 != &0;
    │              -- Is not compatible with: '&{integer}'
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:17:14 ───
    │
 17 │         s != s_ref;
    │              ^^^^^ Incompatible arguments to '!='
    ·
 12 │     fun t0(r: &R, r_mut: &mut R, s: S, s_ref: &S, s_mut: &mut S) {
    │                                     - The type: '0x8675309::M::S'
    ·
 12 │     fun t0(r: &R, r_mut: &mut R, s: S, s_ref: &S, s_mut: &mut S) {
    │                                               -- Is not compatible with: '&0x8675309::M::S'
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:18:18 ───
    │
 18 │         s_mut != s;
    │                  ^ Incompatible arguments to '!='
    ·
 12 │     fun t0(r: &R, r_mut: &mut R, s: S, s_ref: &S, s_mut: &mut S) {
    │                                                          ------ The type: '&mut 0x8675309::M::S'
    ·
 12 │     fun t0(r: &R, r_mut: &mut R, s: S, s_ref: &S, s_mut: &mut S) {
    │                                     - Is not compatible with: '0x8675309::M::S'
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:22:9 ───
    │
 22 │         r != r;
    │         ^^^^^^ Cannot use '!=' on resource values. This would destroy the resource. Try borrowing the values with '&' first.'
    ·
 21 │     fun t1(r: R) {
    │               - The type: '0x8675309::M::R'
    ·
  3 │     resource struct R {
    │     -------- Is found to be a non-copyable type here
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:26:9 ───
    │
 26 │         G0{} != G0{};
    │         ^^^^ Could not infer this type. Try adding an annotation
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:26:17 ───
    │
 26 │         G0{} != G0{};
    │                 ^^^^ Could not infer this type. Try adding an annotation
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:27:9 ───
    │
 27 │         G1{} != G1{};
    │         ^^^^ Could not infer this type. Try adding an annotation
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:27:9 ───
    │
 27 │         G1{} != G1{};
    │         ^^^^^^^^^^^^ Cannot use '!=' on resource values. This would destroy the resource. Try borrowing the values with '&' first.'
    ·
 27 │         G1{} != G1{};
    │                 ---- The type: '0x8675309::M::G1<_>'
    ·
  7 │     struct G1<T: resource> {}
    │                  -------- Is found to be a non-copyable type here
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:27:17 ───
    │
 27 │         G1{} != G1{};
    │                 ^^^^ Could not infer this type. Try adding an annotation
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:28:9 ───
    │
 28 │         G2{} != G2{};
    │         ^^^^ Could not infer this type. Try adding an annotation
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:28:9 ───
    │
 28 │         G2{} != G2{};
    │         ^^^^^^^^^^^^ Cannot use '!=' on resource values. This would destroy the resource. Try borrowing the values with '&' first.'
    ·
 28 │         G2{} != G2{};
    │                 ---- The type: '0x8675309::M::G2<_>'
    ·
  8 │     struct G2<T> {}
    │               - Is found to be a non-copyable type here
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:28:17 ───
    │
 28 │         G2{} != G2{};
    │                 ^^^^ Could not infer this type. Try adding an annotation
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:32:9 ───
    │
 32 │         () != ();
    │         ^^^^^^^^ Invalid arguments to '!='
    ·
 32 │         () != ();
    │               -- Expected a single type, but found expression list type: '()'
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:33:9 ───
    │
 33 │         (0, 1) != (0, 1);
    │         ^^^^^^^^^^^^^^^^ Invalid arguments to '!='
    ·
 33 │         (0, 1) != (0, 1);
    │                   ------ Expected a single type, but found expression list type: '(u64, u64)'
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:34:22 ───
    │
 34 │         (1, 2, 3) != (0, 1);
    │                      ^^^^^^ Incompatible arguments to '!='
    ·
 34 │         (1, 2, 3) != (0, 1);
    │         --------- The expression list type of length 3: '({integer}, {integer}, {integer})'
    ·
 34 │         (1, 2, 3) != (0, 1);
    │                      ------ Is not compatible with the expression list type of length 2: '({integer}, {integer})'
    │

error: 

    ┌── tests/move_check/typing/neq_invalid.move:35:19 ───
    │
 35 │         (0, 1) != (1, 2, 3);
    │                   ^^^^^^^^^ Incompatible arguments to '!='
    ·
 35 │         (0, 1) != (1, 2, 3);
    │         ------ The expression list type of length 2: '({integer}, {integer})'
    ·
 35 │         (0, 1) != (1, 2, 3);
    │                   --------- Is not compatible with the expression list type of length 3: '({integer}, {integer}, {integer})'
    │

