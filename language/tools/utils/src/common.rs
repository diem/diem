// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

//! Defines constants and types that are used throughout cost synthesis.
use rand::{distributions::Alphanumeric, rngs::StdRng, Rng};

/// The maximum number of fields that will be generated for any struct.
pub const MAX_FIELDS: usize = 20;

/// The maximum size that generated byte arrays can be.
pub const BYTE_ARRAY_MAX_SIZE: usize = 64;

/// The maximum size that a generated string can be.
pub const MAX_STRING_SIZE: usize = 32;

/// The maximumm number of locals that can be defined within a generated function definition.
pub const MAX_NUM_LOCALS: usize = 10;

/// The maximum number of arguments to generated function definitions.
pub const MAX_FUNCTION_CALL_SIZE: usize = 23;

/// The maximum number of return types of generated function definitions.
pub const MAX_RETURN_TYPES_LENGTH: usize = 4;

/// The maximum number of structs that can be generated for a module
pub const MAX_STRUCTS: usize = 100;

/// The maximum number of functions that can be generated for a module.
pub const MAX_FUNCTIONS: usize = 100;

/// The maximum number of type parameters that can be generated in a module for any function or
/// struct.
pub const MAX_NUM_TY_PARAMS: usize = 5;

pub fn random_string(rng: &mut StdRng, len: usize) -> String {
    if len == 0 {
        "".to_string()
    } else {
        let mut string = "a".to_string();
        (1..len).for_each(|_| string.push(rng.sample(Alphanumeric)));
        string
    }
}
