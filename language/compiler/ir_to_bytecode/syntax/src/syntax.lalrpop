use std::str::FromStr;
use codespan::{ByteIndex, Span};

use crate::ast::{
    ModuleDefinition, StructDefinition, Script, Program, ScriptOrModule,
    FunctionBody, FunctionVisibility, ImportDefinition, ModuleName,
    Block, Cmd, CopyableVal, Spanned, Kind, TypeVar,
    Cmd_, Exp_, Exp, Var,  Var_, FunctionCall,
    FunctionName, Builtin, Statement, IfElse, While, Loop, Type, Field, Fields,
    StructName, QualifiedStructIdent, Function, BinOp, ModuleIdent, QualifiedModuleIdent, UnaryOp,
    LValue, LValue_, parse_field, Field_, TypeVar_, Function_, StructDefinition_,
};
use libra_types::{account_address::AccountAddress, byte_array::ByteArray};
use hex;

grammar();

U64: u64 = <s:r"[0-9]+"> => u64::from_str(s).unwrap();
Name: String = <s:r"[a-zA-Z$_][a-zA-Z0-9$_]*"> => s.to_string();
NameBeginTy: String = <s:r"[a-zA-Z$_][a-zA-Z0-9$_]*<"> => s[..s.len() - 1].to_string();
DotName: String = <s:r"[a-zA-Z$_][a-zA-Z0-9$_]*\.[a-zA-Z$_][a-zA-Z0-9$_]*"> => s.to_string();

ByteArray: ByteArray = {
    <s:r#"h"[0-9a-fA-F]*""#> => {
        ByteArray::new(hex::decode(&s[2..s.len()-1]).unwrap_or_else(|_| panic!("The string {:?} is not a valid hex-encoded byte array", s)))
    }
};
AccountAddress: AccountAddress = {
    < s: r"0[xX][0-9a-fA-F]+" > => {
        AccountAddress::from_hex_literal(&s)
            .unwrap_or_else(|_| panic!("The address {:?} is of invalid length. Addresses are at most 32-bytes long", s))
    }
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Sp<Rule>: Spanned<Rule> =
    <l: @L> <rule: Rule> <r: @R> =>
    Spanned{span: Span::new(ByteIndex(l as u32), ByteIndex(r as u32)), value: rule};

Var: Var = {
    <n:Name> =>? Var::parse(n),
};

Var_ = Sp<Var>;

Field: Field = {
    <n:Name> =>? parse_field(n),
};

Field_ = Sp<Field>;

CopyableVal: CopyableVal = {
    AccountAddress => CopyableVal::Address(<>),
    "true" => CopyableVal::Bool(true),
    "false" => CopyableVal::Bool(false),
    <i: U64> => CopyableVal::U64(i),
    <buf: ByteArray> => CopyableVal::ByteArray(buf),
}

Exp = BinopExp;
Exp_ = Sp<Exp>;

Tier<Op, NextTier>: Exp = {
    <e1: Sp<<Tier<Op,NextTier>>>> <o: Op> <e2: Sp<<NextTier>>> => {
        Exp::BinopExp(Box::new(e1), o, Box::new(e2))
    },
    NextTier
};

BinopExp = Tier<CmpOp, OrExp>;
BinopExp_ = Sp<BinopExp>;

CmpOp: BinOp = {
    "==" => BinOp::Eq,
    "!=" => BinOp::Neq,
    "<" => BinOp::Lt,
    ">" => BinOp::Gt,
    "<=" => BinOp::Le,
    ">=" => BinOp::Ge,
}

OrExp = Tier<OrOp, AndExp>;

OrOp: BinOp = {
    "||" => BinOp::Or,
}

AndExp = Tier<AndOp, XorExp>;

AndOp: BinOp = {
    "&&" => BinOp::And,
}

XorExp = Tier<XorOp, BinOrExp>;

XorOp: BinOp = {
    "^" => BinOp::Xor,
}

BinOrExp = Tier<BinOrOp, BinAndExp>;

BinOrOp: BinOp = {
    "|" => BinOp::BitOr,
}

BinAndExp = Tier<BinAndOp, AddSubExp>;

BinAndOp: BinOp = {
    "&" => BinOp::BitAnd,
}

AddSubExp = Tier<AddSubOp, FactorExp>;

AddSubOp: BinOp = {
    "+" => BinOp::Add,
    "-" => BinOp::Sub,
}

FactorExp = Tier<FactorOp, UnaryExp>;

FactorOp: BinOp = {
    "*" => BinOp::Mul,
    "/" => BinOp::Div,
    "%" => BinOp::Mod,
}

QualifiedFunctionName : FunctionCall = {
    <f: Builtin> => FunctionCall::Builtin(f),
    <module_dot_name: DotName> <type_actuals: TypeActuals> =>? {
        let v: Vec<&str> = module_dot_name.split(".").collect();
        assert!(v.len() == 2, 42);
        Ok(FunctionCall::ModuleFunctionCall{
            module: ModuleName::parse(v[0])?,
            name: FunctionName::parse(v[1])?,
            type_actuals: type_actuals,
        })
    }
}

UnaryExp : Exp = {
    "!" <e: Sp<UnaryExp>> => Exp::UnaryExp(UnaryOp::Not, Box::new(e)),
    "*" <e: Sp<UnaryExp>> => Exp::Dereference(Box::new(e)),
    "&mut " <e: Sp<UnaryExp>> "." <f: Field> => {
        Exp::Borrow{ is_mutable: true, exp: Box::new(e), field: f }
    },
    "&" <e: Sp<UnaryExp>> "." <f: Field> => {
        Exp::Borrow{ is_mutable: false, exp: Box::new(e), field: f }
    },
    CallOrTerm,
}

Call: Exp = {
    <f: Sp<QualifiedFunctionName>> <exp: Sp<CallOrTerm>> => Exp::FunctionCall(f, Box::new(exp)),
}

CallOrTerm: Exp = {
    <f: Sp<QualifiedFunctionName>> <exp: Sp<CallOrTerm>> => Exp::FunctionCall(f, Box::new(exp)),
    Term,
}

FieldExp: (Field_, Exp_) = {
    <f: Sp<Field>> ":" <e: Sp<Exp>> => (f, e)
}

Term: Exp = {
    "move(" <v: Sp<Var>> ")" => Exp::Move(v),
    "copy(" <v: Sp<Var>> ")" => Exp::Copy(v),
    "&mut " <v: Sp<Var>> => Exp::BorrowLocal(true, v),
    "&" <v: Sp<Var>> => Exp::BorrowLocal(false, v),
    Sp<CopyableVal> => Exp::Value(<>),
    <name_and_type_actuals: NameAndTypeActuals> "{" <fs:Comma<FieldExp>> "}" =>? {
        let (name, type_actuals) = name_and_type_actuals;
        Ok(Exp::Pack(
            StructName::parse(name)?,
            type_actuals,
            fs.into_iter().collect::<Vec<_>>()
        ))
    },
    "(" <exps: Comma<Sp<Exp>>> ")" => Exp::ExprList(exps),
}

StructName: StructName = {
    <n: Name> =>? StructName::parse(n),
}

QualifiedStructIdent : QualifiedStructIdent = {
    <module_dot_struct: DotName> =>? {
        let v: Vec<&str> = module_dot_struct.split(".").collect();
        assert!(v.len() == 2, 42);
        let m: ModuleName = ModuleName::parse(v[0])?;
        let n: StructName = StructName::parse(v[1])?;
        Ok(QualifiedStructIdent::new(m,n))
    }
}


ModuleName: ModuleName = {
    <n: Name> =>? ModuleName::parse(n),
}

Builtin: Builtin = {
    "create_account" => Builtin::CreateAccount,
    "exists<" <name_and_type_actuals: NameAndTypeActuals> ">" =>? {
        let (name, type_actuals) = name_and_type_actuals;
        Ok(Builtin::Exists(StructName::parse(name)?, type_actuals))
    },
    "borrow_global<" <name_and_type_actuals: NameAndTypeActuals> ">" =>? {
        let (name, type_actuals) = name_and_type_actuals;
        Ok(Builtin::BorrowGlobal(false, StructName::parse(name)?, type_actuals))
    },
    "borrow_global_mut<" <name_and_type_actuals: NameAndTypeActuals> ">" =>? {
        let (name, type_actuals) = name_and_type_actuals;
        Ok(Builtin::BorrowGlobal(true, StructName::parse(name)?, type_actuals))
    },
    "get_txn_gas_unit_price" => Builtin::GetTxnGasUnitPrice,
    "get_txn_max_gas_units" => Builtin::GetTxnMaxGasUnits,
    "get_txn_public_key" => Builtin::GetTxnPublicKey,
    "get_txn_sender" => Builtin::GetTxnSender,
    "get_txn_sequence_number" => Builtin::GetTxnSequenceNumber,
    "move_from<" <name_and_type_actuals: NameAndTypeActuals> ">" =>? {
        let (name, type_actuals) = name_and_type_actuals;
        Ok(Builtin::MoveFrom(StructName::parse(name)?, type_actuals))
    },
    "move_to_sender<" <name_and_type_actuals: NameAndTypeActuals> ">" =>? {
        let (name, type_actuals) = name_and_type_actuals;
        Ok(Builtin::MoveToSender(StructName::parse(name)?, type_actuals))
    },
    "get_gas_remaining" => Builtin::GetGasRemaining,
    "freeze" => Builtin::Freeze,
}

LValue: LValue = {
    <l:Sp<Var>> => LValue::Var(l),
    "*" <e: Sp<Exp>> => LValue::Mutate(e),
    "_" => LValue::Pop,
}

LValues: Vec<LValue_> = {
    <l:Sp<LValue>> <v: ("," <Sp<LValue>>)*> => {
        let mut v = v;
        v.insert(0, l);
        v
    }
}

FieldBindings: (Field_, Var_) = {
    <f: Sp<Field>> ":" <v: Sp<Var>> => (f, v),
    <f: Sp<Field>> => (f.clone(), Spanned { span: f.span, value: Var::new(f.value.name().into()) }),
}

pub Cmd : Cmd = {
    <lvalues: LValues> "=" <e: Sp<Exp>> => Cmd::Assign(lvalues, e),
    <name_and_type_actuals: NameAndTypeActuals> "{" <bindings: Comma<FieldBindings>> "}" "=" <e: Sp<Exp>> =>? {
        let (name, type_actuals) = name_and_type_actuals;
        Ok(Cmd::Unpack(
            StructName::parse(name)?,
            type_actuals,
            bindings.into_iter().collect(),
            Box::new(e),
        ))
    },
    "abort" <err: Sp<Exp>?> => {
        match err {
            None => Cmd::Abort(None),
            Some(err) => Cmd::Abort(Some(Box::new(err))),
        }
    },
    "return" <v: Comma<Sp<Exp>>> => Cmd::Return(Box::new(Spanned::no_loc(Exp::ExprList(v)))),
    "continue" => Cmd::Continue,
    "break" => Cmd::Break,
    <Sp<Call>> => Cmd::Exp(Box::new(<>)),
    "(" <Comma<Sp<Exp>>> ")" => Cmd::Exp(Box::new(Spanned::no_loc(Exp::ExprList(<>)))),
}

Cmd_ : Cmd_ = {
    Sp<Cmd>,
}

Statement : Statement = {
    <cmd: Cmd_> ";" => Statement::CommandStatement(cmd),
    "assert(" <e: Sp<Exp>> "," <err: Sp<Exp>> ")" => {
        let cond = {
            let span = e.span;
            Spanned {
                value: Exp::UnaryExp(UnaryOp::Not, Box::new(e)),
                span
            }
        };
        let span = err.span;
        let stmt = {
            Statement::CommandStatement(Spanned {
                value: Cmd::Abort(Some(Box::new(err))),
                span,
            })
        };
        Statement::IfElseStatement(IfElse::if_block(cond, Spanned {
            value: Block::new(vec![stmt]),
            span
        }))
    },
    <IfStatement>,
    <WhileStatement>,
    <LoopStatement>,
    ";" => Statement::EmptyStatement,
}

IfStatement : Statement = {
    "if" "(" <cond: Sp<Exp>> ")" <block: Sp<Block>> => {
        Statement::IfElseStatement(IfElse::if_block(cond, block))
    },
    "if" "(" <cond: Sp<Exp>> ")" <if_block: Sp<Block>> "else" <else_block: Sp<Block>> => {
        Statement::IfElseStatement(IfElse::if_else(cond, if_block, else_block))
    },
}

WhileStatement : Statement = {
    "while" "(" <cond: Sp<Exp>> ")" <block: Sp<Block>> => {
        Statement::WhileStatement(While {cond, block})
    }
}

LoopStatement : Statement = {
    "loop" <block: Sp<Block>> => {
        Statement::LoopStatement(Loop {block})
    }
}

Statements : Vec<Statement> = {
    <Statement*>
}

Block : Block = {
    "{" <stmts: Statements> "}" => Block::new(stmts)
}

Declaration: (Var_, Type) = {
  "let" <v: Sp<Var>> ":" <t: Type> ";" => (v, t),
}

Declarations: Vec<(Var_, Type)> = {
    <Declaration*>
}

FunctionBlock: (Vec<(Var_, Type)>, Block) = {
    "{" <locals: Declarations> <stmts: Statements> "}" => (locals, Block::new(stmts))
}

Kind: Kind = {
    "resource" => Kind::Resource,
    "unrestricted" => Kind::Unrestricted,
}

Type: Type = {
    "address" => Type::Address,
    "u64" => Type::U64,
    "bool" => Type::Bool,
    "bytearray" => Type::ByteArray,
    <s: QualifiedStructIdent> <tys: TypeActuals> => Type::Struct(s, tys),
    "&" <t: Type> => Type::Reference(false, Box::new(t)),
    "&mut " <t: Type> => Type::Reference(true, Box::new(t)),
    <n: Name> =>? Ok(Type::TypeParameter(TypeVar::parse(n)?)),
}

TypeVar: TypeVar = {
    <n: Name> =>? TypeVar::parse(n),
}

TypeVar_ = Sp<TypeVar>;

TypeFormal: (TypeVar_, Kind) = {
    <type_var: Sp<TypeVar>> <k: (":" <Kind>)?> =>? {
        match k {
            Some(k) => Ok((type_var, k)),
            None => Ok((type_var, Kind::All)),
        }
    }
}

TypeActuals: Vec<Type> = {
    <tys: ("<" <Comma<Type>> ">")?> => {
        tys.unwrap_or(vec![])
    }
}

NameAndTypeFormals: (String, Vec<(TypeVar_, Kind)>) = {
    <n: NameBeginTy> <k: Comma<TypeFormal>> ">" => (n, k),
    <n: Name> => (n, vec![]),
}

NameAndTypeActuals: (String, Vec<Type>) = {
    <n: NameBeginTy> <tys: Comma<Type>> ">" => (n, tys),
    <n: Name> => (n, vec![]),
}

ArgDecl : (Var_, Type) = {
    <v: Sp<Var>> ":" <t: Type> ","? => (v, t)
}

NativeTag: () = {
  "native" => ()
}

Public: () = {
  "public" => ()
}

ReturnType: Vec<Type> = {
    ":" <t: Type> <v: ("*" <Type>)*> => {
        let mut v = v;
        v.insert(0, t);
        v
    }
}

AcquireList: Vec<StructName> = {
    "acquires" <s: StructName> <al: ("," <StructName>)*> => {
        let mut al = al;
        al.insert(0, s);
        al
    }
}

FunctionDecl : (FunctionName, Function_) = {
  <f: Sp<MoveFunctionDecl>> => (f.value.0, Spanned { span: f.span, value: f.value.1 }),
  <f: Sp<NativeFunctionDecl>> => (f.value.0, Spanned { span: f.span, value: f.value.1 }),
}

MoveFunctionDecl : (FunctionName, Function) = {
    <p: Public?> <name_and_type_formals: NameAndTypeFormals> "(" <args: (ArgDecl)*> ")" <ret: ReturnType?>
    <acquires: AcquireList?>
    <locals_body: FunctionBlock> =>? {
        let (name, type_formals) = name_and_type_formals;
        let (locals, body) = locals_body;
        Ok((FunctionName::parse(name)?, Function::new(
            if p.is_some() { FunctionVisibility::Public } else { FunctionVisibility::Internal },
            args,
            ret.unwrap_or(vec![]),
            type_formals,
            acquires.unwrap_or_else(Vec::new),
            FunctionBody::Move{locals: locals, code: body},
        )))
    }
}

NativeFunctionDecl: (FunctionName, Function) = {
    <nat: NativeTag> <p: Public?> <name_and_type_formals: NameAndTypeFormals> "(" <args: (ArgDecl)*> ")" <ret: ReturnType?>
        <acquires: AcquireList?>
        ";" =>? {
        let (name, type_formals) = name_and_type_formals;
        Ok((FunctionName::parse(name)?, Function::new(
            if p.is_some() { FunctionVisibility::Public } else { FunctionVisibility::Internal },
            args,
            ret.unwrap_or(vec![]),
            type_formals,
            acquires.unwrap_or_else(Vec::new),
            FunctionBody::Native,
        )))
    }
}

FieldDecl : (Field_, Type) = {
    <f: Sp<Field>> ":" <t: Type> ","? => (f, t)
}

StructKind: bool = {
    "struct" => false,
    "resource" => true
}

Modules: Vec<ModuleDefinition> = {
    "modules:" <c: Module*> "script:" => c,
}

pub Program : Program = {
    <m: Modules?> <s: Script> => {
        let modules = m.unwrap_or(vec![]);
        Program::new(modules, s)
    },
    <m: Module> => {
        let return_stmt = Statement::CommandStatement(
            Spanned {
                span: Span::default(),
                value: Cmd::Return(Box::new(Spanned::no_loc(Exp::ExprList(vec![])))),
            }
        );
        let main =
            Function::new(
	        FunctionVisibility::Public,
                vec![],
                vec![],
                vec![],
                vec![],
                FunctionBody::Move {
                    locals: vec![],
                    code: Block::new(vec![return_stmt]),
                },
            );
        Program::new(vec![m], Script::new(vec![], Spanned::no_loc(main)))
    }
}

pub Script : Script = {
    <l: @L> <imports: (ImportDecl)*>
    "main" "(" <args: (ArgDecl)*> ")" <locals_body: FunctionBlock> <r: @R> => {
        let (locals, body) = locals_body;
        let main =
            Function::new(
                FunctionVisibility::Public,
                args,
                vec![],
                vec![],
                vec![],
                FunctionBody::Move{ locals: locals, code: body },
            );
        let main = Spanned{ span: Span::new(ByteIndex(l as u32), ByteIndex(r as u32)), value: main };
        Script::new(imports, main)
    }
}

StructDecl: StructDefinition_ = {
    <l: @L> <is_nominal_resource: StructKind> <name_and_type_formals: NameAndTypeFormals> "{" <data: (FieldDecl)*> "}" <r: @R> =>? {
        let (name, type_formals) = name_and_type_formals;
        let mut fields = Fields::new();
        for (field, type_) in data.into_iter() {
            fields.push((field, type_));
        }
        Ok(Spanned {
            span: Span::new(ByteIndex(l as u32), ByteIndex(r as u32)),
            value: StructDefinition::move_declared(is_nominal_resource, name, type_formals, fields)?,
        })
    },
    <l: @L> <native: NativeTag> <is_nominal_resource: StructKind> <name_and_type_formals: NameAndTypeFormals> ";" <r: @R> =>? {
        let (name, type_formals) = name_and_type_formals;
        Ok(Spanned {
            span: Span::new(ByteIndex(l as u32), ByteIndex(r as u32)),
            value: StructDefinition::native(is_nominal_resource, name, type_formals)?,
        })
    }
}

QualifiedModuleIdent: QualifiedModuleIdent = {
    <a: AccountAddress> "." <m: ModuleName> => QualifiedModuleIdent::new(m, a),
}

ModuleIdent: ModuleIdent = {
    <q: QualifiedModuleIdent> => ModuleIdent::Qualified(q),
    <transaction_dot_module: DotName> =>? {
        let v: Vec<&str> = transaction_dot_module.split(".").collect();
        assert!(v.len() == 2, 42);
        let ident: String = v[0].to_string();
        if ident != "Transaction" {
            panic!("Ident = {} which is not Transaction", ident);
        }
        let m: ModuleName = ModuleName::parse(v[1])?;
        Ok(ModuleIdent::Transaction(m))
    },
}

ImportAlias: ModuleName = {
    "as" <alias: ModuleName> => {
        if alias.as_inner() == ModuleName::self_name() {
            panic!("Invalid use of reserved module alias '{}'", ModuleName::self_name());
        }
        alias
    }
}

ImportDecl: ImportDefinition = {
    "import" <ident: ModuleIdent> <alias: ImportAlias?> ";" =>
        ImportDefinition::new(ident, alias)
}

pub Module : ModuleDefinition = {
    "module" <n: Name> "{"
        <imports: (ImportDecl)*>
        <structs: (StructDecl)*>
        <functions: (FunctionDecl)*>
    "}" =>? ModuleDefinition::new(n, imports, structs, functions),
}

pub ScriptOrModule: ScriptOrModule = {
    <s: Script> => ScriptOrModule::Script(s),
    <m: Module> => ScriptOrModule::Module(m),
}

extern {
    type Error = failure::Error;
}
