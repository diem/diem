(function() {var implementors = {};
implementors["consensus"] = [{"text":"impl <a class=\"trait\" href=\"network/protocols/network/trait.NewNetworkSender.html\" title=\"trait network::protocols::network::NewNetworkSender\">NewNetworkSender</a> for <a class=\"struct\" href=\"consensus/network_interface/struct.ConsensusNetworkSender.html\" title=\"struct consensus::network_interface::ConsensusNetworkSender\">ConsensusNetworkSender</a>","synthetic":false,"types":["consensus::network_interface::ConsensusNetworkSender"]}];
implementors["diem_mempool"] = [{"text":"impl <a class=\"trait\" href=\"network/protocols/network/trait.NewNetworkSender.html\" title=\"trait network::protocols::network::NewNetworkSender\">NewNetworkSender</a> for <a class=\"struct\" href=\"diem_mempool/network/struct.MempoolNetworkSender.html\" title=\"struct diem_mempool::network::MempoolNetworkSender\">MempoolNetworkSender</a>","synthetic":false,"types":["diem_mempool::shared_mempool::network::MempoolNetworkSender"]}];
implementors["network"] = [];
implementors["network_builder"] = [{"text":"impl <a class=\"trait\" href=\"network/protocols/network/trait.NewNetworkSender.html\" title=\"trait network::protocols::network::NewNetworkSender\">NewNetworkSender</a> for <a class=\"struct\" href=\"network_builder/dummy/struct.DummyNetworkSender.html\" title=\"struct network_builder::dummy::DummyNetworkSender\">DummyNetworkSender</a>","synthetic":false,"types":["network_builder::dummy::DummyNetworkSender"]}];
implementors["state_sync"] = [{"text":"impl <a class=\"trait\" href=\"network/protocols/network/trait.NewNetworkSender.html\" title=\"trait network::protocols::network::NewNetworkSender\">NewNetworkSender</a> for <a class=\"struct\" href=\"state_sync/network/struct.StateSyncSender.html\" title=\"struct state_sync::network::StateSyncSender\">StateSyncSender</a>","synthetic":false,"types":["state_sync::network::StateSyncSender"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()