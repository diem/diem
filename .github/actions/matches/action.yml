name: "File Matching"
description: |
  Match the contents of a file against a glob to determine if any changes are relevant to a build.
inputs:
  changes-file:
    description: |
      Full path of file containing a list of files relative to the root of the git repository that has been modified.
      If not specified then an environment variable named $CHANGES_CHANGED_FILE_OUTPUTFILE will be used as supplied by the
      changes github action.  Should no file be set, by the environment variable or the parameter, then lacking any
      knowledge of what might have changed, this action assumes changes were made.
    required: false
  pattern:
    description: A grep match pattern used to find changes, must excape quotes (") if they occur in the file name...  why would you do that?.
    required: true
  invert:
    description: invert the grep search, "true" or "false"
    required: false
    default: "false"
outputs:
  changes-found:
    description: true if the pattern matched any files.
    value: ${{ steps.find_matches.outputs.changes }}
runs:
  using: "composite"
  steps:
    - id: find_matches
      run: |
        echo Environment variable file CHANGES_CHANGED_FILE_OUTPUTFILE=$CHANGES_CHANGED_FILE_OUTPUTFILE 1>&2
        echo Action parameter file changes_file=$CHANGES_FILE 1>&2
        TARGET_FILE=
        if [[ -n "${CHANGES_CHANGED_FILE_OUTPUTFILE}" ]]; then
          TARGET_FILE="$CHANGES_CHANGED_FILE_OUTPUTFILE"
        fi
        if [[ -n "${CHANGES_FILE}" ]] && [[ -f "${CHANGES_FILE}" ]]; then
          TARGET_FILE="${CHANGES_FILE}"
        fi
        result=true
        echo Target File: "${TARGET_FILE}" 1>&2
        echo PATTERN="${PATTERN}" 1>&2
        if [[ -f "${TARGET_FILE}" ]]; then
          echo found: 1>&2
          if [[ "${INVERT}" == "true" ]]; then
            cat "${TARGET_FILE}" | grep -v "${PATTERN}" || echo No matching files. 1>&2
            count="$( cat "${TARGET_FILE}" | grep -c -v "${PATTERN}" || true)"
          else
            cat "${TARGET_FILE}" | grep "${PATTERN}" || echo No matching files. 1>&2
            count="$( cat "${TARGET_FILE}" | grep -c "${PATTERN}" || true)"
          fi
          echo Found file count: "$count"
          if [[ "$count" == 0 ]]; then
            result=false
          fi
        else
          echo "::error::Target File was not set or was not found, will assume a change exists.   This is an error that should be corrected."
        fi
        echo Perform build: ${result} 1>&2
        echo "::set-output name=changes::$(echo $result)"
      shell: bash
      env:
        CHANGES_FILE: ${{ inputs.changes-file }}
        PATTERN: ${{ inputs.pattern }}
        INVERT: ${{ inputs.invert }}
