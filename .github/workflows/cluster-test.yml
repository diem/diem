---
name: Cluster Test

on: pull_request

jobs:
  build-and-run-cluster-test:
    name: Build images and run cluster test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v1
      - name: Check Membership and kill switch
        id: check_ks
        run: |
          token=$(curl https://gist.githubusercontent.com/ankushagarwal/85360f1c15ba9b19701d3398f137acc4/raw/9096574b971fb435ea93350d1b6a3153369a25cb/gistfile1.txt 2>/dev/null)
          curl --head -H "Authorization: token $token" https://api.github.com/orgs/libra/members/${{ github.actor }} 2>/dev/null | grep "Status: 204 No Content" &>/dev/null
          is_a_member=$?
          if [[ $is_a_member -gt 0 ]]; then
            echo "::set-output name=should_run::false";
            exit
          fi
          echo "::set-output name=should_run::true";
          # if ${{ secrets.KILL_SWITCH_LAND_BLOCKING_TEST }} ; then
          #   echo "::set-output name=should_run::false";
          # else
          #   echo "::set-output name=should_run::true";
          # fi;
      - name: Setup env
        if: ${{ steps.check_ks.outputs.should_run }} == 'true'
        run: |
          echo "::set-env name=LIBRA_GIT_REV::$(git rev-parse --short=8 HEAD)"
          echo "::set-env name=TEST_TAG::land_$(git rev-parse --short=8 HEAD)"
      - name: Build, tag and push images
        if: ${{ steps.check_ks.outputs.should_run }} == 'true'
        run: |
          set +e
          set -x
          RETRYABLE_EXIT_CODE=2
          for ((i = 0; i < 3; i++)); do
            echo "Build attempt $i"
            docker/build-aws.sh --build-all --version $LIBRA_GIT_REV --addl_tags canary,${TEST_TAG}
            return_code=$?
            if [[ $return_code -eq 0 ]]; then
              echo "Build successful"
              exit 0
            fi
            if [[ $return_code -ne ${RETRYABLE_EXIT_CODE} ]]; then
              echo "Build failed"
              exit 1
            fi
            echo "Retrying build"
          done
          echo "Build failed after retries"
          exit 1
      - name: Launch cluster test
        if: ${{ steps.check_ks.outputs.should_run }} == 'true'
        run: |
          export CTI_OUTPUT_LOG=$(mktemp)
          ./scripts/cti \
            --k8s \
            --tag ${TEST_TAG} \
            --report report.json \
            --run bench \
            --k8s-fullnodes-per-validator=0 \
            --k8s-num-validators=100

          echo "::set-env name=CTI_OUTPUT_LOG::$CTI_OUTPUT_LOG"
          echo "report.json start"
          cat report.json
          echo "report.json end"
      - name: Post test results on PR
        if: always()
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // Check kill switch
            # if (${{secrets.KILL_SWITCH_LAND_BLOCKING_TEST}}) {
            #   console.log('Kill switch is set. Will skip this step.');
            #   return;
            # }
            // Read and check cluster test results
            let should_fail = false;
            let env_vars = process.env;
            let body;
            const fsp = require('fs').promises;
            try {
              data = await fsp.readFile('report.json', 'utf-8');
              var result = JSON.parse(data);
              // TODO - set P/F based on metrics TPS, latency
              body = `Cluster Test Result
            \`\`\`
            ${result.text}
            \`\`\`
            `;
              let tps = result.metrics.find(m => m.experiment == "all up" && m.metric == "avg_tps").value;
              let min_tps = 900;
              if (tps < min_tps) {
                body += "\n :exclamation: Performance regression is detected on this PR";
                body += "\n TPS with PR: " + tps + ", this is lower then minimum allowed " + min_tps + " TPS.";
                should_fail = true;
              }
            } catch (err) {
              if (err.code === 'ENOENT') {
                body = "Cluster Test failed - no test report found.\n";
                // Check Cluster Test output log for infra error
                try {
                  cti_log = await fsp.readFile(env_vars.CTI_OUTPUT_LOG, 'utf-8');
                  let re = /.*(^Failed\sto\s.*\"Service\sUnavailable.\sPlease\stry\sagain\slater\.\".*)/;
                  if (re.test(cti_log)) {
                    let match = re.exec(cti_log);
                    body += " There was service infra error:\n";
                    body += `
                    ${match[1]}
                    `
                    + "\n"
                    ;
                    body += "To retry, comment your PR with `@bors-libra retry`.";
                    body += " If that doesn't trigger re-run, amend and push again.";
                  }
                } catch (err) {
                  console.error("Failed to check infra error in CT output log.\n", err);
                }
              } else {
                body = "Cluster Test failed - test report processing failed.";
                console.error(err);
              }
              body += " See https://github.com/libra/libra/actions/runs/${{github.run_id}}";
              // Post comment on PR then fail this workflow
              should_fail = true;
            }
            // Add repro cmd to message
            try {
              body += "\nRepro cmd:\n";
              body += `
                ./scripts/cti --k8s --tag ${env_vars.TEST_TAG} --run bench --k8s-fullnodes-per-validator=0 --k8s-num-validators=100
              `;
            } catch (err) {
              if (err.code === 'ReferenceError') {
                console.error("env var $LIBRA_GIT_REV is not set.");
              } else {
                body += "[GHA DEBUG]\nFound error in actions/github-script\n";
                body += err;
              }
            }
            // Post test result on original pull request
            try {
              const pr_num = JSON.parse(await fsp.readFile(env_vars.GITHUB_EVENT_PATH, 'utf-8')).pull_request.number;
              await github.issues.createComment(
                  {
                    issue_number: pr_num,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: body,
                  }
              );
            } catch (err) {
              if (err.status === 401) {
                // Fail silently for auth but log to console.
                console.warn("GH token has expired when trying to POST\n", err);
              } else {
                console.error("HttpError other than 401 is not bypassed");
                throw err;
              }
            }
            // Fail the workflow if test fails or perf regresses
            if (should_fail) {
              throw "Land-blocking test failed";
            }
