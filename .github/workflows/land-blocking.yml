---
name: Land-blocking Test

on:
  pull_request:
    branches:
      - master

jobs:
  build-and-run-cluster-test:
    name: Build images and run cluster test
    runs-on: self-hosted
    # NOTE the total time should cover build (~10 min) and test (~10 min).
    # The additional time can cover the retries and wait.
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v1
      - name: Setup env
        run: |
          echo "::set-env name=LIBRA_GIT_REV::$(git rev-parse --short=8 HEAD)"
          echo "::set-env name=TEST_TAG::land_$(git rev-parse --short=8 HEAD)"
          echo "::set-env name=PREV_TAG::land_$(git rev-parse --short=8 HEAD~1)"
      - name: Build, tag and push images
        run: |
          set +e
          date
          RETRYABLE_EXIT_CODE=2
          for ((i = 0; i < 3; i++)); do
            echo "Build attempt $i"
            docker/build-aws.sh --build-all-cti --version $LIBRA_GIT_REV --addl_tags canary,${TEST_TAG}
            return_code=$?
            if [[ $return_code -eq 0 ]]; then
              echo "Build successful"
              exit 0
            fi
            if [[ $return_code -ne ${RETRYABLE_EXIT_CODE} ]]; then
              echo "Build failed"
              exit 1
            fi
            echo "Retrying build"
          done
          echo "Build failed after retries"
          exit 1
      - name: Launch cluster test
        # NOTE Remember to update PR comment payload if cti cmd is updated.
        run: |
          set +e
          date
          export CTI_OUTPUT_LOG=$(mktemp)
          echo "::set-env name=CTI_OUTPUT_LOG::$CTI_OUTPUT_LOG"
          ./scripts/cti \
            --tag ${PREV_TAG} \
            --cluster-test-tag ${TEST_TAG} \
            -E RUST_LOG=debug \
            -E BATCH_SIZE=15 \
            -E TEST_TAG=${TEST_TAG} \
            --report report.json \
            --suite land_blocking_compat
          if [ -s "report.json" ]; then
            echo "report.json start"
            cat report.json
            echo "report.json end"
          else
            echo "report.json is empty or not found."
