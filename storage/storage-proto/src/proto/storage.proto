// Copyright (c) The Libra Core Contributors
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package storage;

import "account_state_blob.proto";
import "get_with_proof.proto";
import "ledger_info.proto";
import "proof.proto";
import "transaction.proto";
import "transaction_info.proto";
import "epoch_change.proto";
import "validator_set.proto";

// -----------------------------------------------------------------------------
// ---------------- Service definition for storage
// -----------------------------------------------------------------------------
service Storage {
  // Write APIs.

  // Persist transactions. Called by Execution when either syncing nodes or
  // committing blocks during normal operation.
  rpc SaveTransactions(SaveTransactionsRequest)
      returns (SaveTransactionsResponse);

  // Read APIs.

  // Used to get a piece of data and return the proof of it. If the client
  // knows and trusts a ledger info at version v, it should pass v in as the
  // client_known_version and we will return the latest ledger info together
  // with the proof that it derives from v.
  rpc UpdateToLatestLedger(types.UpdateToLatestLedgerRequest)
      returns (types.UpdateToLatestLedgerResponse);

  // When we receive a request from a peer validator asking a list of
  // transactions for state synchronization, this API can be used to serve the
  // request. Note that the peer should specify a ledger version and all proofs
  // in the response will be relative to this given ledger version.
  rpc GetTransactions(GetTransactionsRequest) returns (GetTransactionsResponse);

  rpc GetLatestStateRoot(GetLatestStateRootRequest)
      returns (GetLatestStateRootResponse);

  rpc GetLatestAccountState(GetLatestAccountStateRequest)
      returns (GetLatestAccountStateResponse);

  rpc GetAccountStateWithProofByVersion(
      GetAccountStateWithProofByVersionRequest)
      returns (GetAccountStateWithProofByVersionResponse);

  // Returns information needed for libra core to start up.
  rpc GetStartupInfo(GetStartupInfoRequest) returns (GetStartupInfoResponse);

  // Returns latest ledger infos per epoch.
  rpc GetEpochChangeLedgerInfos(GetEpochChangeLedgerInfosRequest)
      returns (types.EpochChangeProof);

  // Returns a stream of account states.
  rpc BackupAccountState(BackupAccountStateRequest)
      returns (stream BackupAccountStateResponse);

  rpc GetAccountStateRangeProof(GetAccountStateRangeProofRequest)
      returns (GetAccountStateRangeProofResponse);

  // Returns a stream of transactions.
  rpc BackupTransaction(BackupTransactionRequest)
      returns (stream BackupTransactionResponse);

  // Returns a stream of transaction infos.
  rpc BackupTransactionInfo(BackupTransactionInfoRequest)
      returns (stream BackupTransactionInfoResponse);
}

message SaveTransactionsRequest {
  // Transactions to persist.
  repeated types.TransactionToCommit txns_to_commit = 1;

  // The version of the first transaction in `txns_to_commit`.
  uint64 first_version = 2;

  // If this is set, Storage will check its state after applying the above
  // transactions matches info in this LedgerInfo before committing otherwise
  // it denies the request.
  types.LedgerInfoWithSignatures ledger_info_with_signatures = 3;
}

message SaveTransactionsResponse {}

message GetTransactionsRequest {
  // The version to start with.
  uint64 start_version = 1;
  // The size of the transaction batch.
  uint64 batch_size = 2;
  // All the proofs returned in the response should be relative to this
  // given version.
  uint64 ledger_version = 3;
  // Used to return the events associated with each transaction
  bool fetch_events = 4;
}

message GetTransactionsResponse {
  types.TransactionListWithProof txn_list_with_proof = 1;
}

message GetLatestStateRootRequest {}

message GetLatestStateRootResponse {
  uint64 version = 1;
  bytes state_root_hash = 2;
}

message GetLatestAccountStateRequest { bytes address = 1; }

message GetLatestAccountStateResponse {
  types.AccountStateBlob account_state_blob = 1;
}

message GetAccountStateWithProofByVersionRequest {
  /// The account address to query with.
  bytes address = 1;

  /// The version the query is based on.
  uint64 version = 2;
}

message GetAccountStateWithProofByVersionResponse {
  /// The optional blob of account state blob.
  types.AccountStateBlob account_state_blob = 1;

  /// The state root hash the query is based on.
  types.SparseMerkleProof sparse_merkle_proof = 2;
}

message GetStartupInfoRequest {}

message GetStartupInfoResponse {
  // When this is empty, Storage needs to be bootstrapped via the bootstrap API
  StartupInfo info = 1;
}

message TreeState {
  // The number of transactions in the accumulator. "0" means an empty
  // transaction accumulator, in which case `ledger_frozen_subtree_hashes` must
  // be empty, but pre-genesis state can exist. All fields below base on this.
  uint64 num_transactions = 1;
  // From left to right, root hashes of all frozen subtrees.
  repeated bytes ledger_frozen_subtree_hashes = 2;
  // The latest account state root hash.
  bytes account_state_root_hash = 3;
}

message StartupInfo {
  // The latest committed LedgerInfo. Note that at start up storage can have
  // more transactions than the latest committed LedgerInfo indicates due to an
  // incomplete start up sync.
  types.LedgerInfoWithSignatures latest_ledger_info = 1;

  // If the above LedgerInfo doesn't carry a epoch info (which is normally
  // the case unless the above is on an epoch boundary), the latest epoch info.
  bytes latest_epoch_info = 2;

  // The latest committed tree state matching the ledger info above.
  TreeState committed_tree_state = 3;

  // The latest synced tree state when the number of transactions is more than
  // ledger_info indicates.
  TreeState synced_tree_state = 4;
}

message GetEpochChangeLedgerInfosRequest {
  /// The last epoch number with available information to the client.
  uint64 start_epoch = 1;
  /// The target epoch number that client wants to sync to.
  uint64 end_epoch = 2;
}

message BackupAccountStateRequest {
  // Version at which to start the backup
  uint64 version = 1;
}

message BackupAccountStateResponse {
  // Account Key (32-byte hash value)
  bytes account_key = 1;

  // Raw account state
  types.AccountStateBlob account_state_blob = 2;
}

message GetAccountStateRangeProofRequest {
  // The rightmost key in the range to prove.
  bytes rightmost_key = 1;

  // The version of the state.
  uint64 version = 2;
}

message GetAccountStateRangeProofResponse {
  types.SparseMerkleRangeProof proof = 1;
}

message BackupTransactionRequest {
  // The version of the first transaction.
  uint64 start_version = 1;

  // Number of transactions to request.
  uint64 num_transactions = 2;
}

message BackupTransactionResponse {
  types.Transaction transaction = 1;
}

message BackupTransactionInfoRequest {
  // The version of the first transaction info.
  uint64 start_version = 1;

  // Number of transaction infos to request.
  uint64 num_transactions = 2;
}

message BackupTransactionInfoResponse {
  types.TransactionInfo transaction_info = 1;
}
